{"version":3,"sources":["../src/index.ts","../src/cryptography/ed25519-keypair.ts","../src/cryptography/keypair.ts","../src/cryptography/secp256k1-keypair.ts","../src/cryptography/secp256k1-publickey.ts","../src/cryptography/ed25519-publickey.ts","../src/cryptography/signature.ts","../src/cryptography/publickey.ts","../src/cryptography/mnemonics.ts","../src/utils/ed25519-hd-key.ts","../src/providers/provider.ts","../src/rpc/client.ts","../src/pkg-version.ts","../src/types/common.ts","../src/cryptography/hash.ts","../src/types/objects.ts","../src/types/events.ts","../src/types/transactions.ts","../src/types/option.ts","../src/framework/framework.ts","../src/types/sui-bcs.ts","../src/types/version.ts","../src/types/normalized.ts","../src/types/validator.ts","../src/types/coin.ts","../src/types/checkpoints.ts","../src/types/dynamic_fields.ts","../src/rpc/websocket-client.ts","../src/rpc/faucet-client.ts","../src/providers/json-rpc-provider.ts","../src/signers/txn-data-serializers/call-arg-serializer.ts","../src/signers/txn-data-serializers/type-tag-serializer.ts","../src/signers/txn-data-serializers/local-txn-data-serializer.ts","../src/rpc/connection.ts","../src/providers/json-rpc-provider-with-cache.ts","../src/signers/txn-data-serializers/rpc-txn-data-serializer.ts","../src/signers/signer-with-provider.ts","../src/providers/void-provider.ts","../src/utils/intent.ts","../src/signers/raw-signer.ts","../src/utils/format.ts","../src/utils/verify.ts","../src/framework/sui-system-state.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nexport * from './cryptography/ed25519-keypair';\nexport * from './cryptography/secp256k1-keypair';\nexport * from './cryptography/keypair';\nexport * from './cryptography/ed25519-publickey';\nexport * from './cryptography/secp256k1-publickey';\nexport * from './cryptography/publickey';\nexport * from './cryptography/mnemonics';\nexport * from './cryptography/signature';\n\nexport * from './providers/provider';\nexport * from './providers/json-rpc-provider';\nexport * from './providers/json-rpc-provider-with-cache';\n\nexport * from './rpc/client';\nexport * from './rpc/faucet-client';\nexport * from './rpc/websocket-client';\nexport * from './rpc/connection';\n\nexport * from './signers/txn-data-serializers/rpc-txn-data-serializer';\nexport * from './signers/txn-data-serializers/txn-data-serializer';\nexport * from './signers/txn-data-serializers/local-txn-data-serializer';\nexport * from './signers/txn-data-serializers/type-tag-serializer';\n\nexport * from './signers/signer';\nexport * from './signers/raw-signer';\nexport * from './signers/signer-with-provider';\n\nexport * from './types';\nexport * from './utils/format';\nexport * from './utils/intent';\nexport * from './utils/verify';\n\nexport * from './framework';\n\nexport { fromB64, toB64 } from '@mysten/bcs';\n\nexport { is, assert } from 'superstruct';\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport nacl from 'tweetnacl';\nimport { ExportedKeypair, Keypair, PRIVATE_KEY_SIZE } from './keypair';\nimport { Ed25519PublicKey } from './ed25519-publickey';\nimport { isValidHardenedPath, mnemonicToSeedHex } from './mnemonics';\nimport { derivePath } from '../utils/ed25519-hd-key';\nimport { toB64 } from '@mysten/bcs';\nimport { SignatureScheme } from './signature';\n\nexport const DEFAULT_ED25519_DERIVATION_PATH = \"m/44'/784'/0'/0'/0'\";\n\n/**\n * Ed25519 Keypair data\n */\nexport interface Ed25519KeypairData {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An Ed25519 Keypair used for signing transactions.\n */\nexport class Ed25519Keypair implements Keypair {\n  private keypair: Ed25519KeypairData;\n\n  /**\n   * Create a new Ed25519 keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair Ed25519 keypair\n   */\n  constructor(keypair?: Ed25519KeypairData) {\n    if (keypair) {\n      this.keypair = keypair;\n    } else {\n      this.keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Get the key scheme of the keypair ED25519\n   */\n  getKeyScheme(): SignatureScheme {\n    return 'ED25519';\n  }\n\n  /**\n   * Generate a new random Ed25519 keypair\n   */\n  static generate(): Ed25519Keypair {\n    return new Ed25519Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a Ed25519 keypair from a raw secret key byte array, also known as seed.\n   * This is NOT the private scalar which is result of hashing and bit clamping of\n   * the raw secret key.\n   *\n   * The sui.keystore key is a list of Base64 encoded `flag || privkey`. To import\n   * a key from sui.keystore to typescript, decode from base64 and remove the first\n   * flag byte after checking it is indeed the Ed25519 scheme flag 0x00 (See more\n   * on flag for signature scheme: https://github.com/MystenLabs/sui/blob/818406c5abdf7de1b80915a0519071eec3a5b1c7/crates/sui-types/src/crypto.rs#L1650):\n   * ```\n   * import { Ed25519Keypair, fromB64 } from '@mysten/sui.js';\n   * const raw = fromB64(t[1]);\n   * if (raw[0] !== 0 || raw.length !== PRIVATE_KEY_SIZE + 1) {\n   *   throw new Error('invalid key');\n   * }\n   * const imported = Ed25519Keypair.fromSecretKey(raw.slice(1))\n   * ```\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: { skipValidation?: boolean },\n  ): Ed25519Keypair {\n    const secretKeyLength = secretKey.length;\n    if (secretKeyLength !== PRIVATE_KEY_SIZE) {\n      throw new Error(\n        `Wrong secretKey size. Expected ${PRIVATE_KEY_SIZE} bytes, got ${secretKeyLength}.`,\n      );\n    }\n    const keypair = nacl.sign.keyPair.fromSeed(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('sui validation');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Ed25519Keypair(keypair);\n  }\n\n  /**\n   * The public key for this Ed25519 keypair\n   */\n  getPublicKey(): Ed25519PublicKey {\n    return new Ed25519PublicKey(this.keypair.publicKey);\n  }\n\n  /**\n   * Return the signature for the provided data using Ed25519.\n   */\n  signData(data: Uint8Array, _useRecoverable: boolean = false): Uint8Array {\n    return nacl.sign.detached(data, this.keypair.secretKey);\n  }\n\n  /**\n   * Derive Ed25519 keypair from mnemonics and path. The mnemonics must be normalized\n   * and validated against the english wordlist.\n   *\n   * If path is none, it will default to m/44'/784'/0'/0'/0', otherwise the path must\n   * be compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.\n   */\n  static deriveKeypair(mnemonics: string, path?: string): Ed25519Keypair {\n    if (path == null) {\n      path = DEFAULT_ED25519_DERIVATION_PATH;\n    }\n    if (!isValidHardenedPath(path)) {\n      throw new Error('Invalid derivation path');\n    }\n    const { key } = derivePath(path, mnemonicToSeedHex(mnemonics));\n\n    return Ed25519Keypair.fromSecretKey(key);\n  }\n\n  export(): ExportedKeypair {\n    return {\n      schema: 'ED25519',\n      privateKey: toB64(this.keypair.secretKey),\n    };\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport { Ed25519Keypair } from './ed25519-keypair';\nimport { PublicKey } from './publickey';\nimport { Secp256k1Keypair } from './secp256k1-keypair';\nimport { SignatureScheme } from './signature';\n\nexport const PRIVATE_KEY_SIZE = 32;\nexport const LEGACY_PRIVATE_KEY_SIZE = 64;\n\nexport type ExportedKeypair = {\n  schema: SignatureScheme;\n  privateKey: string;\n};\n\n/**\n * A keypair used for signing transactions.\n */\nexport interface Keypair {\n  /**\n   * The public key for this keypair\n   */\n  getPublicKey(): PublicKey;\n\n  /**\n   * Return the signature for the data\n   */\n  signData(data: Uint8Array, useRecoverable: boolean): Uint8Array;\n\n  /**\n   * Get the key scheme of the keypair: Secp256k1 or ED25519\n   */\n  getKeyScheme(): SignatureScheme;\n\n  export(): ExportedKeypair;\n}\n\nexport function fromExportedKeypair(keypair: ExportedKeypair): Keypair {\n  const secretKey = fromB64(keypair.privateKey);\n  switch (keypair.schema) {\n    case 'ED25519':\n      let pureSecretKey = secretKey;\n      if (secretKey.length === LEGACY_PRIVATE_KEY_SIZE) {\n        // This is a legacy secret key, we need to strip the public key bytes and only read the first 32 bytes\n        pureSecretKey = secretKey.slice(0, PRIVATE_KEY_SIZE);\n      }\n      return Ed25519Keypair.fromSecretKey(pureSecretKey);\n    case 'Secp256k1':\n      return Secp256k1Keypair.fromSecretKey(secretKey);\n    default:\n      throw new Error(`Invalid keypair schema ${keypair.schema}`);\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport * as secp from '@noble/secp256k1';\nimport type { ExportedKeypair, Keypair } from './keypair';\nimport { PublicKey } from './publickey';\nimport { hmac } from '@noble/hashes/hmac';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Secp256k1PublicKey } from './secp256k1-publickey';\nimport { Signature } from '@noble/secp256k1';\nimport { isValidBIP32Path, mnemonicToSeed } from './mnemonics';\nimport { HDKey } from '@scure/bip32';\nimport { toB64 } from '@mysten/bcs';\nimport { SignatureScheme } from './signature';\n\nexport const DEFAULT_SECP256K1_DERIVATION_PATH = \"m/54'/784'/0'/0/0\";\n\nsecp.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach((msg) => h.update(msg));\n  return h.digest();\n};\n\n/**\n * Secp256k1 Keypair data\n */\nexport interface Secp256k1KeypairData {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An Secp256k1 Keypair used for signing transactions.\n */\nexport class Secp256k1Keypair implements Keypair {\n  private keypair: Secp256k1KeypairData;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Secp256k1Keypair} is provided.\n   *\n   * @param keypair secp256k1 keypair\n   */\n  constructor(keypair?: Secp256k1KeypairData) {\n    if (keypair) {\n      this.keypair = keypair;\n    } else {\n      const secretKey: Uint8Array = secp.utils.randomPrivateKey();\n      const publicKey: Uint8Array = secp.getPublicKey(secretKey, true);\n\n      this.keypair = { publicKey, secretKey };\n    }\n  }\n\n  /**\n   * Get the key scheme of the keypair Secp256k1\n   */\n  getKeyScheme(): SignatureScheme {\n    return 'Secp256k1';\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Secp256k1Keypair {\n    const secretKey = secp.utils.randomPrivateKey();\n    const publicKey = secp.getPublicKey(secretKey, true);\n\n    return new Secp256k1Keypair({ publicKey, secretKey });\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: { skipValidation?: boolean },\n  ): Secp256k1Keypair {\n    const publicKey: Uint8Array = secp.getPublicKey(secretKey, true);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('sui validation');\n      const msgHash = sha256(signData);\n      const signature = secp.signSync(msgHash, secretKey);\n      if (!secp.verify(signature, msgHash, publicKey, { strict: true })) {\n        throw new Error('Provided secretKey is invalid');\n      }\n    }\n    return new Secp256k1Keypair({ publicKey, secretKey });\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Secp256k1Keypair {\n    let publicKey = secp.getPublicKey(seed, true);\n    return new Secp256k1Keypair({ publicKey, secretKey: seed });\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  getPublicKey(): PublicKey {\n    return new Secp256k1PublicKey(this.keypair.publicKey);\n  }\n\n  /**\n   * Return the signature for the provided data.\n   */\n  signData(data: Uint8Array, useRecoverable: boolean): Uint8Array {\n    const msgHash = sha256(data);\n    // Starting from sui 0.25.0, sui accepts 64-byte nonrecoverable signature instead of 65-byte recoverable signature for Secp256k1.\n    // TODO(joyqvq): Remove recoverable signature support after 0.25.0 is released.\n    if (useRecoverable) {\n      const [sig, rec_id] = secp.signSync(msgHash, this.keypair.secretKey, {\n        canonical: true,\n        recovered: true,\n      });\n      var recoverable_sig = new Uint8Array(65);\n      recoverable_sig.set(Signature.fromDER(sig).toCompactRawBytes());\n      recoverable_sig.set([rec_id], 64);\n      return recoverable_sig;\n    } else {\n      const sig = secp.signSync(msgHash, this.keypair.secretKey, {\n        canonical: true,\n        recovered: false,\n      });\n      return Signature.fromDER(sig).toCompactRawBytes();\n    }\n  }\n\n  /**\n   * Derive Secp256k1 keypair from mnemonics and path. The mnemonics must be normalized\n   * and validated against the english wordlist.\n   *\n   * If path is none, it will default to m/54'/784'/0'/0/0, otherwise the path must\n   * be compliant to BIP-32 in form m/54'/784'/{account_index}'/{change_index}/{address_index}.\n   */\n  static deriveKeypair(path: string, mnemonics: string): Secp256k1Keypair {\n    if (!isValidBIP32Path(path)) {\n      throw new Error('Invalid derivation path');\n    }\n    const key = HDKey.fromMasterSeed(mnemonicToSeed(mnemonics)).derive(path);\n    if (key.publicKey == null || key.privateKey == null) {\n      throw new Error('Invalid key');\n    }\n    return new Secp256k1Keypair({\n      publicKey: key.publicKey,\n      secretKey: key.privateKey,\n    });\n  }\n\n  export(): ExportedKeypair {\n    return {\n      schema: 'Secp256k1',\n      privateKey: toB64(this.keypair.secretKey),\n    };\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport sha3 from 'js-sha3';\nimport { bytesEqual, PublicKey, PublicKeyInitData } from './publickey';\nimport { SIGNATURE_SCHEME_TO_FLAG } from './signature';\n\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256k1 public key\n */\nexport class Secp256k1PublicKey implements PublicKey {\n  static SIZE = SECP256K1_PUBLIC_KEY_SIZE;\n  private data: Uint8Array;\n\n  /**\n   * Create a new Secp256k1PublicKey object\n   * @param value secp256k1 public key as buffer or base-64 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    if (typeof value === 'string') {\n      this.data = fromB64(value);\n    } else if (value instanceof Uint8Array) {\n      this.data = value;\n    } else {\n      this.data = Uint8Array.from(value);\n    }\n\n    if (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {\n      throw new Error(\n        `Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n      );\n    }\n  }\n\n  /**\n   * Checks if two Secp256k1 public keys are equal\n   */\n  equals(publicKey: Secp256k1PublicKey): boolean {\n    return bytesEqual(this.toBytes(), publicKey.toBytes());\n  }\n\n  /**\n   * Return the base-64 representation of the Secp256k1 public key\n   */\n  toBase64(): string {\n    return toB64(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the Secp256k1 public key\n   */\n  toBytes(): Uint8Array {\n    return this.data;\n  }\n\n  /**\n   * Return the base-64 representation of the Secp256k1 public key\n   */\n  toString(): string {\n    return this.toBase64();\n  }\n\n  /**\n   * Return the Sui address associated with this Secp256k1 public key\n   */\n  toSuiAddress(): string {\n    let tmp = new Uint8Array(SECP256K1_PUBLIC_KEY_SIZE + 1);\n    tmp.set([SIGNATURE_SCHEME_TO_FLAG['Secp256k1']]);\n    tmp.set(this.toBytes(), 1);\n    return sha3.sha3_256(tmp).slice(0, 40);\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport sha3 from 'js-sha3';\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport { bytesEqual, PublicKeyInitData } from './publickey';\nimport { SIGNATURE_SCHEME_TO_FLAG } from './signature';\n\nconst PUBLIC_KEY_SIZE = 32;\n\n/**\n * An Ed25519 public key\n */\nexport class Ed25519PublicKey {\n  static SIZE = PUBLIC_KEY_SIZE;\n  private data: Uint8Array;\n\n  /**\n   * Create a new Ed25519PublicKey object\n   * @param value ed25519 public key as buffer or base-64 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    if (typeof value === 'string') {\n      this.data = fromB64(value);\n    } else if (value instanceof Uint8Array) {\n      this.data = value;\n    } else {\n      this.data = Uint8Array.from(value);\n    }\n\n    if (this.data.length !== PUBLIC_KEY_SIZE) {\n      throw new Error(\n        `Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n      );\n    }\n  }\n\n  /**\n   * Checks if two Ed25519 public keys are equal\n   */\n  equals(publicKey: Ed25519PublicKey): boolean {\n    return bytesEqual(this.toBytes(), publicKey.toBytes());\n  }\n\n  /**\n   * Return the base-64 representation of the Ed25519 public key\n   */\n  toBase64(): string {\n    return toB64(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the Ed25519 public key\n   */\n  toBytes(): Uint8Array {\n    return this.data;\n  }\n\n  /**\n   * Return the base-64 representation of the Ed25519 public key\n   */\n  toString(): string {\n    return this.toBase64();\n  }\n\n  /**\n   * Return the Sui address associated with this Ed25519 public key\n   */\n  toSuiAddress(): string {\n    let tmp = new Uint8Array(PUBLIC_KEY_SIZE + 1);\n    tmp.set([SIGNATURE_SCHEME_TO_FLAG['ED25519']]);\n    tmp.set(this.toBytes(), 1);\n    return sha3.sha3_256(tmp).slice(0, 40);\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport { Ed25519PublicKey } from './ed25519-publickey';\nimport { PublicKey } from './publickey';\nimport { Secp256k1PublicKey } from './secp256k1-publickey';\n\n/**\n * A keypair used for signing transactions.\n */\nexport type SignatureScheme = 'ED25519' | 'Secp256k1';\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signatureScheme: SignatureScheme;\n  /** Base64-encoded signature */\n  signature: Uint8Array;\n  /** Base64-encoded public key */\n  pubKey: PublicKey;\n};\n\nexport type SerializedSignature = string;\n\nexport const SIGNATURE_SCHEME_TO_FLAG = {\n  ED25519: 0x00,\n  Secp256k1: 0x01,\n};\n\nexport const SIGNATURE_FLAG_TO_SCHEME = {\n  0x00: 'ED25519',\n  0x01: 'Secp256k1',\n} as const;\n\nexport function toSerializedSignature({\n  signature,\n  signatureScheme,\n  pubKey,\n}: SignaturePubkeyPair): SerializedSignature {\n  const serializedSignature = new Uint8Array(\n    1 + signature.length + pubKey.toBytes().length,\n  );\n  serializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n  serializedSignature.set(signature, 1);\n  serializedSignature.set(pubKey.toBytes(), 1 + signature.length);\n  return toB64(serializedSignature);\n}\n\nexport function fromSerializedSignature(\n  serializedSignature: SerializedSignature,\n): SignaturePubkeyPair {\n  const bytes = fromB64(serializedSignature);\n  const signatureScheme =\n    SIGNATURE_FLAG_TO_SCHEME[bytes[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\n  const PublicKey =\n    signatureScheme === 'ED25519' ? Ed25519PublicKey : Secp256k1PublicKey;\n\n  const signature = bytes.slice(1, bytes.length - PublicKey.SIZE);\n  const pubkeyBytes = bytes.slice(1 + signature.length);\n  const pubKey = new PublicKey(pubkeyBytes);\n\n  return {\n    signatureScheme,\n    signature,\n    pubKey,\n  };\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Ed25519PublicKey } from './ed25519-publickey';\nimport { Secp256k1PublicKey } from './secp256k1-publickey';\nimport { SignatureScheme } from './signature';\n\n/**\n * Value to be converted into public key.\n */\nexport type PublicKeyInitData = string | Uint8Array | Iterable<number>;\n\nexport function bytesEqual(a: Uint8Array, b: Uint8Array) {\n  if (a === b) return true;\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * A public key\n */\nexport interface PublicKey {\n  /**\n   * Checks if two public keys are equal\n   */\n  equals(publicKey: PublicKey): boolean;\n\n  /**\n   * Return the base-64 representation of the public key\n   */\n  toBase64(): string;\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array;\n\n  /**\n   * Return the base-64 representation of the public key\n   */\n  toString(): string;\n\n  /**\n   * Return the Sui address associated with this public key\n   */\n  toSuiAddress(): string;\n}\n\nexport function publicKeyFromSerialized(\n  schema: SignatureScheme,\n  pubKey: string,\n): PublicKey {\n  if (schema === 'ED25519') {\n    return new Ed25519PublicKey(pubKey);\n  }\n  if (schema === 'Secp256k1') {\n    return new Secp256k1PublicKey(pubKey);\n  }\n  throw new Error('Unknown public key schema');\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { toHEX } from '@mysten/bcs';\nimport { mnemonicToSeedSync as bip39MnemonicToSeedSync } from '@scure/bip39';\n\n/**\n * Parse and validate a path that is compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.\n *\n * @param path path string (e.g. `m/44'/784'/0'/0'/0'`).\n */\nexport function isValidHardenedPath(path: string): boolean {\n  if (\n    !new RegExp(\"^m\\\\/44'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+'\\\\/[0-9]+'+$\").test(path)\n  ) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Parse and validate a path that is compliant to BIP-32 in form m/54'/784'/{account_index}'/{change_index}/{address_index}.\n * Note that the purpose for Secp256k1 is registered as 54, to differentiate from Ed25519 with purpose 44.\n *\n * @param path path string (e.g. `m/54'/784'/0'/0/0`).\n */\nexport function isValidBIP32Path(path: string): boolean {\n  if (!new RegExp(\"^m\\\\/54'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+\\\\/[0-9]+$\").test(path)) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Uses KDF to derive 64 bytes of key data from mnemonic with empty password.\n *\n * @param mnemonics 12 words string split by spaces.\n */\nexport function mnemonicToSeed(mnemonics: string): Uint8Array {\n  return bip39MnemonicToSeedSync(mnemonics, '');\n}\n\n/**\n * Derive the seed in hex format from a 12-word mnemonic string.\n *\n * @param mnemonics 12 words string split by spaces.\n */\nexport function mnemonicToSeedHex(mnemonics: string): string {\n  return toHEX(mnemonicToSeed(mnemonics));\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// This is adapted from https://github.com/alepop/ed25519-hd-key replacing create-hmac\n// with @noble/hashes to be browser compatible.\n\nimport { sha512 } from '@noble/hashes/sha512';\nimport { hmac } from '@noble/hashes/hmac';\nimport nacl from 'tweetnacl';\nimport { fromHEX } from '@mysten/bcs';\n\ntype Hex = string;\ntype Path = string;\n\ntype Keys = {\n  key: Uint8Array;\n  chainCode: Uint8Array;\n};\n\nconst ED25519_CURVE = 'ed25519 seed';\nconst HARDENED_OFFSET = 0x80000000;\n\nexport const pathRegex = new RegExp(\"^m(\\\\/[0-9]+')+$\");\n\nexport const replaceDerive = (val: string): string => val.replace(\"'\", '');\n\nexport const getMasterKeyFromSeed = (seed: Hex): Keys => {\n  const h = hmac.create(sha512, ED25519_CURVE);\n  const I = h.update(fromHEX(seed)).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR,\n  };\n};\n\nconst CKDPriv = ({ key, chainCode }: Keys, index: number): Keys => {\n  const indexBuffer = new ArrayBuffer(4);\n  const cv = new DataView(indexBuffer);\n  cv.setUint32(0, index);\n\n  const data = new Uint8Array(1 + key.length + indexBuffer.byteLength);\n  data.set(new Uint8Array(1).fill(0));\n  data.set(key, 1);\n  data.set(\n    new Uint8Array(indexBuffer, 0, indexBuffer.byteLength),\n    key.length + 1,\n  );\n\n  const I = hmac.create(sha512, chainCode).update(data).digest();\n  const IL = I.slice(0, 32);\n  const IR = I.slice(32);\n  return {\n    key: IL,\n    chainCode: IR,\n  };\n};\n\nexport const getPublicKey = (\n  privateKey: Uint8Array,\n  withZeroByte = true,\n): Uint8Array => {\n  const keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n  const signPk = keyPair.secretKey.subarray(32);\n  const newArr = new Uint8Array(signPk.length + 1);\n  newArr.set([0]);\n  newArr.set(signPk, 1);\n  return withZeroByte ? newArr : signPk;\n};\n\nexport const isValidPath = (path: string): boolean => {\n  if (!pathRegex.test(path)) {\n    return false;\n  }\n  return !path\n    .split('/')\n    .slice(1)\n    .map(replaceDerive)\n    .some(isNaN as any /* ts T_T*/);\n};\n\nexport const derivePath = (\n  path: Path,\n  seed: Hex,\n  offset = HARDENED_OFFSET,\n): Keys => {\n  if (!isValidPath(path)) {\n    throw new Error('Invalid derivation path');\n  }\n\n  const { key, chainCode } = getMasterKeyFromSeed(seed);\n  const segments = path\n    .split('/')\n    .slice(1)\n    .map(replaceDerive)\n    .map((el) => parseInt(el, 10));\n\n  return segments.reduce(\n    (parentKeys, segment) => CKDPriv(parentKeys, segment + offset),\n    { key, chainCode },\n  );\n};\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SerializedSignature } from '../cryptography/signature';\nimport { HttpHeaders } from '../rpc/client';\nimport { UnserializedSignableTransaction } from '../signers/txn-data-serializers/txn-data-serializer';\nimport {\n  GetObjectDataResponse,\n  SuiObjectInfo,\n  GatewayTxSeqNumber,\n  GetTxnDigestsResponse,\n  SuiObjectRef,\n  SuiMoveFunctionArgTypes,\n  SuiMoveNormalizedFunction,\n  SuiMoveNormalizedStruct,\n  SuiMoveNormalizedModule,\n  SuiMoveNormalizedModules,\n  SuiEventFilter,\n  SuiEventEnvelope,\n  SubscriptionId,\n  ExecuteTransactionRequestType,\n  SuiExecuteTransactionResponse,\n  TransactionDigest,\n  ObjectId,\n  SuiAddress,\n  EventQuery,\n  EventId,\n  PaginatedTransactionDigests,\n  TransactionQuery,\n  PaginatedEvents,\n  RpcApiVersion,\n  FaucetResponse,\n  Order,\n  TransactionEffects,\n  CoinMetadata,\n  DevInspectResults,\n  SuiSystemState,\n  DelegatedStake,\n  ValidatorMetaData,\n  PaginatedCoins,\n  CoinBalance,\n  CoinSupply,\n  CheckpointSummary,\n  CheckpointContents,\n  CheckpointDigest,\n  CheckPointContentsDigest,\n  CommitteeInfo,\n} from '../types';\n\nimport { DynamicFieldName, DynamicFieldPage } from '../types/dynamic_fields';\n\n///////////////////////////////\n// Exported Abstracts\nexport abstract class Provider {\n  // API Version\n  /**\n   * Fetch and cache the RPC API version number\n   *\n   * @return the current version of the RPC API that the provider is\n   * connected to, or undefined if any error occurred\n   */\n  abstract getRpcApiVersion(): Promise<RpcApiVersion | undefined>;\n\n  // Faucet\n  /**\n   * Request gas tokens from a faucet server\n   * @param recipient the address for receiving the tokens\n   * @param httpHeaders optional request headers\n   */\n  abstract requestSuiFromFaucet(\n    recipient: SuiAddress,\n    httpHeaders?: HttpHeaders,\n  ): Promise<FaucetResponse>;\n\n  // RPC Endpoint\n  /**\n   * Invoke any RPC endpoint\n   * @param endpoint the endpoint to be invoked\n   * @param params the arguments to be passed to the RPC request\n   */\n  abstract call(endpoint: string, params: Array<any>): Promise<any>;\n\n  // Coins\n  /**\n   * Get all Coin<`coin_type`> objects owned by an address.\n   * @param coinType optional fully qualified type names for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified.\n   * @param cursor optional paging cursor\n   * @param limit maximum number of items per page\n   */\n  abstract getCoins(\n    owner: SuiAddress,\n    coinType: string | null,\n    cursor: ObjectId | null,\n    limit: number | null,\n  ): Promise<PaginatedCoins>;\n\n  /**\n   * Get all Coin objects owned by an address.\n   * @param cursor optional paging cursor\n   * @param limt maximum number of items per page\n   */\n  abstract getAllCoins(\n    owner: SuiAddress,\n    cursor: ObjectId | null,\n    limit: number | null,\n  ): Promise<PaginatedCoins>;\n\n  /**\n   * Get the total coin balance for one coin type, owned by the address owner.\n   * @param coinType optional fully qualified type names for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified.\n   */\n  abstract getBalance(\n    owner: SuiAddress,\n    coinType: string | null,\n  ): Promise<CoinBalance>;\n\n  /**\n   * Get the total coin balance for all coin type, owned by the address owner.\n   */\n  abstract getAllBalances(owner: SuiAddress): Promise<CoinBalance[]>;\n\n  /**\n   * Fetch CoinMetadata for a given coin type\n   * @param coinType fully qualified type names for the coin (e.g.,\n   * 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC)\n   *\n   */\n  abstract getCoinMetadata(coinType: string): Promise<CoinMetadata>;\n\n  /**\n   *  Fetch total supply for a coin\n   * @param coinType fully qualified type names for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified.\n   */\n  abstract getTotalSupply(coinType: string): Promise<CoinSupply>;\n\n  // Objects\n  /**\n   * Get all objects owned by an address\n   */\n  abstract getObjectsOwnedByAddress(\n    addressOrObjectId: string,\n  ): Promise<SuiObjectInfo[]>;\n\n  /**\n   * Convenience method for getting all gas objects(SUI Tokens) owned by an address\n   */\n  abstract getGasObjectsOwnedByAddress(\n    _address: string,\n  ): Promise<SuiObjectInfo[]>;\n\n  /**\n   * @deprecated The method should not be used\n   */\n  abstract getCoinBalancesOwnedByAddress(\n    address: string,\n    typeArg?: string,\n  ): Promise<GetObjectDataResponse[]>;\n\n  /**\n   * Convenience method for select coin objects that has a balance greater than or equal to `amount`\n   *\n   * @param amount coin balance\n   * @param typeArg coin type, e.g., '0x2::sui::SUI'\n   * @param exclude object ids of the coins to exclude\n   * @return a list of coin objects that has balance greater than `amount` in an ascending order\n   */\n  abstract selectCoinsWithBalanceGreaterThanOrEqual(\n    address: string,\n    amount: bigint,\n    typeArg: string,\n    exclude: ObjectId[],\n  ): Promise<GetObjectDataResponse[]>;\n\n  /**\n   * Convenience method for select a minimal set of coin objects that has a balance greater than\n   * or equal to `amount`. The output can be used for `PayTransaction`\n   *\n   * @param amount coin balance\n   * @param typeArg coin type, e.g., '0x2::sui::SUI'\n   * @param exclude object ids of the coins to exclude\n   * @return a minimal list of coin objects that has a combined balance greater than or equal\n   * to`amount` in an ascending order. If no such set exists, an empty list is returned\n   */\n  abstract selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\n    address: string,\n    amount: bigint,\n    typeArg: string,\n    exclude: ObjectId[],\n  ): Promise<GetObjectDataResponse[]>;\n\n  /**\n   * Get details about an object\n   */\n  abstract getObject(objectId: string): Promise<GetObjectDataResponse>;\n\n  /**\n   * Get object reference(id, tx digest, version id)\n   * @param objectId\n   */\n  abstract getObjectRef(objectId: string): Promise<SuiObjectRef | undefined>;\n\n  // Transactions\n  /**\n   * Get transaction digests for a given range\n   *\n   * NOTE: this method may get deprecated after DevNet\n   */\n  abstract getTransactionDigestsInRange(\n    start: GatewayTxSeqNumber,\n    end: GatewayTxSeqNumber,\n  ): Promise<GetTxnDigestsResponse>;\n\n  /**\n   * Get transactions for a given query criteria\n   */\n  abstract getTransactions(\n    query: TransactionQuery,\n    cursor: TransactionDigest | null,\n    limit: number | null,\n    order: Order,\n  ): Promise<PaginatedTransactionDigests>;\n\n  /**\n   * Get total number of transactions\n   * NOTE: this method may get deprecated after DevNet\n   */\n  abstract getTotalTransactionNumber(): Promise<number>;\n\n  /**\n   * This is under development endpoint on Fullnode that will eventually\n   * replace the other `executeTransaction` that's only available on the\n   * Gateway\n   */\n  abstract executeTransaction(\n    txnBytes: Uint8Array | string,\n    signature: SerializedSignature,\n    requestType: ExecuteTransactionRequestType,\n  ): Promise<SuiExecuteTransactionResponse>;\n\n  // Move info\n  /**\n   * Get Move function argument types like read, write and full access\n   */\n  abstract getMoveFunctionArgTypes(\n    objectId: string,\n    moduleName: string,\n    functionName: string,\n  ): Promise<SuiMoveFunctionArgTypes>;\n\n  /**\n   * Get a map from module name to\n   * structured representations of Move modules\n   */\n  abstract getNormalizedMoveModulesByPackage(\n    objectId: string,\n  ): Promise<SuiMoveNormalizedModules>;\n\n  /**\n   * Get a structured representation of Move module\n   */\n  abstract getNormalizedMoveModule(\n    objectId: string,\n    moduleName: string,\n  ): Promise<SuiMoveNormalizedModule>;\n\n  /**\n   * Get a structured representation of Move function\n   */\n  abstract getNormalizedMoveFunction(\n    objectId: string,\n    moduleName: string,\n    functionName: string,\n  ): Promise<SuiMoveNormalizedFunction>;\n\n  /**\n   * Get a structured representation of Move struct\n   */\n  abstract getNormalizedMoveStruct(\n    objectId: string,\n    moduleName: string,\n    structName: string,\n  ): Promise<SuiMoveNormalizedStruct>;\n\n  /**\n   * Get events for a given query criteria\n   * @param query - the event query criteria.\n   * @param cursor - optional paging cursor\n   * @param limit - maximum number of items per page\n   * @param order - event query ordering\n   */\n  abstract getEvents(\n    query: EventQuery,\n    cursor: EventId | null,\n    limit: number | null,\n    order: Order,\n  ): Promise<PaginatedEvents>;\n\n  /**\n   * Subscribe to get notifications whenever an event matching the filter occurs\n   * @param filter - filter describing the subset of events to follow\n   * @param onMessage - function to run when we receive a notification of a new event matching the filter\n   */\n  abstract subscribeEvent(\n    filter: SuiEventFilter,\n    onMessage: (event: SuiEventEnvelope) => void,\n  ): Promise<SubscriptionId>;\n\n  /**\n   * Unsubscribe from an event subscription\n   * @param id - subscription id to unsubscribe from (previously received from subscribeEvent)\n   */\n  abstract unsubscribeEvent(id: SubscriptionId): Promise<boolean>;\n\n  /**\n   * Runs the transaction in dev-inpsect mode. Which allows for nearly any\n   * transaction (or Move call) with any arguments. Detailed results are\n   * provided, including both the transaction effects and any return values.\n   *\n   * @param sender the sender of the transaction\n   * @param txn transaction without gasPayment, gasBudget, and gasPrice specified.\n   * @param gas_price optional. Default to use the network reference gas price stored\n   * in the Sui System State object\n   * @param epoch optional. Default to use the current epoch number stored\n   * in the Sui System State object\n   */\n  abstract devInspectTransaction(\n    sender: SuiAddress,\n    txn: UnserializedSignableTransaction | string | Uint8Array,\n    gasPrice: number | null,\n    epoch: number | null,\n  ): Promise<DevInspectResults>;\n\n  /**\n   * Execute the transaction without committing any state changes on chain. This is useful for estimating\n   * gas budget and the transaction effects\n   * @param txBytes\n   */\n  abstract dryRunTransaction(txBytes: Uint8Array): Promise<TransactionEffects>;\n\n  /**\n   * Return the list of dynamic field objects owned by an object\n   * @param parent_object_id - The id of the parent object\n   * @param cursor - Optional paging cursor\n   * @param limit - Maximum item returned per page\n   */\n  abstract getDynamicFields(\n    parent_object_id: ObjectId,\n    cursor: ObjectId | null,\n    limit: number | null,\n  ): Promise<DynamicFieldPage>;\n\n  /**\n   * Return the dynamic field object information for a specified object\n   * @param parent_object_id - The ID of the quered parent object\n   * @param name - The name of the dynamic field\n   */\n  abstract getDynamicFieldObject(\n    parent_object_id: ObjectId,\n    name: string | DynamicFieldName,\n  ): Promise<GetObjectDataResponse>;\n\n  /**\n   * Getting the reference gas price for the network\n   */\n  abstract getReferenceGasPrice(): Promise<number>;\n\n  /**\n   * Return the delegated stakes for an address\n   */\n  abstract getDelegatedStakes(address: SuiAddress): Promise<DelegatedStake[]>;\n\n  /**\n   * Return all validators available for stake delegation.\n   */\n  abstract getValidators(): Promise<ValidatorMetaData[]>;\n\n  /**\n   * Return the content of `0x5` object\n   */\n  abstract getSuiSystemState(): Promise<SuiSystemState>;\n\n  /**\n   * Get the sequence number of the latest checkpoint that has been executed\n   */\n  abstract getLatestCheckpointSequenceNumber(): Promise<number>;\n\n  /**\n   * Returns checkpoint summary based on a checkpoint sequence number\n   * @param sequence_number - The sequence number of the desired checkpoint summary\n   */\n  abstract getCheckpointSummary(\n    sequenceNumber: number,\n  ): Promise<CheckpointSummary>;\n\n  /**\n   * Returns checkpoint summary based on a checkpoint digest\n   * @param digest - The checkpoint digest\n   */\n  abstract getCheckpointSummaryByDigest(\n    digest: CheckpointDigest,\n  ): Promise<CheckpointSummary>;\n\n  /**\n   * Return contents of a checkpoint, namely a list of execution digests\n   * @param sequence_number - The sequence number of the desired checkpoint contents\n   */\n  abstract getCheckpointContents(\n    sequenceNumber: number,\n  ): Promise<CheckpointContents>;\n\n  /**\n   * Returns checkpoint summary based on a checkpoint content digest\n   * @param digest - The checkpoint summary digest\n   */\n  abstract getCheckpointContentsByDigest(\n    digest: CheckPointContentsDigest,\n  ): Promise<CheckpointContents>;\n\n  /**\n   * Return the committee information for the asked epoch\n   * @param epoch The epoch of interest. If null, default to the latest epoch\n   * @return {CommitteeInfo} the committee information\n   */\n  abstract getCommitteeInfo(epoch?: number): Promise<CommitteeInfo>;\n\n  // TODO: add more interface methods\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport RpcClient from 'jayson/lib/client/browser/index.js';\nimport fetch from 'cross-fetch';\nimport {\n  any,\n  Infer,\n  is,\n  literal,\n  object,\n  optional,\n  string,\n  Struct,\n  validate,\n} from 'superstruct';\nimport { pkgVersion } from '../pkg-version';\nimport { TARGETED_RPC_VERSION } from '../providers/json-rpc-provider';\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = { [header: string]: string };\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  method: string;\n  args: Array<any>;\n};\n\nconst TYPE_MISMATCH_ERROR =\n  `The response returned from RPC server does not match ` +\n  `the TypeScript definition. This is likely because the SDK version is not ` +\n  `compatible with the RPC server. Please update your SDK version to the latest. `;\n\nexport const ValidResponse = object({\n  jsonrpc: literal('2.0'),\n  id: string(),\n  result: any(),\n});\n\nexport const ErrorResponse = object({\n  jsonrpc: literal('2.0'),\n  id: string(),\n  error: object({\n    code: any(),\n    message: string(),\n    data: optional(any()),\n  }),\n});\n\nexport class JsonRpcClient {\n  private rpcClient: RpcClient;\n\n  constructor(url: string, httpHeaders?: HttpHeaders) {\n    this.rpcClient = new RpcClient(\n      async (\n        request: any,\n        callback: (arg0: Error | null, arg1?: string | undefined) => void,\n      ) => {\n        const options = {\n          method: 'POST',\n          body: request,\n          headers: {\n            'Content-Type': 'application/json',\n            'Client-Sdk-Type': 'typescript',\n            'Client-Sdk-Version': pkgVersion,\n            'Client-Target-Api-Version': TARGETED_RPC_VERSION,\n            ...httpHeaders,\n          },\n        };\n\n        try {\n          let res: Response = await fetch(url, options);\n          const result = await res.text();\n          if (res.ok) {\n            callback(null, result);\n          } else {\n            const isHtml = res.headers.get('content-type') === 'text/html';\n            callback(\n              new Error(\n                `${res.status} ${res.statusText}${isHtml ? '' : `: ${result}`}`,\n              ),\n            );\n          }\n        } catch (err) {\n          if (err instanceof Error) callback(err);\n        }\n      },\n      {},\n    );\n  }\n\n  async requestWithType<T>(\n    method: string,\n    args: Array<any>,\n    struct: Struct<T>,\n    skipDataValidation: boolean = false,\n  ): Promise<T> {\n    const response = await this.request(method, args);\n    if (is(response, ErrorResponse)) {\n      throw new Error(`RPC Error: ${response.error.message}`);\n    } else if (is(response, ValidResponse)) {\n      const err = validate(response.result, struct)[0];\n      const errMsg =\n        TYPE_MISMATCH_ERROR +\n        `Result received was: ${JSON.stringify(\n          response.result,\n        )}. Debug info: ${err}`;\n\n      if (skipDataValidation && err) {\n        console.warn(errMsg);\n        return response.result;\n      } else if (err) {\n        throw new Error(`RPC Error: ${errMsg}`);\n      }\n      return response.result;\n    }\n    throw new Error(`Unexpected RPC Response: ${response}`);\n  }\n\n  async request(method: string, args: Array<any>): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.rpcClient.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  }\n\n  // TODO: Improve validation errors:\n  async batchRequestWithType<T>(\n    requests: RpcParams[],\n    struct: Struct<T>,\n    skipDataValidation: boolean = false,\n  ): Promise<T[]> {\n    const responses = await this.batchRequest(requests);\n    // TODO: supports other error modes such as throw or return\n    const validResponses = responses.filter(\n      (response: any) =>\n        is(response, ValidResponse) &&\n        (skipDataValidation || is(response.result, struct)),\n    );\n\n    if (responses.length > validResponses.length) {\n      console.warn(\n        `Batch request contains invalid responses. ${\n          responses.length - validResponses.length\n        } of the ${responses.length} requests has invalid schema.`,\n      );\n      const exampleTypeMismatch = responses.find(\n        (r: any) => !is(r.result, struct),\n      );\n      const exampleInvalidResponseIndex = responses.findIndex(\n        (r: any) => !is(r, ValidResponse),\n      );\n      if (exampleTypeMismatch) {\n        console.warn(\n          TYPE_MISMATCH_ERROR +\n            `One example mismatch is: ${JSON.stringify(\n              exampleTypeMismatch.result,\n            )}`,\n        );\n      }\n      if (exampleInvalidResponseIndex !== -1) {\n        console.warn(\n          `The request ${JSON.stringify(\n            requests[exampleInvalidResponseIndex],\n          )} within a batch request returns an invalid response ${JSON.stringify(\n            responses[exampleInvalidResponseIndex],\n          )}`,\n        );\n      }\n    }\n\n    return validResponses.map(\n      (response: Infer<typeof ValidResponse>) => response.result,\n    );\n  }\n\n  async batchRequest(requests: RpcParams[]): Promise<any> {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params) => {\n        return this.rpcClient.request(params.method, params.args);\n      });\n\n      this.rpcClient.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport const pkgVersion = '0.29.1';\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  Infer,\n  literal,\n  number,\n  object,\n  string,\n  union,\n  unknown,\n} from 'superstruct';\nimport { CallArg, TransactionData } from './sui-bcs';\nimport { sha256Hash } from '../cryptography/hash';\nimport { BCS, fromB58, toB58 } from '@mysten/bcs';\n\nexport const TransactionDigest = string();\nexport type TransactionDigest = Infer<typeof TransactionDigest>;\n\nexport const TransactionEffectsDigest = string();\nexport type TransactionEffectsDigest = Infer<typeof TransactionEffectsDigest>;\n\nexport const ObjectId = string();\nexport type ObjectId = Infer<typeof ObjectId>;\n\nexport const SuiAddress = string();\nexport type SuiAddress = Infer<typeof SuiAddress>;\n\nexport const SequenceNumber = number();\nexport type SequenceNumber = Infer<typeof SequenceNumber>;\n\nexport const ObjectOwner = union([\n  object({\n    AddressOwner: SuiAddress,\n  }),\n  object({\n    ObjectOwner: SuiAddress,\n  }),\n  object({\n    Shared: object({\n      initial_shared_version: number(),\n    }),\n  }),\n  literal('Immutable'),\n]);\nexport type ObjectOwner = Infer<typeof ObjectOwner>;\n\n// TODO: Figure out if we actually should have validaton on this:\nexport const SuiJsonValue = unknown();\nexport type SuiJsonValue =\n  | boolean\n  | number\n  | string\n  | CallArg\n  | Array<SuiJsonValue>;\n\n// source of truth is\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L171\nconst TX_DIGEST_LENGTH = 32;\n\n/** Returns whether the tx digest is valid based on the serialization format */\nexport function isValidTransactionDigest(\n  value: string,\n): value is TransactionDigest {\n  try {\n    const buffer = fromB58(value);\n    return buffer.length === TX_DIGEST_LENGTH;\n  } catch (e) {\n    return false;\n  }\n}\n\n// TODO - can we automatically sync this with rust length definition?\n// Source of truth is\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L67\n// which uses the Move account address length\n// https://github.com/move-language/move/blob/67ec40dc50c66c34fd73512fcc412f3b68d67235/language/move-core/types/src/account_address.rs#L23 .\n\nexport const SUI_ADDRESS_LENGTH = 20;\nexport function isValidSuiAddress(value: string): value is SuiAddress {\n  return isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\n}\n\nexport function isValidSuiObjectId(value: string): boolean {\n  return isValidSuiAddress(value);\n}\n\n/**\n * Perform the following operations:\n * 1. Make the address lower case\n * 2. Prepend `0x` if the string does not start with `0x`.\n * 3. Add more zeros if the length of the address(excluding `0x`) is less than `SUI_ADDRESS_LENGTH`\n *\n * WARNING: if the address value itself starts with `0x`, e.g., `0x0x`, the default behavior\n * is to treat the first `0x` not as part of the address. The default behavior can be overridden by\n * setting `forceAdd0x` to true\n *\n */\nexport function normalizeSuiAddress(\n  value: string,\n  forceAdd0x: boolean = false,\n): SuiAddress {\n  let address = value.toLowerCase();\n  if (!forceAdd0x && address.startsWith('0x')) {\n    address = address.slice(2);\n  }\n  return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, '0')}`;\n}\n\nexport function normalizeSuiObjectId(\n  value: string,\n  forceAdd0x: boolean = false,\n): ObjectId {\n  return normalizeSuiAddress(value, forceAdd0x);\n}\n\n/**\n * Generate transaction digest.\n *\n * @param data transaction data\n * @param signatureScheme signature scheme\n * @param signature signature as a base64 string\n * @param publicKey public key\n */\nexport function generateTransactionDigest(\n  data: TransactionData,\n  bcs: BCS,\n): string {\n  const txBytes = bcs.ser('TransactionData', data).toBytes();\n  const hash = sha256Hash('TransactionData', txBytes);\n\n  return toB58(hash);\n}\n\nfunction isHex(value: string): boolean {\n  return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\n\nfunction getHexByteLength(value: string): number {\n  return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromHEX } from '@mysten/bcs';\nimport sha3 from 'js-sha3';\n\n/**\n * Generates a SHA 256 hash of typed data as a base64 string.\n *\n * @param typeTag type tag (e.g. TransactionData, SenderSignedData)\n * @param data data to hash\n */\nexport function sha256Hash(typeTag: string, data: Uint8Array): Uint8Array {\n  const hash = sha3.sha3_256.create();\n\n  const typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));\n\n  const dataWithTag = new Uint8Array(typeTagBytes.length + data.length);\n  dataWithTag.set(typeTagBytes);\n  dataWithTag.set(data, typeTagBytes.length);\n\n  hash.update(dataWithTag);\n\n  return fromHEX(hash.hex());\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  any,\n  array,\n  assign,\n  boolean,\n  Infer,\n  literal,\n  number,\n  object,\n  optional,\n  record,\n  string,\n  union,\n} from 'superstruct';\nimport { ObjectId, ObjectOwner, TransactionDigest } from './common';\n\nexport const ObjectType = union([literal('moveObject'), literal('package')]);\nexport type ObjectType = Infer<typeof ObjectType>;\n\nexport const SuiObjectRef = object({\n  /** Base64 string representing the object digest */\n  digest: TransactionDigest,\n  /** Hex code as string representing the object id */\n  objectId: string(),\n  /** Object version */\n  version: number(),\n});\nexport type SuiObjectRef = Infer<typeof SuiObjectRef>;\n\nexport const SuiGasData = object({\n  payment: SuiObjectRef,\n  /** Gas Object's owner */\n  owner: string(),\n  price: number(),\n  budget: number(),\n});\nexport type SuiGasData = Infer<typeof SuiGasData>;\n\nexport const SuiObjectInfo = assign(\n  SuiObjectRef,\n  object({\n    type: string(),\n    owner: ObjectOwner,\n    previousTransaction: TransactionDigest,\n  }),\n);\nexport type SuiObjectInfo = Infer<typeof SuiObjectInfo>;\n\nexport const ObjectContentFields = record(string(), any());\nexport type ObjectContentFields = Infer<typeof ObjectContentFields>;\n\nexport const MovePackageContent = record(string(), string());\nexport type MovePackageContent = Infer<typeof MovePackageContent>;\n\nexport const SuiMoveObject = object({\n  /** Move type (e.g., \"0x2::coin::Coin<0x2::sui::SUI>\") */\n  type: string(),\n  /** Fields and values stored inside the Move object */\n  fields: ObjectContentFields,\n  has_public_transfer: optional(boolean()),\n});\nexport type SuiMoveObject = Infer<typeof SuiMoveObject>;\n\nexport const SuiMovePackage = object({\n  /** A mapping from module name to disassembled Move bytecode */\n  disassembled: MovePackageContent,\n});\nexport type SuiMovePackage = Infer<typeof SuiMovePackage>;\n\nexport const SuiData = union([\n  assign(SuiMoveObject, object({ dataType: literal('moveObject') })),\n  assign(SuiMovePackage, object({ dataType: literal('package') })),\n]);\nexport type SuiData = Infer<typeof SuiData>;\n\nexport const MIST_PER_SUI = BigInt(1000000000);\n\nexport const SuiObject = object({\n  /** The meat of the object */\n  data: SuiData,\n  /** The owner of the object */\n  owner: ObjectOwner,\n  /** The digest of the transaction that created or last mutated this object */\n  previousTransaction: TransactionDigest,\n  /**\n   * The amount of SUI we would rebate if this object gets deleted.\n   * This number is re-calculated each time the object is mutated based on\n   * the present storage gas price.\n   */\n  storageRebate: number(),\n  reference: SuiObjectRef,\n});\nexport type SuiObject = Infer<typeof SuiObject>;\n\nexport const ObjectStatus = union([\n  literal('Exists'),\n  literal('NotExists'),\n  literal('Deleted'),\n]);\nexport type ObjectStatus = Infer<typeof ObjectStatus>;\n\nexport const GetOwnedObjectsResponse = array(SuiObjectInfo);\nexport type GetOwnedObjectsResponse = Infer<typeof GetOwnedObjectsResponse>;\n\nexport const GetObjectDataResponse = object({\n  status: ObjectStatus,\n  details: union([SuiObject, ObjectId, SuiObjectRef]),\n});\nexport type GetObjectDataResponse = Infer<typeof GetObjectDataResponse>;\n\nexport type ObjectDigest = string;\nexport type Order = 'ascending' | 'descending';\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper functions                              */\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------- GetObjectDataResponse ------------------------- */\n\nexport function getObjectExistsResponse(\n  resp: GetObjectDataResponse,\n): SuiObject | undefined {\n  return resp.status !== 'Exists' ? undefined : (resp.details as SuiObject);\n}\n\nexport function getObjectDeletedResponse(\n  resp: GetObjectDataResponse,\n): SuiObjectRef | undefined {\n  return resp.status !== 'Deleted' ? undefined : (resp.details as SuiObjectRef);\n}\n\nexport function getObjectNotExistsResponse(\n  resp: GetObjectDataResponse,\n): ObjectId | undefined {\n  return resp.status !== 'NotExists' ? undefined : (resp.details as ObjectId);\n}\n\nexport function getObjectReference(\n  resp: GetObjectDataResponse,\n): SuiObjectRef | undefined {\n  return (\n    getObjectExistsResponse(resp)?.reference || getObjectDeletedResponse(resp)\n  );\n}\n\n/* ------------------------------ SuiObjectRef ------------------------------ */\n\nexport function getObjectId(\n  data: GetObjectDataResponse | SuiObjectRef,\n): ObjectId {\n  if ('objectId' in data) {\n    return data.objectId;\n  }\n  return (\n    getObjectReference(data)?.objectId ?? getObjectNotExistsResponse(data)!\n  );\n}\n\nexport function getObjectVersion(\n  data: GetObjectDataResponse | SuiObjectRef,\n): number | undefined {\n  if ('version' in data) {\n    return data.version;\n  }\n  return getObjectReference(data)?.version;\n}\n\n/* -------------------------------- SuiObject ------------------------------- */\n\nexport function getObjectType(\n  resp: GetObjectDataResponse,\n): ObjectType | undefined {\n  return getObjectExistsResponse(resp)?.data.dataType;\n}\n\nexport function getObjectPreviousTransactionDigest(\n  resp: GetObjectDataResponse,\n): TransactionDigest | undefined {\n  return getObjectExistsResponse(resp)?.previousTransaction;\n}\n\nexport function getObjectOwner(\n  resp: GetObjectDataResponse,\n): ObjectOwner | undefined {\n  return getObjectExistsResponse(resp)?.owner;\n}\n\nexport function getSharedObjectInitialVersion(\n  resp: GetObjectDataResponse,\n): number | undefined {\n  const owner = getObjectOwner(resp);\n  if (typeof owner === 'object' && 'Shared' in owner) {\n    return owner.Shared.initial_shared_version;\n  } else {\n    return undefined;\n  }\n}\n\nexport function isSharedObject(resp: GetObjectDataResponse): boolean {\n  const owner = getObjectOwner(resp);\n  return typeof owner === 'object' && 'Shared' in owner;\n}\n\nexport function isImmutableObject(resp: GetObjectDataResponse): boolean {\n  const owner = getObjectOwner(resp);\n  return owner === 'Immutable';\n}\n\nexport function getMoveObjectType(\n  resp: GetObjectDataResponse,\n): string | undefined {\n  return getMoveObject(resp)?.type;\n}\n\nexport function getObjectFields(\n  resp: GetObjectDataResponse | SuiMoveObject,\n): ObjectContentFields | undefined {\n  if ('fields' in resp) {\n    return resp.fields;\n  }\n  return getMoveObject(resp)?.fields;\n}\n\nexport function getMoveObject(\n  data: GetObjectDataResponse | SuiObject,\n): SuiMoveObject | undefined {\n  const suiObject = 'data' in data ? data : getObjectExistsResponse(data);\n  if (suiObject?.data.dataType !== 'moveObject') {\n    return undefined;\n  }\n  return suiObject.data as SuiMoveObject;\n}\n\nexport function hasPublicTransfer(\n  data: GetObjectDataResponse | SuiObject,\n): boolean {\n  return getMoveObject(data)?.has_public_transfer ?? false;\n}\n\nexport function getMovePackageContent(\n  data: GetObjectDataResponse | SuiMovePackage,\n): MovePackageContent | undefined {\n  if ('disassembled' in data) {\n    return data.disassembled;\n  }\n  const suiObject = getObjectExistsResponse(data);\n  if (suiObject?.data.dataType !== 'package') {\n    return undefined;\n  }\n  return (suiObject.data as SuiMovePackage).disassembled;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  object,\n  number,\n  string,\n  bigint,\n  union,\n  literal,\n  Infer,\n  array,\n  record,\n  any,\n  optional,\n} from 'superstruct';\nimport {\n  ObjectId,\n  ObjectOwner,\n  SuiAddress,\n  TransactionDigest,\n  SuiJsonValue,\n  SequenceNumber,\n} from './common';\n\nexport const BalanceChangeType = union([\n  literal('Gas'),\n  literal('Pay'),\n  literal('Receive'),\n]);\n\nexport type BalanceChangeType = Infer<typeof BalanceChangeType>;\n\n// event types mirror those in \"sui-json-rpc-types/lib.rs\"\nexport const MoveEvent = object({\n  packageId: ObjectId,\n  transactionModule: string(),\n  sender: SuiAddress,\n  type: string(),\n  fields: record(string(), any()),\n  bcs: string(),\n});\n\nexport type MoveEvent = Infer<typeof MoveEvent>;\n\nexport const PublishEvent = object({\n  sender: SuiAddress,\n  packageId: ObjectId,\n  version: optional(number()),\n  digest: optional(string()),\n});\n\nexport type PublishEvent = Infer<typeof PublishEvent>;\n\nexport const CoinBalanceChangeEvent = object({\n  packageId: ObjectId,\n  transactionModule: string(),\n  sender: SuiAddress,\n  owner: ObjectOwner,\n  changeType: BalanceChangeType,\n  coinType: string(),\n  coinObjectId: ObjectId,\n  version: SequenceNumber,\n  amount: number(),\n});\n\nexport type CoinBalanceChangeEvent = Infer<typeof CoinBalanceChangeEvent>;\n\nexport const TransferObjectEvent = object({\n  packageId: ObjectId,\n  transactionModule: string(),\n  sender: SuiAddress,\n  recipient: ObjectOwner,\n  objectType: string(),\n  objectId: ObjectId,\n  version: SequenceNumber,\n});\n\nexport type TransferObjectEvent = Infer<typeof TransferObjectEvent>;\n\nexport const MutateObjectEvent = object({\n  packageId: ObjectId,\n  transactionModule: string(),\n  sender: SuiAddress,\n  objectType: string(),\n  objectId: ObjectId,\n  version: SequenceNumber,\n});\n\nexport type MutateObjectEvent = Infer<typeof MutateObjectEvent>;\n\nexport const DeleteObjectEvent = object({\n  packageId: ObjectId,\n  transactionModule: string(),\n  sender: SuiAddress,\n  objectId: ObjectId,\n  version: SequenceNumber,\n});\n\nexport type DeleteObjectEvent = Infer<typeof DeleteObjectEvent>;\n\nexport const NewObjectEvent = object({\n  packageId: ObjectId,\n  transactionModule: string(),\n  sender: SuiAddress,\n  recipient: ObjectOwner,\n  objectType: string(),\n  objectId: ObjectId,\n  version: SequenceNumber,\n});\n\nexport type NewObjectEvent = Infer<typeof NewObjectEvent>;\n\n// TODO: Figure out if these actually can be bigint:\nexport const EpochChangeEvent = union([bigint(), number()]);\nexport type EpochChangeEvent = Infer<typeof EpochChangeEvent>;\n\nexport const CheckpointEvent = union([bigint(), number()]);\nexport type CheckpointEvent = Infer<typeof EpochChangeEvent>;\n\nexport const SuiEvent = union([\n  object({ moveEvent: MoveEvent }),\n  object({ publish: PublishEvent }),\n  object({ coinBalanceChange: CoinBalanceChangeEvent }),\n  object({ transferObject: TransferObjectEvent }),\n  object({ mutateObject: MutateObjectEvent }),\n  object({ deleteObject: DeleteObjectEvent }),\n  object({ newObject: NewObjectEvent }),\n  object({ epochChange: EpochChangeEvent }),\n  object({ checkpoint: CheckpointEvent }),\n]);\nexport type SuiEvent = Infer<typeof SuiEvent>;\n\nexport type MoveEventField = {\n  path: string;\n  value: SuiJsonValue;\n};\n\nexport type EventQuery =\n  | 'All'\n  | { Transaction: TransactionDigest }\n  | { MoveModule: { package: ObjectId; module: string } }\n  | { MoveEvent: string }\n  | { EventType: EventType }\n  | { Sender: SuiAddress }\n  | { Recipient: ObjectOwner }\n  | { Object: ObjectId }\n  | { TimeRange: { start_time: number; end_time: number } };\n\nexport const EventId = object({\n  txDigest: TransactionDigest,\n  eventSeq: number(),\n});\n\nexport type EventId = Infer<typeof EventId>;\n\nexport type EventType =\n  | 'MoveEvent'\n  | 'Publish'\n  | 'TransferObject'\n  | 'MutateObject'\n  | 'CoinBalanceChange'\n  | 'DeleteObject'\n  | 'NewObject'\n  | 'EpochChange'\n  | 'Checkpoint';\n\n// mirrors sui_json_rpc_types::SuiEventFilter\nexport type SuiEventFilter =\n  | { Package: ObjectId }\n  | { Module: string }\n  | { MoveEventType: string }\n  | { MoveEventField: MoveEventField }\n  | { SenderAddress: SuiAddress }\n  | { EventType: EventType }\n  | { All: SuiEventFilter[] }\n  | { Any: SuiEventFilter[] }\n  | { And: [SuiEventFilter, SuiEventFilter] }\n  | { Or: [SuiEventFilter, SuiEventFilter] };\n\nexport const SuiEventEnvelope = object({\n  timestamp: number(),\n  txDigest: TransactionDigest,\n  id: EventId, // tx_digest:event_seq\n  event: SuiEvent,\n});\n\nexport type SuiEventEnvelope = Infer<typeof SuiEventEnvelope>;\n\nexport type SuiEvents = SuiEventEnvelope[];\n\nexport const PaginatedEvents = object({\n  data: array(SuiEventEnvelope),\n  nextCursor: union([EventId, literal(null)]),\n});\nexport type PaginatedEvents = Infer<typeof PaginatedEvents>;\n\nexport const SubscriptionId = number();\n\nexport type SubscriptionId = Infer<typeof SubscriptionId>;\n\nexport const SubscriptionEvent = object({\n  subscription: SubscriptionId,\n  result: SuiEventEnvelope,\n});\n\nexport type SubscriptionEvent = Infer<typeof SubscriptionEvent>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  is,\n  array,\n  Infer,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  union,\n  unknown,\n  boolean,\n  tuple,\n} from 'superstruct';\nimport { SuiEvent } from './events';\nimport { SuiGasData, SuiMovePackage, SuiObject, SuiObjectRef } from './objects';\nimport {\n  ObjectId,\n  ObjectOwner,\n  SuiAddress,\n  SuiJsonValue,\n  TransactionDigest,\n} from './common';\n\n// TODO: support u64\nexport const EpochId = number();\n\nexport const TransferObject = object({\n  recipient: SuiAddress,\n  objectRef: SuiObjectRef,\n});\nexport type TransferObject = Infer<typeof TransferObject>;\n\nexport const SuiTransferSui = object({\n  recipient: SuiAddress,\n  amount: union([number(), literal(null)]),\n});\nexport type SuiTransferSui = Infer<typeof SuiTransferSui>;\n\nexport const SuiChangeEpoch = object({\n  epoch: EpochId,\n  storage_charge: number(),\n  computation_charge: number(),\n  // TODO: Make non-optional after v0.26.0 lands everywhere\n  storage_rebate: optional(number()),\n  epoch_start_timestamp_ms: optional(number()),\n});\nexport type SuiChangeEpoch = Infer<typeof SuiChangeEpoch>;\n\nexport const SuiConsensusCommitPrologue = object({\n  checkpoint_start_timestamp_ms: number(),\n});\nexport type SuiConsensusCommitPrologue = Infer<\n  typeof SuiConsensusCommitPrologue\n>;\n\nexport const Pay = object({\n  coins: array(SuiObjectRef),\n  recipients: array(SuiAddress),\n  amounts: array(number()),\n});\nexport type Pay = Infer<typeof Pay>;\n\nexport const PaySui = object({\n  coins: array(SuiObjectRef),\n  recipients: array(SuiAddress),\n  amounts: array(number()),\n});\nexport type PaySui = Infer<typeof PaySui>;\n\nexport const PayAllSui = object({\n  coins: array(SuiObjectRef),\n  recipient: SuiAddress,\n});\nexport type PayAllSui = Infer<typeof PayAllSui>;\n\nexport const MoveCall = object({\n  package: string(),\n  module: string(),\n  function: string(),\n  typeArguments: optional(array(string())),\n  arguments: optional(array(SuiJsonValue)),\n});\nexport type MoveCall = Infer<typeof MoveCall>;\n\nexport const Genesis = object({\n  objects: array(ObjectId),\n});\nexport type Genesis = Infer<typeof Genesis>;\n\nexport type ExecuteTransactionRequestType =\n  | 'WaitForEffectsCert'\n  | 'WaitForLocalExecution';\n\nexport type TransactionKindName =\n  | 'TransferObject'\n  | 'Publish'\n  | 'Call'\n  | 'TransferSui'\n  | 'ChangeEpoch'\n  | 'ConsensusCommitPrologue'\n  | 'Pay'\n  | 'PaySui'\n  | 'PayAllSui'\n  | 'Genesis';\n\nexport const SuiTransactionKind = union([\n  object({ TransferObject: TransferObject }),\n  object({ Publish: SuiMovePackage }),\n  object({ Call: MoveCall }),\n  object({ TransferSui: SuiTransferSui }),\n  object({ ChangeEpoch: SuiChangeEpoch }),\n  object({ ConsensusCommitPrologue: SuiConsensusCommitPrologue }),\n  object({ Pay: Pay }),\n  object({ PaySui: PaySui }),\n  object({ PayAllSui: PayAllSui }),\n  object({ Genesis: Genesis }),\n]);\nexport type SuiTransactionKind = Infer<typeof SuiTransactionKind>;\n\nexport const SuiTransactionData = object({\n  transactions: array(SuiTransactionKind),\n  sender: SuiAddress,\n  gasData: SuiGasData,\n});\nexport type SuiTransactionData = Infer<typeof SuiTransactionData>;\n\nexport const AuthoritySignature = string();\nexport const GenericAuthoritySignature = union([\n  AuthoritySignature,\n  array(AuthoritySignature),\n]);\n\nexport const AuthorityQuorumSignInfo = object({\n  epoch: EpochId,\n  signature: GenericAuthoritySignature,\n  signers_map: array(number()),\n});\nexport type AuthorityQuorumSignInfo = Infer<typeof AuthorityQuorumSignInfo>;\n\nexport const CertifiedTransaction = object({\n  transactionDigest: TransactionDigest,\n  data: SuiTransactionData,\n  txSignatures: array(string()),\n  authSignInfo: AuthorityQuorumSignInfo,\n});\nexport type CertifiedTransaction = Infer<typeof CertifiedTransaction>;\n\nexport const GasCostSummary = object({\n  computationCost: number(),\n  storageCost: number(),\n  storageRebate: number(),\n});\nexport type GasCostSummary = Infer<typeof GasCostSummary>;\n\nexport const ExecutionStatusType = union([\n  literal('success'),\n  literal('failure'),\n]);\nexport type ExecutionStatusType = Infer<typeof ExecutionStatusType>;\n\nexport const ExecutionStatus = object({\n  status: ExecutionStatusType,\n  error: optional(string()),\n});\nexport type ExecutionStatus = Infer<typeof ExecutionStatus>;\n\n// TODO: change the tuple to struct from the server end\nexport const OwnedObjectRef = object({\n  owner: ObjectOwner,\n  reference: SuiObjectRef,\n});\nexport type OwnedObjectRef = Infer<typeof OwnedObjectRef>;\n\nexport const TransactionEffects = object({\n  /** The status of the execution */\n  status: ExecutionStatus,\n  /**\n   * The epoch when this transaction was executed\n   * TODO: Changed it to non-optional once this is stable.\n   * */\n  executedEpoch: optional(EpochId),\n  gasUsed: GasCostSummary,\n  /** The object references of the shared objects used in this transaction. Empty if no shared objects were used. */\n  sharedObjects: optional(array(SuiObjectRef)),\n  /** The transaction digest */\n  transactionDigest: TransactionDigest,\n  /** ObjectRef and owner of new objects created */\n  created: optional(array(OwnedObjectRef)),\n  /** ObjectRef and owner of mutated objects, including gas object */\n  mutated: optional(array(OwnedObjectRef)),\n  /**\n   * ObjectRef and owner of objects that are unwrapped in this transaction.\n   * Unwrapped objects are objects that were wrapped into other objects in the past,\n   * and just got extracted out.\n   */\n  unwrapped: optional(array(OwnedObjectRef)),\n  /** Object Refs of objects now deleted (the old refs) */\n  deleted: optional(array(SuiObjectRef)),\n  /** Object Refs of objects now deleted (the old refs) */\n  unwrapped_then_deleted: optional(array(SuiObjectRef)),\n  /** Object refs of objects now wrapped in other objects */\n  wrapped: optional(array(SuiObjectRef)),\n  /**\n   * The updated gas object reference. Have a dedicated field for convenient access.\n   * It's also included in mutated.\n   */\n  gasObject: OwnedObjectRef,\n  /** The events emitted during execution. Note that only successful transactions emit events */\n  events: optional(array(SuiEvent)),\n  /** The set of transaction digests this transaction depends on */\n  dependencies: optional(array(TransactionDigest)),\n});\nexport type TransactionEffects = Infer<typeof TransactionEffects>;\n\nconst ReturnValueType = tuple([array(number()), string()]);\nconst MutableReferenceOutputType = tuple([number(), array(number()), string()]);\nconst ExecutionResultType = object({\n  mutableReferenceOutputs: optional(array(MutableReferenceOutputType)),\n  returnValues: optional(array(ReturnValueType)),\n});\nconst DevInspectResultTupleType = tuple([number(), ExecutionResultType]);\n\nconst DevInspectResultsType = union([\n  object({ Ok: array(DevInspectResultTupleType) }),\n  object({ Err: string() }),\n]);\n\nexport const DevInspectResults = object({\n  effects: TransactionEffects,\n  results: DevInspectResultsType,\n});\nexport type DevInspectResults = Infer<typeof DevInspectResults>;\n\n// TODO: this is likely to go away after https://github.com/MystenLabs/sui/issues/4207\nexport const SuiCertifiedTransactionEffects = object({\n  transactionEffectsDigest: string(),\n  authSignInfo: AuthorityQuorumSignInfo,\n  effects: TransactionEffects,\n});\n\nexport const SuiEffectsFinalityInfo = union([\n  object({ certified: AuthorityQuorumSignInfo }),\n  object({ checkpointed: tuple([number(), number()]) }),\n]);\nexport type SuiEffectsFinalityInfo = Infer<typeof SuiEffectsFinalityInfo>;\n\nexport const SuiFinalizedEffects = object({\n  transactionEffectsDigest: string(),\n  effects: TransactionEffects,\n  finalityInfo: SuiEffectsFinalityInfo,\n});\nexport type SuiFinalizedEffects = Infer<typeof SuiFinalizedEffects>;\n\n// TODO: Remove after devnet 0.28.0\n\nexport type GatewayTxSeqNumber = number;\n\nexport const GetTxnDigestsResponse = array(TransactionDigest);\nexport type GetTxnDigestsResponse = Infer<typeof GetTxnDigestsResponse>;\n\nexport const PaginatedTransactionDigests = object({\n  data: array(TransactionDigest),\n  nextCursor: union([TransactionDigest, literal(null)]),\n});\nexport type PaginatedTransactionDigests = Infer<\n  typeof PaginatedTransactionDigests\n>;\n\nexport type TransactionQuery =\n  | 'All'\n  | {\n      MoveFunction: {\n        package: ObjectId;\n        module: string | null;\n        function: string | null;\n      };\n    }\n  | { InputObject: ObjectId }\n  | { MutatedObject: ObjectId }\n  | { FromAddress: SuiAddress }\n  | { ToAddress: SuiAddress };\n\nexport type EmptySignInfo = object;\nexport type AuthorityName = Infer<typeof AuthorityName>;\nexport const AuthorityName = string();\n\nexport const TransactionBytes = object({\n  txBytes: string(),\n  gas: SuiObjectRef,\n  // TODO: Type input_objects field\n  inputObjects: unknown(),\n});\n\nexport const SuiParsedMergeCoinResponse = object({\n  updatedCoin: SuiObject,\n  updatedGas: SuiObject,\n});\nexport type SuiParsedMergeCoinResponse = Infer<\n  typeof SuiParsedMergeCoinResponse\n>;\n\nexport const SuiParsedSplitCoinResponse = object({\n  updatedCoin: SuiObject,\n  newCoins: array(SuiObject),\n  updatedGas: SuiObject,\n});\nexport type SuiParsedSplitCoinResponse = Infer<\n  typeof SuiParsedSplitCoinResponse\n>;\n\nexport const SuiPackage = object({\n  digest: string(),\n  objectId: string(),\n  version: number(),\n});\n\nexport const SuiParsedPublishResponse = object({\n  createdObjects: array(SuiObject),\n  package: SuiPackage,\n  updatedGas: SuiObject,\n});\nexport type SuiParsedPublishResponse = Infer<typeof SuiParsedPublishResponse>;\n\nexport const SuiParsedTransactionResponse = union([\n  object({ SplitCoin: SuiParsedSplitCoinResponse }),\n  object({ MergeCoin: SuiParsedMergeCoinResponse }),\n  object({ Publish: SuiParsedPublishResponse }),\n]);\nexport type SuiParsedTransactionResponse = Infer<\n  typeof SuiParsedTransactionResponse\n>;\n\nexport const SuiTransaction = object({\n  data: SuiTransactionData,\n  txSignatures: array(string()),\n});\nexport type SuiTransaction = Infer<typeof SuiTransaction>;\n\nexport const SuiTransactionResponse = object({\n  // TODO: Remove optional after devnet 0.28.0\n  transaction: optional(SuiTransaction),\n  // TODO: Remove after devnet 0.28.0\n  certificate: optional(CertifiedTransaction),\n  effects: TransactionEffects,\n  // TODO: Remove after devnet 0.28.0\n  timestamp_ms: optional(union([number(), literal(null)])),\n  // TODO: Remove optional after devnet 0.28.0\n  timestampMs: optional(union([number(), literal(null)])),\n  // TODO: remove optional after 0.27.0 is released\n  checkpoint: optional(union([number(), literal(null)])),\n  // TODO: Remove optional after devnet 0.28.0\n  confirmedLocalExecution: optional(boolean()),\n  // TODO: Remove after devnet 0.28.0\n  parsed_data: optional(union([SuiParsedTransactionResponse, literal(null)])),\n});\nexport type SuiTransactionResponse = Infer<typeof SuiTransactionResponse>;\n\n// TODO: Remove after devnet 0.28.0\nexport const SuiExecuteTransactionResponse = union([\n  object({\n    EffectsCert: object({\n      certificate: CertifiedTransaction,\n      effects: SuiCertifiedTransactionEffects,\n      confirmed_local_execution: boolean(),\n    }),\n  }),\n  object({\n    certificate: optional(CertifiedTransaction),\n    effects: SuiFinalizedEffects,\n    confirmed_local_execution: boolean(),\n  }),\n  SuiTransactionResponse,\n]);\nexport type SuiExecuteTransactionResponse = Infer<\n  typeof SuiExecuteTransactionResponse\n>;\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper functions                              */\n/* -------------------------------------------------------------------------- */\n\n/* ---------------------------------- CertifiedTransaction --------------------------------- */\n\nexport function getCertifiedTransaction(\n  tx: SuiTransactionResponse | SuiExecuteTransactionResponse,\n): CertifiedTransaction | undefined {\n  if ('certificate' in tx) {\n    return tx.certificate;\n  } else if ('EffectsCert' in tx) {\n    return tx.EffectsCert.certificate;\n  }\n  return undefined;\n}\n\nexport function getTransactionDigest(\n  tx:\n    | CertifiedTransaction\n    | SuiTransactionResponse\n    | SuiExecuteTransactionResponse,\n): TransactionDigest {\n  if ('transactionDigest' in tx) {\n    return tx.transactionDigest;\n  }\n  const effects = getTransactionEffects(tx)!;\n  return effects.transactionDigest;\n}\n\nexport function getTransactionSignature(\n  tx: SuiTransactionResponse | CertifiedTransaction,\n): string[] {\n  const certificateOrTx =\n    'certificate' in tx\n      ? tx.certificate!\n      : 'transaction' in tx\n      ? tx.transaction!\n      : tx;\n\n  if ('txSignatures' in certificateOrTx) {\n    return certificateOrTx.txSignatures;\n  }\n\n  return [];\n}\n\nexport function getTransactionData(\n  tx: CertifiedTransaction,\n): SuiTransactionData {\n  return tx.data;\n}\n\n/* ----------------------------- TransactionData ---------------------------- */\n\nexport function getTransactionSender(tx: SuiTransactionResponse): SuiAddress {\n  return tx.certificate\n    ? tx.certificate.data.sender\n    : tx.transaction!.data.sender;\n}\n\nexport function getGasData(\n  tx: CertifiedTransaction | SuiTransactionResponse,\n): SuiGasData {\n  if ('data' in tx) {\n    return tx.data.gasData;\n  }\n\n  if ('certificate' in tx) {\n    return tx.certificate!.data.gasData;\n  }\n\n  return tx.transaction!.data.gasData;\n}\n\nexport function getTransactionGasObject(\n  tx: SuiTransactionResponse | CertifiedTransaction,\n): SuiObjectRef {\n  return getGasData(tx).payment;\n}\n\nexport function getTransactionGasPrice(\n  tx: SuiTransactionResponse | CertifiedTransaction,\n) {\n  return getGasData(tx).price;\n}\n\nexport function getTransactionGasBudget(\n  tx: SuiTransactionResponse | CertifiedTransaction,\n): number {\n  return getGasData(tx).budget;\n}\n\nexport function getTransferObjectTransaction(\n  data: SuiTransactionKind,\n): TransferObject | undefined {\n  return 'TransferObject' in data ? data.TransferObject : undefined;\n}\n\nexport function getPublishTransaction(\n  data: SuiTransactionKind,\n): SuiMovePackage | undefined {\n  return 'Publish' in data ? data.Publish : undefined;\n}\n\nexport function getMoveCallTransaction(\n  data: SuiTransactionKind,\n): MoveCall | undefined {\n  return 'Call' in data ? data.Call : undefined;\n}\n\nexport function getTransferSuiTransaction(\n  data: SuiTransactionKind,\n): SuiTransferSui | undefined {\n  return 'TransferSui' in data ? data.TransferSui : undefined;\n}\n\nexport function getPayTransaction(data: SuiTransactionKind): Pay | undefined {\n  return 'Pay' in data ? data.Pay : undefined;\n}\n\nexport function getPaySuiTransaction(\n  data: SuiTransactionKind,\n): PaySui | undefined {\n  return 'PaySui' in data ? data.PaySui : undefined;\n}\n\nexport function getPayAllSuiTransaction(\n  data: SuiTransactionKind,\n): PayAllSui | undefined {\n  return 'PayAllSui' in data ? data.PayAllSui : undefined;\n}\n\nexport function getChangeEpochTransaction(\n  data: SuiTransactionKind,\n): SuiChangeEpoch | undefined {\n  return 'ChangeEpoch' in data ? data.ChangeEpoch : undefined;\n}\n\nexport function getConsensusCommitPrologueTransaction(\n  data: SuiTransactionKind,\n): SuiConsensusCommitPrologue | undefined {\n  return 'ConsensusCommitPrologue' in data\n    ? data.ConsensusCommitPrologue\n    : undefined;\n}\n\nexport function getTransactions(\n  data: SuiTransactionResponse,\n): SuiTransactionKind[] {\n  return data.certificate\n    ? data.certificate.data.transactions\n    : data.transaction!.data.transactions;\n}\n\nexport function getTransferSuiAmount(data: SuiTransactionKind): bigint | null {\n  return 'TransferSui' in data && data.TransferSui.amount\n    ? BigInt(data.TransferSui.amount)\n    : null;\n}\n\nexport function getTransactionKindName(\n  data: SuiTransactionKind,\n): TransactionKindName {\n  return Object.keys(data)[0] as TransactionKindName;\n}\n\n/* ----------------------------- ExecutionStatus ---------------------------- */\n\nexport function getExecutionStatusType(\n  data: SuiTransactionResponse | SuiExecuteTransactionResponse,\n): ExecutionStatusType | undefined {\n  return getExecutionStatus(data)?.status;\n}\n\nexport function getExecutionStatus(\n  data: SuiTransactionResponse | SuiExecuteTransactionResponse,\n): ExecutionStatus | undefined {\n  return getTransactionEffects(data)?.status;\n}\n\nexport function getExecutionStatusError(\n  data: SuiTransactionResponse | SuiExecuteTransactionResponse,\n): string | undefined {\n  return getExecutionStatus(data)?.error;\n}\n\nexport function getExecutionStatusGasSummary(\n  data:\n    | SuiTransactionResponse\n    | SuiExecuteTransactionResponse\n    | TransactionEffects,\n): GasCostSummary | undefined {\n  if (is(data, TransactionEffects)) {\n    return data.gasUsed;\n  }\n  return getTransactionEffects(data)?.gasUsed;\n}\n\nexport function getTotalGasUsed(\n  data:\n    | SuiTransactionResponse\n    | SuiExecuteTransactionResponse\n    | TransactionEffects,\n): number | undefined {\n  const gasSummary = getExecutionStatusGasSummary(data);\n  return gasSummary\n    ? gasSummary.computationCost +\n        gasSummary.storageCost -\n        gasSummary.storageRebate\n    : undefined;\n}\n\nexport function getTotalGasUsedUpperBound(\n  data:\n    | SuiTransactionResponse\n    | SuiExecuteTransactionResponse\n    | TransactionEffects,\n): number | undefined {\n  const gasSummary = getExecutionStatusGasSummary(data);\n  return gasSummary\n    ? gasSummary.computationCost + gasSummary.storageCost\n    : undefined;\n}\n\nexport function getTransactionEffects(\n  data: SuiExecuteTransactionResponse | SuiTransactionResponse,\n): TransactionEffects | undefined {\n  if ('effects' in data) {\n    return `effects` in data.effects ? data.effects.effects : data.effects;\n  }\n  return 'EffectsCert' in data ? data.EffectsCert.effects.effects : undefined;\n}\n\n/* ---------------------------- Transaction Effects --------------------------- */\n\nexport function getEvents(\n  data: SuiExecuteTransactionResponse | SuiTransactionResponse,\n): SuiEvent[] | undefined {\n  return getTransactionEffects(data)?.events;\n}\n\nexport function getCreatedObjects(\n  data: SuiExecuteTransactionResponse | SuiTransactionResponse,\n): OwnedObjectRef[] | undefined {\n  return getTransactionEffects(data)?.created;\n}\n\n/* --------------------------- TransactionResponse -------------------------- */\n\nexport function getTimestampFromTransactionResponse(\n  data: SuiExecuteTransactionResponse | SuiTransactionResponse,\n): number | undefined {\n  return 'timestamp_ms' in data || 'timestampMs' in data\n    ? (data.timestamp_ms || data.timestampMs) ?? undefined\n    : undefined;\n}\n\nexport function getParsedSplitCoinResponse(\n  data: SuiTransactionResponse,\n): SuiParsedSplitCoinResponse | undefined {\n  const parsed = data.parsed_data;\n  return parsed && 'SplitCoin' in parsed ? parsed.SplitCoin : undefined;\n}\n\nexport function getParsedMergeCoinResponse(\n  data: SuiTransactionResponse,\n): SuiParsedMergeCoinResponse | undefined {\n  const parsed = data.parsed_data;\n  return parsed && 'MergeCoin' in parsed ? parsed.MergeCoin : undefined;\n}\n\nexport function getParsedPublishResponse(\n  data: SuiTransactionResponse,\n): SuiParsedPublishResponse | undefined {\n  const parsed = data.parsed_data;\n  return parsed && 'Publish' in parsed ? parsed.Publish : undefined;\n}\n\n/**\n * Get the updated coin after a merge.\n * @param data the response for executing a merge coin transaction\n * @returns the updated state of the primary coin after the merge\n */\nexport function getCoinAfterMerge(\n  data: SuiTransactionResponse,\n): SuiObject | undefined {\n  return getParsedMergeCoinResponse(data)?.updatedCoin;\n}\n\n/**\n * Get the updated coin after a split.\n * @param data the response for executing a Split coin transaction\n * @returns the updated state of the original coin object used for the split\n */\nexport function getCoinAfterSplit(\n  data: SuiTransactionResponse,\n): SuiObject | undefined {\n  return getParsedSplitCoinResponse(data)?.updatedCoin;\n}\n\n/**\n * Get the newly created coin after a split.\n * @param data the response for executing a Split coin transaction\n * @returns the updated state of the original coin object used for the split\n */\nexport function getNewlyCreatedCoinsAfterSplit(\n  data: SuiTransactionResponse,\n): SuiObject[] | undefined {\n  return getParsedSplitCoinResponse(data)?.newCoins;\n}\n\n/**\n * Get the newly created coin refs after a split.\n */\nexport function getNewlyCreatedCoinRefsAfterSplit(\n  data: SuiTransactionResponse | SuiExecuteTransactionResponse,\n): SuiObjectRef[] | undefined {\n  if ('EffectsCert' in data) {\n    const effects = data.EffectsCert.effects.effects;\n    return effects.created?.map((c) => c.reference);\n  }\n  if ('effects' in data) {\n    const effects =\n      'effects' in data.effects ? data.effects.effects : data.effects;\n    return effects.created?.map((c) => c.reference);\n  }\n  return undefined;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport type Option<T> =\n  | T\n  | {\n      fields: {\n        vec: '';\n      };\n      type: string;\n    };\n\nexport function getOption<T>(option: Option<T>): T | undefined {\n  if (\n    typeof option === 'object' &&\n    option !== null &&\n    'type' in option &&\n    option.type.startsWith('0x1::option::Option<')\n  ) {\n    return undefined;\n  }\n  return option as T;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  getObjectFields,\n  GetObjectDataResponse,\n  SuiMoveObject,\n  SuiObjectInfo,\n  SuiObject,\n  getMoveObjectType,\n  getObjectId,\n} from '../types/objects';\nimport { normalizeSuiObjectId, ObjectId, SuiAddress } from '../types/common';\n\nimport { getOption, Option } from '../types/option';\nimport { StructTag } from '../types/sui-bcs';\nimport { UnserializedSignableTransaction } from '../signers/txn-data-serializers/txn-data-serializer';\nimport { Infer, literal, number, object, string, union } from 'superstruct';\n\nexport const SUI_FRAMEWORK_ADDRESS = '0x2';\nexport const MOVE_STDLIB_ADDRESS = '0x1';\nexport const OBJECT_MODULE_NAME = 'object';\nexport const UID_STRUCT_NAME = 'UID';\nexport const ID_STRUCT_NAME = 'ID';\nexport const SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\n\n// `sui::pay` module is used for Coin management (split, join, join_and_transfer etc);\nexport const PAY_MODULE_NAME = 'pay';\nexport const PAY_SPLIT_COIN_VEC_FUNC_NAME = 'split_vec';\nexport const PAY_JOIN_COIN_FUNC_NAME = 'join';\nexport const COIN_TYPE_ARG_REGEX = /^0x2::coin::Coin<(.+)>$/;\n\ntype ObjectData = ObjectDataFull | SuiObjectInfo;\ntype ObjectDataFull = GetObjectDataResponse | SuiMoveObject;\n\nexport const CoinMetadataStruct = object({\n  decimals: number(),\n  name: string(),\n  symbol: string(),\n  description: string(),\n  iconUrl: union([string(), literal(null)]),\n  id: union([ObjectId, literal(null)]),\n});\n\nexport type CoinMetadata = Infer<typeof CoinMetadataStruct>;\n\n/**\n * Utility class for 0x2::coin\n * as defined in https://github.com/MystenLabs/sui/blob/ca9046fd8b1a9e8634a4b74b0e7dabdc7ea54475/sui_programmability/framework/sources/Coin.move#L4\n */\nexport class Coin {\n  static isCoin(data: ObjectData): boolean {\n    return Coin.getType(data)?.match(COIN_TYPE_ARG_REGEX) != null;\n  }\n\n  static getCoinType(type: string) {\n    const [, res] = type.match(COIN_TYPE_ARG_REGEX) ?? [];\n    return res || null;\n  }\n\n  static getCoinTypeArg(obj: ObjectData) {\n    const type = Coin.getType(obj);\n    return type ? Coin.getCoinType(type) : null;\n  }\n\n  static isSUI(obj: ObjectData) {\n    const arg = Coin.getCoinTypeArg(obj);\n    return arg ? Coin.getCoinSymbol(arg) === 'SUI' : false;\n  }\n\n  static getCoinSymbol(coinTypeArg: string) {\n    return coinTypeArg.substring(coinTypeArg.lastIndexOf(':') + 1);\n  }\n\n  static getCoinStructTag(coinTypeArg: string): StructTag {\n    return {\n      address: normalizeSuiObjectId(coinTypeArg.split('::')[0]),\n      module: coinTypeArg.split('::')[1],\n      name: coinTypeArg.split('::')[2],\n      typeParams: [],\n    };\n  }\n\n  public static getID(obj: ObjectData): ObjectId {\n    if ('fields' in obj) {\n      return obj.fields.id.id;\n    }\n    return getObjectId(obj);\n  }\n\n  /**\n   * Convenience method for select coin objects that has a balance greater than or equal to `amount`\n   *\n   * @param amount coin balance\n   * @param exclude object ids of the coins to exclude\n   * @return a list of coin objects that has balance greater than `amount` in an ascending order\n   */\n  static selectCoinsWithBalanceGreaterThanOrEqual(\n    coins: ObjectDataFull[],\n    amount: bigint,\n    exclude: ObjectId[] = [],\n  ): ObjectDataFull[] {\n    return Coin.sortByBalance(\n      coins.filter(\n        (c) =>\n          !exclude.includes(Coin.getID(c)) && Coin.getBalance(c)! >= amount,\n      ),\n    );\n  }\n\n  /**\n   * Convenience method for select an arbitrary coin object that has a balance greater than or\n   * equal to `amount`\n   *\n   * @param amount coin balance\n   * @param exclude object ids of the coins to exclude\n   * @return an arbitrary coin with balance greater than or equal to `amount\n   */\n  static selectCoinWithBalanceGreaterThanOrEqual(\n    coins: ObjectDataFull[],\n    amount: bigint,\n    exclude: ObjectId[] = [],\n  ): ObjectDataFull | undefined {\n    return coins.find(\n      (c) => !exclude.includes(Coin.getID(c)) && Coin.getBalance(c)! >= amount,\n    );\n  }\n\n  /**\n   * Convenience method for select a minimal set of coin objects that has a balance greater than\n   * or equal to `amount`. The output can be used for `PayTransaction`\n   *\n   * @param amount coin balance\n   * @param exclude object ids of the coins to exclude\n   * @return a minimal list of coin objects that has a combined balance greater than or equal\n   * to`amount` in an ascending order. If no such set exists, an empty list is returned\n   */\n  static selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\n    coins: ObjectDataFull[],\n    amount: bigint,\n    exclude: ObjectId[] = [],\n  ): ObjectDataFull[] {\n    const sortedCoins = Coin.sortByBalance(\n      coins.filter((c) => !exclude.includes(Coin.getID(c))),\n    );\n\n    const total = Coin.totalBalance(sortedCoins);\n    // return empty set if the aggregate balance of all coins is smaller than amount\n    if (total < amount) {\n      return [];\n    } else if (total === amount) {\n      return sortedCoins;\n    }\n\n    let sum = BigInt(0);\n    let ret = [];\n    while (sum < total) {\n      // prefer to add a coin with smallest sufficient balance\n      const target = amount - sum;\n      const coinWithSmallestSufficientBalance = sortedCoins.find(\n        (c) => Coin.getBalance(c)! >= target,\n      );\n      if (coinWithSmallestSufficientBalance) {\n        ret.push(coinWithSmallestSufficientBalance);\n        break;\n      }\n\n      const coinWithLargestBalance = sortedCoins.pop()!;\n      ret.push(coinWithLargestBalance);\n      sum += Coin.getBalance(coinWithLargestBalance)!;\n    }\n\n    return Coin.sortByBalance(ret);\n  }\n\n  static totalBalance(coins: ObjectDataFull[]): bigint {\n    return coins.reduce(\n      (partialSum, c) => partialSum + Coin.getBalance(c)!,\n      BigInt(0),\n    );\n  }\n\n  /**\n   * Sort coin by balance in an ascending order\n   */\n  static sortByBalance(coins: ObjectDataFull[]): ObjectDataFull[] {\n    return [...coins].sort((a, b) =>\n      Coin.getBalance(a)! < Coin.getBalance(b)!\n        ? -1\n        : Coin.getBalance(a)! > Coin.getBalance(b)!\n        ? 1\n        : 0,\n    );\n  }\n\n  static getBalance(data: ObjectDataFull): bigint | undefined {\n    if (!Coin.isCoin(data)) {\n      return undefined;\n    }\n    const balance = getObjectFields(data)?.balance;\n    return BigInt(balance);\n  }\n\n  static getZero(): bigint {\n    return BigInt(0);\n  }\n\n  private static getType(data: ObjectData): string | undefined {\n    if ('status' in data) {\n      return getMoveObjectType(data);\n    }\n    return data.type;\n  }\n\n  /**\n   * Create a new transaction for sending coins ready to be signed and executed.\n   * @param allCoins All the coins that are owned by the sender. Can be only the relevant type of coins for the transfer, Sui for gas and the coins with the same type as the type to send.\n   * @param coinTypeArg The coin type argument (Coin<T> the T) of the coin to send\n   * @param amountToSend Total amount to send to recipient\n   * @param recipient Recipient's address\n   * @param gasBudget Gas budget for the tx\n   * @throws in case of insufficient funds\n   */\n  public static async newPayTransaction(\n    allCoins: SuiMoveObject[],\n    coinTypeArg: string,\n    amountToSend: bigint,\n    recipient: SuiAddress,\n    gasBudget: number,\n  ): Promise<UnserializedSignableTransaction> {\n    const isSuiTransfer = coinTypeArg === SUI_TYPE_ARG;\n    const coinsOfTransferType = allCoins.filter(\n      (aCoin) => Coin.getCoinTypeArg(aCoin) === coinTypeArg,\n    );\n    const coinsOfGas = isSuiTransfer\n      ? coinsOfTransferType\n      : allCoins.filter((aCoin) => Coin.isSUI(aCoin));\n    const gasCoin = Coin.selectCoinWithBalanceGreaterThanOrEqual(\n      coinsOfGas,\n      BigInt(gasBudget),\n    );\n    if (!gasCoin) {\n      // TODO: denomination for gasBudget?\n      throw new Error(\n        `Unable to find a coin to cover the gas budget ${gasBudget}`,\n      );\n    }\n    const totalAmountIncludingGas =\n      amountToSend +\n      BigInt(\n        isSuiTransfer\n          ? // subtract from the total the balance of the gasCoin as it's going be the first element of the inputCoins\n            BigInt(gasBudget) - BigInt(Coin.getBalance(gasCoin) || 0)\n          : 0,\n      );\n    const inputCoinObjs =\n      totalAmountIncludingGas > 0\n        ? await Coin.selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\n            coinsOfTransferType,\n            totalAmountIncludingGas,\n            isSuiTransfer ? [Coin.getID(gasCoin)] : [],\n          )\n        : [];\n    if (totalAmountIncludingGas > 0 && !inputCoinObjs.length) {\n      const totalBalanceOfTransferType = Coin.totalBalance(coinsOfTransferType);\n      const suggestedAmountToSend =\n        totalBalanceOfTransferType - BigInt(isSuiTransfer ? gasBudget : 0);\n      // TODO: denomination for values?\n      throw new Error(\n        `Coin balance ${totalBalanceOfTransferType} is not sufficient to cover the transfer amount ` +\n          `${amountToSend}. Try reducing the transfer amount to ${suggestedAmountToSend}.`,\n      );\n    }\n    if (isSuiTransfer) {\n      inputCoinObjs.unshift(gasCoin);\n    }\n    return {\n      kind: isSuiTransfer ? 'paySui' : 'pay',\n      data: {\n        inputCoins: inputCoinObjs.map(Coin.getID),\n        recipients: [recipient],\n        // TODO: change this to string to avoid losing precision\n        amounts: [Number(amountToSend)],\n        gasBudget: Number(gasBudget),\n      },\n    };\n  }\n}\n\nexport type DelegationData = SuiMoveObject & {\n  dataType: 'moveObject';\n  type: '0x2::delegation::Delegation';\n  fields: {\n    active_delegation: Option<number>;\n    delegate_amount: number;\n    next_reward_unclaimed_epoch: number;\n    validator_address: SuiAddress;\n    info: {\n      id: string;\n      version: number;\n    };\n    coin_locked_until_epoch: Option<SuiMoveObject>;\n    ending_epoch: Option<number>;\n  };\n};\n\nexport type DelegationSuiObject = Omit<SuiObject, 'data'> & {\n  data: DelegationData;\n};\n\n// Class for delegation.move\n// see https://github.com/MystenLabs/fastnft/blob/161aa27fe7eb8ecf2866ec9eb192e768f25da768/crates/sui-framework/sources/governance/delegation.move\nexport class Delegation {\n  public static readonly SUI_OBJECT_TYPE = '0x2::delegation::Delegation';\n  private suiObject: DelegationSuiObject;\n\n  public static isDelegationSuiObject(\n    obj: SuiObject,\n  ): obj is DelegationSuiObject {\n    return 'type' in obj.data && obj.data.type === Delegation.SUI_OBJECT_TYPE;\n  }\n\n  constructor(obj: DelegationSuiObject) {\n    this.suiObject = obj;\n  }\n\n  public nextRewardUnclaimedEpoch() {\n    return this.suiObject.data.fields.next_reward_unclaimed_epoch;\n  }\n\n  public activeDelegation() {\n    return BigInt(getOption(this.suiObject.data.fields.active_delegation) || 0);\n  }\n\n  public delegateAmount() {\n    return this.suiObject.data.fields.delegate_amount;\n  }\n\n  public endingEpoch() {\n    return getOption(this.suiObject.data.fields.ending_epoch);\n  }\n\n  public validatorAddress() {\n    return this.suiObject.data.fields.validator_address;\n  }\n\n  public isActive() {\n    return this.activeDelegation() > 0 && !this.endingEpoch();\n  }\n\n  public hasUnclaimedRewards(epoch: number) {\n    return (\n      this.nextRewardUnclaimedEpoch() <= epoch &&\n      (this.isActive() || (this.endingEpoch() || 0) > epoch)\n    );\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BCS, getSuiMoveConfig } from '@mysten/bcs';\nimport { SuiObjectRef } from './objects';\nimport { RpcApiVersion } from './version';\n\nfunction registerUTF8String(bcs: BCS) {\n  bcs.registerType(\n    'utf8string',\n    (writer, str) => {\n      const bytes = Array.from(new TextEncoder().encode(str));\n      return writer.writeVec(bytes, (writer, el) => writer.write8(el));\n    },\n    (reader) => {\n      let bytes = reader.readVec((reader) => reader.read8());\n      return new TextDecoder().decode(new Uint8Array(bytes));\n    },\n  );\n}\n\n/**\n * Transaction type used for transferring objects.\n * For this transaction to be executed, and `SuiObjectRef` should be queried\n * upfront and used as a parameter.\n */\nexport type TransferObjectTx = {\n  TransferObject: {\n    recipient: string;\n    object_ref: SuiObjectRef;\n  };\n};\n\n/**\n * Transaction type used for transferring Sui.\n */\nexport type TransferSuiTx = {\n  TransferSui: {\n    recipient: string;\n    amount: { Some: number } | { None: null };\n  };\n};\n\n/**\n * Transaction type used for Pay transaction.\n */\nexport type PayTx = {\n  Pay: {\n    coins: SuiObjectRef[];\n    recipients: string[];\n    amounts: number[];\n  };\n};\n\nexport type PaySuiTx = {\n  PaySui: {\n    coins: SuiObjectRef[];\n    recipients: string[];\n    amounts: number[];\n  };\n};\n\nexport type PayAllSuiTx = {\n  PayAllSui: {\n    coins: SuiObjectRef[];\n    recipient: string;\n  };\n};\n\n/**\n * Transaction type used for publishing Move modules to the Sui.\n * Should be already compiled using `sui-move`, example:\n * ```\n * $ sui-move build\n * $ cat build/project_name/bytecode_modules/module.mv\n * ```\n * In JS:\n * ```\n * let file = fs.readFileSync('./move/build/project_name/bytecode_modules/module.mv');\n * let bytes = Array.from(bytes);\n * let modules = [ bytes ];\n *\n * // ... publish logic ...\n * ```\n *\n * Each module should be represented as a sequence of bytes.\n */\nexport type PublishTx = {\n  Publish: {\n    modules: ArrayLike<ArrayLike<number>>;\n  };\n};\n\n// ========== Move Call Tx ===========\n\n/**\n * A reference to a shared object.\n */\nexport type SharedObjectRef = {\n  /** Hex code as string representing the object id */\n  objectId: string;\n\n  /** The version the object was shared at */\n  initialSharedVersion: number;\n\n  /** Whether reference is mutable */\n  mutable: boolean;\n};\n\n/**\n * A reference to a shared object from 0.23.0.\n */\nexport type SharedObjectRef_23 = {\n  /** Hex code as string representing the object id */\n  objectId: string;\n\n  /** The version the object was shared at */\n  initialSharedVersion: number;\n};\n\n/**\n * An object argument.\n */\nexport type ObjectArg =\n  | { ImmOrOwned: SuiObjectRef }\n  | { Shared: SharedObjectRef | SharedObjectRef_23 };\n\n/**\n * A pure argument.\n */\nexport type PureArg = { Pure: ArrayLike<number> };\n\nexport function isPureArg(arg: any): arg is PureArg {\n  return (arg as PureArg).Pure !== undefined;\n}\n\n/**\n * An argument for the transaction. It is a 'meant' enum which expects to have\n * one of the optional properties. If not, the BCS error will be thrown while\n * attempting to form a transaction.\n *\n * Example:\n * ```js\n * let arg1: CallArg = { Object: { Shared: {\n *   objectId: '5460cf92b5e3e7067aaace60d88324095fd22944',\n *   initialSharedVersion: 1,\n * } } };\n * let arg2: CallArg = { Pure: bcs.set(bcs.STRING, 100000).toBytes() };\n * let arg3: CallArg = { Object: { ImmOrOwned: {\n *   objectId: '4047d2e25211d87922b6650233bd0503a6734279',\n *   version: 1,\n *   digest: 'bCiANCht4O9MEUhuYjdRCqRPZjr2rJ8MfqNiwyhmRgA='\n * } } };\n * ```\n *\n * For `Pure` arguments BCS is required. You must encode the values with BCS according\n * to the type required by the called function. Pure accepts only serialized values\n */\nexport type CallArg =\n  | PureArg\n  | { Object: ObjectArg }\n  | { ObjVec: ArrayLike<ObjectArg> };\n\n/**\n * Kind of a TypeTag which is represented by a Move type identifier.\n */\nexport type StructTag = {\n  address: string;\n  module: string;\n  name: string;\n  typeParams: TypeTag[];\n};\n\n/**\n * Sui TypeTag object. A decoupled `0x...::module::Type<???>` parameter.\n */\nexport type TypeTag =\n  | { bool: null }\n  | { u8: null }\n  | { u64: null }\n  | { u128: null }\n  | { address: null }\n  | { signer: null }\n  | { vector: TypeTag }\n  | { struct: StructTag }\n  | { u16: null }\n  | { u32: null }\n  | { u256: null };\n\n/**\n * Transaction type used for calling Move modules' functions.\n * Should be crafted carefully, because the order of type parameters and\n * arguments matters.\n */\nexport type MoveCallTx = {\n  Call: {\n    package: string;\n    module: string;\n    function: string;\n    typeArguments: TypeTag[];\n    arguments: CallArg[];\n  };\n};\n\n// ========== TransactionData ===========\n\nexport type Transaction =\n  | MoveCallTx\n  | PayTx\n  | PaySuiTx\n  | PayAllSuiTx\n  | PublishTx\n  | TransferObjectTx\n  | TransferSuiTx;\n\n/**\n * Transaction kind - either Batch or Single.\n *\n * Can be improved to change serialization automatically based on\n * the passed value (single Transaction or an array).\n */\nexport type TransactionKind =\n  | { Single: Transaction }\n  | { Batch: Transaction[] };\n\n/**\n * The GasData to be used in the transaction.\n */\nexport type GasData = {\n  payment: SuiObjectRef;\n  owner: string; // Gas Object's owner\n  price: number;\n  budget: number;\n};\n\n/**\n * TransactionExpiration\n *\n * Indications the expiration time for a transaction.\n */\nexport type TransactionExpiration = { None: null } | { Epoch: number };\n\n/**\n * The TransactionData to be signed and sent to the RPC service.\n *\n * Field `sender` is made optional as it can be added during the signing\n * process and there's no need to define it sooner.\n *\n * Field `expiration` is made optional as it is defaulted to `None`.\n */\nexport type TransactionData = {\n  sender?: string;\n  kind: TransactionKind;\n  gasData: GasData;\n  expiration?: TransactionExpiration;\n};\n\nexport const TRANSACTION_DATA_TYPE_TAG = Array.from('TransactionData::').map(\n  (e) => e.charCodeAt(0),\n);\n\nexport function deserializeTransactionBytesToTransactionData(\n  bcs: BCS,\n  bytes: Uint8Array,\n): TransactionData {\n  return bcs.de('TransactionData', bytes);\n}\n\nconst BCS_SPEC = {\n  enums: {\n    'Option<T>': {\n      None: null,\n      Some: 'T',\n    },\n    ObjectArg: {\n      ImmOrOwned: 'SuiObjectRef',\n      Shared: 'SharedObjectRef',\n    },\n    CallArg: {\n      Pure: 'vector<u8>',\n      Object: 'ObjectArg',\n      ObjVec: 'vector<ObjectArg>',\n    },\n    TypeTag: {\n      bool: null,\n      u8: null,\n      u64: null,\n      u128: null,\n      address: null,\n      signer: null,\n      vector: 'TypeTag',\n      struct: 'StructTag',\n      u16: null,\n      u32: null,\n      u256: null,\n    },\n    Transaction: {\n      TransferObject: 'TransferObjectTx',\n      Publish: 'PublishTx',\n      Call: 'MoveCallTx',\n      TransferSui: 'TransferSuiTx',\n      Pay: 'PayTx',\n      PaySui: 'PaySuiTx',\n      PayAllSui: 'PayAllSuiTx',\n    },\n    TransactionKind: {\n      Single: 'Transaction',\n      Batch: 'vector<Transaction>',\n    },\n    TransactionExpiration: {\n      None: null,\n      Epoch: BCS.U64,\n    },\n  },\n  structs: {\n    SuiObjectRef: {\n      objectId: BCS.ADDRESS,\n      version: BCS.U64,\n      digest: 'ObjectDigest',\n    },\n    TransferObjectTx: {\n      recipient: BCS.ADDRESS,\n      object_ref: 'SuiObjectRef',\n    },\n    PayTx: {\n      coins: 'vector<SuiObjectRef>',\n      recipients: 'vector<address>',\n      amounts: 'vector<u64>',\n    },\n    PaySuiTx: {\n      coins: 'vector<SuiObjectRef>',\n      recipients: 'vector<address>',\n      amounts: 'vector<u64>',\n    },\n    PayAllSuiTx: {\n      coins: 'vector<SuiObjectRef>',\n      recipient: BCS.ADDRESS,\n    },\n    TransferSuiTx: {\n      recipient: BCS.ADDRESS,\n      amount: 'Option<u64>',\n    },\n    PublishTx: {\n      modules: 'vector<vector<u8>>',\n    },\n    SharedObjectRef: {\n      objectId: BCS.ADDRESS,\n      initialSharedVersion: BCS.U64,\n      mutable: BCS.BOOL,\n    },\n    StructTag: {\n      address: BCS.ADDRESS,\n      module: BCS.STRING,\n      name: BCS.STRING,\n      typeParams: 'vector<TypeTag>',\n    },\n    MoveCallTx: {\n      package: BCS.ADDRESS,\n      module: BCS.STRING,\n      function: BCS.STRING,\n      typeArguments: 'vector<TypeTag>',\n      arguments: 'vector<CallArg>',\n    },\n    TransactionData: {\n      kind: 'TransactionKind',\n      sender: BCS.ADDRESS,\n      gasData: 'GasData',\n      expiration: 'TransactionExpiration',\n    },\n    GasData: {\n      payment: 'SuiObjectRef',\n      owner: BCS.ADDRESS,\n      price: BCS.U64,\n      budget: BCS.U64,\n    },\n    // Signed transaction data needed to generate transaction digest.\n    SenderSignedData: {\n      data: 'TransactionData',\n      txSignatures: 'vector<vector<u8>>',\n    },\n  },\n  aliases: {\n    ObjectDigest: BCS.BASE64,\n  },\n};\n\n// for version <= 0.27.0\nconst BCS_0_27_SPEC = {\n  structs: {\n    ...BCS_SPEC.structs,\n    TransactionData: {\n      kind: 'TransactionKind',\n      sender: BCS.ADDRESS,\n      gasData: 'GasData',\n    },\n    SenderSignedData: {\n      data: 'TransactionData',\n      txSignature: 'vector<u8>',\n    },\n  },\n  enums: BCS_SPEC.enums,\n  aliases: {\n    ObjectDigest: BCS.BASE64,\n  },\n};\n\nconst bcs = new BCS({ ...getSuiMoveConfig(), types: BCS_SPEC });\nregisterUTF8String(bcs);\n\n// ========== Backward Compatibility (remove after v0.24 deploys) ===========\nconst bcs_0_27 = new BCS({ ...getSuiMoveConfig(), types: BCS_0_27_SPEC });\nregisterUTF8String(bcs_0_27);\n\nexport function bcsForVersion(v?: RpcApiVersion) {\n  if (v?.major === 0 && v?.minor <= 27) {\n    return bcs_0_27;\n  }\n\n  return bcs;\n}\n\nexport { bcs };\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { parse } from '@suchipi/femver';\n\nexport type RpcApiVersion = {\n  major: number;\n  minor: number;\n  patch: number;\n};\n\nexport function parseVersionFromString(\n  version: string,\n): RpcApiVersion | undefined {\n  return parse(version);\n}\n\nexport function versionToString(version: RpcApiVersion): string {\n  const { major, minor, patch } = version;\n  return `${major}.${minor}.${patch}`;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  array,\n  Infer,\n  object,\n  string,\n  union,\n  boolean,\n  define,\n  number,\n  literal,\n  record,\n  is,\n} from 'superstruct';\n\nexport type SuiMoveFunctionArgTypesResponse = Infer<\n  typeof SuiMoveFunctionArgType\n>[];\n\nexport const SuiMoveFunctionArgType = union([\n  string(),\n  object({ Object: string() }),\n]);\n\nexport const SuiMoveFunctionArgTypes = array(SuiMoveFunctionArgType);\nexport type SuiMoveFunctionArgTypes = Infer<typeof SuiMoveFunctionArgTypes>;\n\nexport const SuiMoveModuleId = object({\n  address: string(),\n  name: string(),\n});\nexport type SuiMoveModuleId = Infer<typeof SuiMoveModuleId>;\n\nexport const SuiMoveVisibility = union([\n  literal('Private'),\n  literal('Public'),\n  literal('Friend'),\n]);\nexport type SuiMoveVisibility = Infer<typeof SuiMoveVisibility>;\n\nexport const SuiMoveAbilitySet = object({\n  abilities: array(string()),\n});\nexport type SuiMoveAbilitySet = Infer<typeof SuiMoveAbilitySet>;\n\nexport const SuiMoveStructTypeParameter = object({\n  constraints: SuiMoveAbilitySet,\n  is_phantom: boolean(),\n});\nexport type SuiMoveStructTypeParameter = Infer<\n  typeof SuiMoveStructTypeParameter\n>;\n\nexport const SuiMoveNormalizedTypeParameterType = object({\n  TypeParameter: number(),\n});\nexport type SuiMoveNormalizedTypeParameterType = Infer<\n  typeof SuiMoveNormalizedTypeParameterType\n>;\n\nexport type SuiMoveNormalizedType =\n  | string\n  | SuiMoveNormalizedTypeParameterType\n  | { Reference: SuiMoveNormalizedType }\n  | { MutableReference: SuiMoveNormalizedType }\n  | { Vector: SuiMoveNormalizedType }\n  | SuiMoveNormalizedStructType;\n\nfunction isSuiMoveNormalizedType(\n  value: unknown,\n): value is SuiMoveNormalizedType {\n  if (!value) return false;\n  if (typeof value === 'string') return true;\n  if (is(value, SuiMoveNormalizedTypeParameterType)) return true;\n  if (isSuiMoveNormalizedStructType(value)) return true;\n  if (typeof value !== 'object') return false;\n\n  const valueProperties = value as Record<string, unknown>;\n  if (is(valueProperties.Reference, SuiMoveNormalizedType)) return true;\n  if (is(valueProperties.MutableReference, SuiMoveNormalizedType)) return true;\n  if (is(valueProperties.Vector, SuiMoveNormalizedType)) return true;\n  return false;\n}\n\nexport const SuiMoveNormalizedType = define<SuiMoveNormalizedType>(\n  'SuiMoveNormalizedType',\n  isSuiMoveNormalizedType,\n);\n\nexport type SuiMoveNormalizedStructType = {\n  Struct: {\n    address: string;\n    module: string;\n    name: string;\n    type_arguments: SuiMoveNormalizedType[];\n  };\n};\n\nfunction isSuiMoveNormalizedStructType(\n  value: unknown,\n): value is SuiMoveNormalizedStructType {\n  if (!value || typeof value !== 'object') return false;\n\n  const valueProperties = value as Record<string, unknown>;\n  if (!valueProperties.Struct || typeof valueProperties.Struct !== 'object')\n    return false;\n\n  const structProperties = valueProperties.Struct as Record<string, unknown>;\n  if (\n    typeof structProperties.address !== 'string' ||\n    typeof structProperties.module !== 'string' ||\n    typeof structProperties.name !== 'string' ||\n    !Array.isArray(structProperties.type_arguments) ||\n    !structProperties.type_arguments.every((value) =>\n      isSuiMoveNormalizedType(value),\n    )\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\n// NOTE: This type is recursive, so we need to manually implement it:\nexport const SuiMoveNormalizedStructType = define<SuiMoveNormalizedStructType>(\n  'SuiMoveNormalizedStructType',\n  isSuiMoveNormalizedStructType,\n);\n\nexport const SuiMoveNormalizedFunction = object({\n  visibility: SuiMoveVisibility,\n  is_entry: boolean(),\n  type_parameters: array(SuiMoveAbilitySet),\n  parameters: array(SuiMoveNormalizedType),\n  return_: array(SuiMoveNormalizedType),\n});\nexport type SuiMoveNormalizedFunction = Infer<typeof SuiMoveNormalizedFunction>;\n\nexport const SuiMoveNormalizedField = object({\n  name: string(),\n  type_: SuiMoveNormalizedType,\n});\nexport type SuiMoveNormalizedField = Infer<typeof SuiMoveNormalizedField>;\n\nexport const SuiMoveNormalizedStruct = object({\n  abilities: SuiMoveAbilitySet,\n  type_parameters: array(SuiMoveStructTypeParameter),\n  fields: array(SuiMoveNormalizedField),\n});\nexport type SuiMoveNormalizedStruct = Infer<typeof SuiMoveNormalizedStruct>;\n\nexport const SuiMoveNormalizedModule = object({\n  file_format_version: number(),\n  address: string(),\n  name: string(),\n  friends: array(SuiMoveModuleId),\n  structs: record(string(), SuiMoveNormalizedStruct),\n  exposed_functions: record(string(), SuiMoveNormalizedFunction),\n});\nexport type SuiMoveNormalizedModule = Infer<typeof SuiMoveNormalizedModule>;\n\nexport const SuiMoveNormalizedModules = record(\n  string(),\n  SuiMoveNormalizedModule,\n);\nexport type SuiMoveNormalizedModules = Infer<typeof SuiMoveNormalizedModules>;\n\nexport function extractMutableReference(\n  normalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n  return typeof normalizedType === 'object' &&\n    'MutableReference' in normalizedType\n    ? normalizedType.MutableReference\n    : undefined;\n}\n\nexport function extractReference(\n  normalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n  return typeof normalizedType === 'object' && 'Reference' in normalizedType\n    ? normalizedType.Reference\n    : undefined;\n}\n\nexport function extractStructTag(\n  normalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedStructType | undefined {\n  if (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\n    return normalizedType;\n  }\n\n  const ref = extractReference(normalizedType);\n  const mutRef = extractMutableReference(normalizedType);\n\n  if (typeof ref === 'object' && 'Struct' in ref) {\n    return ref;\n  }\n\n  if (typeof mutRef === 'object' && 'Struct' in mutRef) {\n    return mutRef;\n  }\n  return undefined;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  any,\n  array,\n  boolean,\n  literal,\n  number,\n  object,\n  string,\n  union,\n  Infer,\n  nullable,\n  tuple,\n  optional,\n} from 'superstruct';\nimport { SuiAddress } from './common';\nimport { AuthorityName } from './transactions';\n\n/* -------------- Types for the SuiSystemState Rust definition -------------- */\n\nexport const ValidatorMetaData = object({\n  sui_address: SuiAddress,\n  pubkey_bytes: array(number()),\n  network_pubkey_bytes: array(number()),\n  worker_pubkey_bytes: array(number()),\n  proof_of_possession_bytes: array(number()),\n  name: union([string(), array(number())]),\n  description: union([string(), nullable(array(number()))]),\n  image_url: union([string(), nullable(array(number()))]),\n  project_url: union([string(), nullable(array(number()))]),\n  net_address: array(number()),\n  consensus_address: array(number()),\n  worker_address: array(number()),\n  next_epoch_stake: number(),\n  next_epoch_delegation: number(),\n  next_epoch_gas_price: number(),\n  next_epoch_commission_rate: number(),\n});\n\nexport type DelegatedStake = Infer<typeof DelegatedStake>;\nexport type ValidatorMetaData = Infer<typeof ValidatorMetaData>;\nexport type CommitteeInfo = Infer<typeof CommitteeInfo>;\n\n// Staking\n\nexport const Balance = object({\n  value: number(),\n});\n\nexport const StakedSui = object({\n  id: object({\n    id: string(),\n  }),\n  validator_address: SuiAddress,\n  pool_starting_epoch: number(),\n  delegation_request_epoch: number(),\n  principal: Balance,\n  sui_token_lock: union([number(), literal(null)]),\n});\n\nexport const ActiveFields = object({\n  id: object({\n    id: string(),\n  }),\n  staked_sui_id: SuiAddress,\n  principal_sui_amount: number(),\n  pool_tokens: Balance,\n});\n\nexport const ActiveDelegationStatus = object({\n  Active: ActiveFields,\n});\n\nexport const DelegatedStake = object({\n  staked_sui: StakedSui,\n  delegation_status: union([literal('Pending'), ActiveDelegationStatus]),\n});\n\nexport const ParametersFields = object({\n  max_validator_candidate_count: string(),\n  min_validator_stake: string(),\n  storage_gas_price: optional(string()),\n});\n\nexport const Parameters = object({\n  type: string(),\n  fields: ParametersFields,\n});\n\nexport const StakeSubsidyFields = object({\n  balance: object({ value: number() }),\n  current_epoch_amount: number(),\n  epoch_counter: number(),\n});\n\nexport const StakeSubsidy = object({\n  type: string(),\n  fields: StakeSubsidyFields,\n});\n\nexport const SuiSupplyFields = object({\n  value: number(),\n});\n\nexport const ContentsFields = object({\n  id: string(),\n  size: number(),\n  head: object({ vec: array() }),\n  tail: object({ vec: array() }),\n});\n\nexport const ContentsFieldsWithdraw = object({\n  id: string(),\n  size: number(),\n});\n\nexport const Contents = object({\n  type: string(),\n  fields: ContentsFields,\n});\n\nexport const PendingWithdawFields = object({\n  contents: ContentsFieldsWithdraw,\n});\n\nexport const DelegationStakingPoolFields = object({\n  delegation_token_supply: SuiSupplyFields,\n  pending_delegations: ContentsFields,\n  pending_withdraws: PendingWithdawFields,\n  rewards_pool: object({ value: number() }),\n  starting_epoch: number(),\n  sui_balance: number(),\n  validator_address: string(),\n});\n\nexport const DelegationStakingPool = object({\n  type: string(),\n  fields: DelegationStakingPoolFields,\n});\n\nexport const CommitteeInfo = object({\n  epoch: number(),\n  // TODO(cleanup): remove optional after TestNet Wave 2(0.22.0)\n  protocol_version: optional(number()),\n  /* array of (validator public key, stake unit) tuple */\n  committee_info: optional(array(tuple([AuthorityName, number()]))),\n});\n\nexport const SystemParameters = object({\n  min_validator_stake: number(),\n  max_validator_candidate_count: number(),\n  storage_gas_price: optional(number()),\n});\n\nexport const Validator = object({\n  metadata: ValidatorMetaData,\n  voting_power: number(),\n  stake_amount: number(),\n  pending_stake: number(),\n  pending_withdraw: number(),\n  gas_price: number(),\n  delegation_staking_pool: DelegationStakingPoolFields,\n  commission_rate: number(),\n});\n\nexport const ValidatorPair = object({\n  from: SuiAddress,\n  to: SuiAddress,\n});\n\nexport const ValidatorSet = object({\n  validator_stake: number(),\n  delegation_stake: number(),\n  active_validators: array(Validator),\n  pending_validators: array(Validator),\n  pending_removals: array(number()),\n  next_epoch_validators: array(ValidatorMetaData),\n  // TODO: Remove this after 0.28.0 is released\n  pending_delegation_switches: optional(\n    object({ contents: array(ValidatorPair) }),\n  ),\n});\n\nexport const SuiSystemState = object({\n  info: object({ id: string() }),\n  epoch: number(),\n  // TODO(cleanup): remove optional after TestNet Wave 2(0.22.0)\n  protocol_version: optional(number()),\n  validators: ValidatorSet,\n  treasury_cap: SuiSupplyFields,\n  storage_fund: Balance,\n  parameters: SystemParameters,\n  reference_gas_price: number(),\n  validator_report_records: object({ contents: array() }),\n  stake_subsidy: StakeSubsidyFields,\n  safe_mode: boolean(),\n  epoch_start_timestamp_ms: optional(number()),\n});\n\nexport type SuiSystemState = Infer<typeof SuiSystemState>;\n\n/* ---------------- Types for the SuiSystemState Move object ---------------- */\n\nconst MovePendingWithdrawals = object({\n  type: string(),\n  fields: object({\n    contents: object({\n      type: string(),\n      fields: object({\n        id: object({\n          id: string(),\n        }),\n        size: string(),\n      }),\n    }),\n  }),\n});\n\nconst MovePendingDelegations = object({\n  type: string(),\n  fields: object({\n    id: object({\n      id: string(),\n    }),\n    head: nullable(string()),\n    size: string(),\n    tail: nullable(string()),\n  }),\n});\n\nexport const MoveDelegationStakingPoolFields = object({\n  delegation_token_supply: object({\n    type: string(),\n    fields: object({\n      value: string(),\n    }),\n  }),\n  pending_delegations: MovePendingDelegations,\n  pending_withdraws: MovePendingWithdrawals,\n  rewards_pool: string(),\n  starting_epoch: string(),\n  sui_balance: string(),\n  validator_address: string(),\n});\n\nexport type MoveSuiSystemObjectFields = Infer<typeof MoveSuiSystemObjectFields>;\nexport type MoveSuiSystemObject = Infer<typeof MoveSuiSystemObject>;\nexport type MoveActiveValidator = Infer<typeof MoveActiveValidator>;\n\nconst ValidatorReportRecords = object({\n  type: string(),\n  fields: object({\n    contents: array(any()),\n  }),\n});\n\nexport const MoveNextEpochValidatorFields = object({\n  consensus_address: array(number()),\n  name: union([string(), array(number())]),\n  description: optional(union([string(), array(number())])),\n  image_url: optional(union([string(), array(number())])),\n  project_url: optional(union([string(), array(number())])),\n  net_address: array(number()),\n  network_pubkey_bytes: array(number()),\n  next_epoch_commission_rate: string(),\n  next_epoch_delegation: string(),\n  next_epoch_gas_price: string(),\n  next_epoch_stake: string(),\n  proof_of_possession: array(number()),\n  pubkey_bytes: array(number()),\n  sui_address: string(),\n  worker_address: array(number()),\n  worker_pubkey_bytes: array(number()),\n});\n\nconst MoveNextEpochValidator = object({\n  type: string(),\n  fields: MoveNextEpochValidatorFields,\n});\n\nexport const MoveActiveValidatorFields = object({\n  commission_rate: string(),\n  delegation_staking_pool: object({\n    type: string(),\n    fields: MoveDelegationStakingPoolFields,\n  }),\n  gas_price: string(),\n  metadata: MoveNextEpochValidator,\n  pending_stake: string(),\n  pending_withdraw: string(),\n  stake_amount: string(),\n  voting_power: nullable(string()),\n});\n\nexport const MoveActiveValidator = object({\n  type: string(),\n  fields: MoveActiveValidatorFields,\n});\n\nexport const MoveValidatorsFieldsClass = object({\n  active_validators: array(MoveActiveValidator),\n  next_epoch_validators: array(MoveNextEpochValidator),\n  // TODO: Remove this after 0.28.0 is released\n  pending_delegation_switches: optional(ValidatorReportRecords),\n  pending_removals: array(number()),\n  pending_validators: array(number()),\n  quorum_stake_threshold: optional(string()),\n  total_delegation_stake: string(),\n  total_validator_stake: string(),\n});\n\nexport const MoveSuiSystemObjectFields = object({\n  chain_id: optional(number()),\n  epoch: string(),\n  // TODO(cleanup): remove optional after TestNet Wave 2(0.22.0)\n  protocol_version: optional(string()),\n  // TODO(cleanup): remove optional after TestNet Wave 2(0.22.0)\n  epoch_start_timestamp_ms: optional(string()),\n  safe_mode: boolean(),\n  id: object({\n    id: string(),\n  }),\n  parameters: Parameters,\n  reference_gas_price: string(),\n  stake_subsidy: object({\n    type: string(),\n    fields: object({\n      balance: string(),\n      current_epoch_amount: string(),\n      epoch_counter: string(),\n    }),\n  }),\n  storage_fund: string(),\n  sui_supply: object({\n    type: string(),\n    fields: object({\n      value: string(),\n    }),\n  }),\n  validator_report_records: ValidatorReportRecords,\n  validators: object({\n    type: string(),\n    fields: MoveValidatorsFieldsClass,\n  }),\n});\n\nexport const MoveSuiSystemObject = object({\n  dataType: literal('moveObject'),\n  type: string(),\n  has_public_transfer: boolean(),\n  fields: MoveSuiSystemObjectFields,\n});\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  array,\n  Infer,\n  literal,\n  nullable,\n  number,\n  object,\n  optional,\n  string,\n  union,\n} from 'superstruct';\nimport { ObjectId, TransactionDigest } from './common';\n\nexport const CoinStruct = object({\n  coinType: string(),\n  coinObjectId: ObjectId,\n  version: number(),\n  digest: TransactionDigest,\n  balance: number(),\n  lockedUntilEpoch: nullable(number()),\n  // TODO: remove optional when it is supported from all deployed networks\n  previousTransaction: optional(TransactionDigest),\n});\n\nexport type CoinStruct = Infer<typeof CoinStruct>;\n\nexport const PaginatedCoins = object({\n  data: array(CoinStruct),\n  nextCursor: union([ObjectId, literal(null)]),\n});\n\nexport type PaginatedCoins = Infer<typeof PaginatedCoins>;\n\nexport const CoinBalance = object({\n  coinType: string(),\n  coinObjectCount: number(),\n  totalBalance: number(),\n  lockedBalance: object({\n    epochId: optional(number()),\n    number: optional(number()),\n  }),\n});\n\nexport type CoinBalance = Infer<typeof CoinBalance>;\n\nexport const CoinSupply = object({\n  value: number(),\n});\n\nexport type CoinSupply = Infer<typeof CoinSupply>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  array,\n  Infer,\n  literal,\n  number,\n  object,\n  string,\n  union,\n  tuple,\n  optional,\n} from 'superstruct';\n\nimport { TransactionDigest, TransactionEffectsDigest } from './common';\n\nexport const GasCostSummary = object({\n  computation_cost: number(),\n  storage_cost: number(),\n  storage_rebate: number(),\n});\nexport type GasCostSummary = Infer<typeof GasCostSummary>;\n\nexport const CheckPointContentsDigest = string();\nexport type CheckPointContentsDigest = Infer<typeof CheckPointContentsDigest>;\n\nexport const CheckpointDigest = string();\nexport type CheckpointDigest = Infer<typeof CheckpointDigest>;\n\nexport const EndOfEpochData = object({\n  next_epoch_committee: array(tuple([string(), number()])),\n  next_epoch_protocol_version: number(),\n  // Need to remove optional after we hit the next network version\n  root_state_digest: optional(array(number())),\n});\nexport type EndOfEpochData = Infer<typeof EndOfEpochData>;\n\nexport const CheckpointSummary = object({\n  epoch: number(),\n  sequence_number: number(),\n  network_total_transactions: number(),\n  content_digest: CheckPointContentsDigest,\n  previous_digest: union([CheckpointDigest, literal(null)]),\n  epoch_rolling_gas_cost_summary: GasCostSummary,\n  end_of_epoch_data: union([EndOfEpochData, literal(null)]),\n  timestamp_ms: union([number(), literal(null)]),\n  version_specific_data: optional(array(number())),\n});\nexport type CheckpointSummary = Infer<typeof CheckpointSummary>;\n\nexport const ExecutionDigests = object({\n  transaction: TransactionDigest,\n  effects: TransactionEffectsDigest,\n});\n\nexport const CheckpointContents = object({\n  transactions: array(ExecutionDigests),\n  user_signatures: array(string()),\n});\nexport type CheckpointContents = Infer<typeof CheckpointContents>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  any,\n  array,\n  Infer,\n  literal,\n  number,\n  object,\n  string,\n  union,\n} from 'superstruct';\nimport { ObjectId } from './common';\n\nexport const DynamicFieldType = union([\n  literal('DynamicField'),\n  literal('DynamicObject'),\n]);\nexport type DynamicFieldType = Infer<typeof DynamicFieldType>;\n\nexport const DynamicFieldName = object({\n  type: string(),\n  value: any(),\n});\nexport type DynamicFieldName = Infer<typeof DynamicFieldName>;\n\nexport const DynamicFieldInfo = object({\n  name: union([DynamicFieldName, string()]),\n  type: DynamicFieldType,\n  objectType: string(),\n  objectId: ObjectId,\n  version: number(),\n  digest: string(),\n});\nexport type DynamicFieldInfo = Infer<typeof DynamicFieldInfo>;\n\nexport const DynamicFieldPage = object({\n  data: array(DynamicFieldInfo),\n  nextCursor: union([ObjectId, literal(null)]),\n});\nexport type DynamicFieldPage = Infer<typeof DynamicFieldPage>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { is } from 'superstruct';\nimport {\n  SuiEventFilter,\n  SuiEventEnvelope,\n  SubscriptionId,\n  SubscriptionEvent,\n} from '../types';\nimport { Client as WsRpcClient } from 'rpc-websockets';\n\nexport const getWebsocketUrl = (httpUrl: string, port?: number): string => {\n  const url = new URL(httpUrl);\n  url.protocol = url.protocol.replace('http', 'ws');\n  if (port) {\n    url.port = port.toString();\n  }\n  return url.toString();\n};\n\nenum ConnectionState {\n  NotConnected,\n  Connecting,\n  Connected,\n}\n\ntype JsonRpcMethodMessage<T> = {\n  jsonrpc: '2.0';\n  method: string;\n  params: T;\n};\n\ntype FilterSubHandler = {\n  id: SubscriptionId;\n  onMessage: (event: SuiEventEnvelope) => void;\n  filter: SuiEventFilter;\n};\n\ntype SubscriptionData = {\n  filter: SuiEventFilter;\n  onMessage: (event: SuiEventEnvelope) => void;\n};\n\ntype MinimumSubscriptionMessage = {\n  subscription: SubscriptionId;\n  result: object;\n};\n\nconst isMinimumSubscriptionMessage = (\n  msg: any,\n): msg is MinimumSubscriptionMessage =>\n  msg &&\n  'subscription' in msg &&\n  typeof msg['subscription'] === 'number' &&\n  'result' in msg &&\n  typeof msg['result'] === 'object';\n\n/**\n * Configuration options for the websocket connection\n */\nexport type WebsocketClientOptions = {\n  /**\n   * Milliseconds before timing out while initially connecting\n   */\n  connectTimeout: number;\n  /**\n   * Milliseconds before timing out while calling an RPC method\n   */\n  callTimeout: number;\n  /**\n   * Milliseconds between attempts to connect\n   */\n  reconnectInterval: number;\n  /**\n   * Maximum number of times to try connecting before giving up\n   */\n  maxReconnects: number;\n};\n\nexport const DEFAULT_CLIENT_OPTIONS: WebsocketClientOptions = {\n  connectTimeout: 15000,\n  callTimeout: 30000,\n  reconnectInterval: 3000,\n  maxReconnects: 5,\n};\n\nconst SUBSCRIBE_EVENT_METHOD = 'sui_subscribeEvent';\nconst UNSUBSCRIBE_EVENT_METHOD = 'sui_unsubscribeEvent';\n\n/**\n * Interface with a Sui node's websocket capabilities\n */\nexport class WebsocketClient {\n  protected rpcClient: WsRpcClient;\n  protected connectionState: ConnectionState = ConnectionState.NotConnected;\n  protected connectionTimeout: number | null = null;\n  protected isSetup: boolean = false;\n  private connectionPromise: Promise<void> | null = null;\n\n  protected eventSubscriptions: Map<SubscriptionId, SubscriptionData> =\n    new Map();\n\n  /**\n   * @param endpoint Sui node endpoint to connect to (accepts websocket & http)\n   * @param skipValidation If `true`, the rpc client will not check if the responses\n   * from the RPC server conform to the schema defined in the TypeScript SDK\n   * @param options Configuration options, such as timeouts & connection behavior\n   */\n  constructor(\n    public endpoint: string,\n    public skipValidation: boolean,\n    public options: WebsocketClientOptions = DEFAULT_CLIENT_OPTIONS,\n  ) {\n    if (this.endpoint.startsWith('http'))\n      this.endpoint = getWebsocketUrl(this.endpoint);\n\n    this.rpcClient = new WsRpcClient(this.endpoint, {\n      reconnect_interval: this.options.reconnectInterval,\n      max_reconnects: this.options.maxReconnects,\n      autoconnect: false,\n    });\n  }\n\n  private setupSocket() {\n    if (this.isSetup) return;\n\n    this.rpcClient.on('open', () => {\n      if (this.connectionTimeout) {\n        clearTimeout(this.connectionTimeout);\n        this.connectionTimeout = null;\n      }\n      this.connectionState = ConnectionState.Connected;\n      // underlying websocket is private, but we need it\n      // to access messages sent by the node\n      (this.rpcClient as any).socket.on(\n        'message',\n        this.onSocketMessage.bind(this),\n      );\n    });\n\n    this.rpcClient.on('close', () => {\n      this.connectionState = ConnectionState.NotConnected;\n    });\n\n    this.rpcClient.on('error', console.error);\n    this.isSetup = true;\n  }\n\n  // called for every message received from the node over websocket\n  private onSocketMessage(rawMessage: string): void {\n    const msg: JsonRpcMethodMessage<object> = JSON.parse(rawMessage);\n\n    const params = msg.params;\n    if (msg.method === SUBSCRIBE_EVENT_METHOD) {\n      // even with validation off, we must ensure a few properties at minimum in a message\n      if (this.skipValidation && isMinimumSubscriptionMessage(params)) {\n        const sub = this.eventSubscriptions.get(params.subscription);\n        if (sub)\n          // cast to bypass type validation of 'result'\n          (sub.onMessage as (m: any) => void)(params.result);\n      } else if (is(params, SubscriptionEvent)) {\n        // call any registered handler for the message's subscription\n        const sub = this.eventSubscriptions.get(params.subscription);\n        if (sub) sub.onMessage(params.result);\n      }\n    }\n  }\n\n  private async connect(): Promise<void> {\n    // if the last attempt to connect hasn't finished, wait on it\n    if (this.connectionPromise) return this.connectionPromise;\n    if (this.connectionState === ConnectionState.Connected)\n      return Promise.resolve();\n\n    this.setupSocket();\n    this.rpcClient.connect();\n    this.connectionState = ConnectionState.Connecting;\n\n    this.connectionPromise = new Promise<void>((resolve, reject) => {\n      this.connectionTimeout = setTimeout(\n        () => reject(new Error('timeout')),\n        this.options.connectTimeout,\n      ) as any as number;\n\n      this.rpcClient.once('open', () => {\n        this.refreshSubscriptions();\n        this.connectionPromise = null;\n        resolve();\n      });\n      this.rpcClient.once('error', (err) => {\n        this.connectionPromise = null;\n        reject(err);\n      });\n    });\n    return this.connectionPromise;\n  }\n\n  /**\n    call only upon reconnecting to a node over websocket.\n    calling multiple times on the same connection will result\n    in multiple message handlers firing each time\n  */\n  private async refreshSubscriptions() {\n    if (this.eventSubscriptions.size === 0) return;\n\n    try {\n      let newSubs: Map<SubscriptionId, SubscriptionData> = new Map();\n\n      let newSubsArr: (FilterSubHandler | null)[] = await Promise.all(\n        Array.from(this.eventSubscriptions.values()).map(async (sub) => {\n          const onMessage = sub.onMessage;\n          const filter = sub.filter;\n          if (!filter || !onMessage) return Promise.resolve(null);\n          /**\n            re-subscribe to the same filter & replace the subscription id.\n            we skip calling sui_unsubscribeEvent for the old sub id, because:\n              * we assume this is being called after a reconnection\n              * the node keys subscriptions with a combo of connection id & subscription id\n          */\n          const id = await this.subscribeEvent(filter, onMessage);\n          return { id, onMessage, filter };\n        }),\n      );\n\n      newSubsArr.forEach((entry) => {\n        if (entry === null) return;\n        const filter = entry.filter;\n        const onMessage = entry.onMessage;\n        newSubs.set(entry.id, { filter, onMessage });\n      });\n\n      this.eventSubscriptions = newSubs;\n    } catch (err) {\n      throw new Error(`error refreshing event subscriptions: ${err}`);\n    }\n  }\n\n  async subscribeEvent(\n    filter: SuiEventFilter,\n    onMessage: (event: SuiEventEnvelope) => void,\n  ): Promise<SubscriptionId> {\n    try {\n      // lazily connect to websocket to avoid spamming node with connections\n      if (this.connectionState !== ConnectionState.Connected)\n        await this.connect();\n\n      let subId = (await this.rpcClient.call(\n        SUBSCRIBE_EVENT_METHOD,\n        [filter],\n        this.options.callTimeout,\n      )) as SubscriptionId;\n\n      this.eventSubscriptions.set(subId, { filter, onMessage });\n      return subId;\n    } catch (err) {\n      throw new Error(\n        `Error subscribing to event: ${JSON.stringify(\n          err,\n          null,\n          2,\n        )}, filter: ${JSON.stringify(filter)}`,\n      );\n    }\n  }\n\n  async unsubscribeEvent(id: SubscriptionId): Promise<boolean> {\n    try {\n      if (this.connectionState !== ConnectionState.Connected)\n        await this.connect();\n\n      let removedOnNode = (await this.rpcClient.call(\n        UNSUBSCRIBE_EVENT_METHOD,\n        [id],\n        this.options.callTimeout,\n      )) as boolean;\n      /**\n        if the connection closes before unsubscribe is called,\n        the remote node will remove us from its subscribers list without notification,\n        leading to removedOnNode being false. but if we still had a record of it locally,\n        we should still report that it was deleted successfully\n      */\n      return this.eventSubscriptions.delete(id) || removedOnNode;\n    } catch (err) {\n      throw new Error(\n        `Error unsubscribing from event: ${err}, subscription: ${id}`,\n      );\n    }\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport fetch from 'cross-fetch';\n\nimport { FaucetResponse, SuiAddress } from '../types';\nimport { HttpHeaders } from './client';\n\nexport class FaucetRateLimitError extends Error {}\n\nexport async function requestSuiFromFaucet(\n  endpoint: string,\n  recipient: SuiAddress,\n  httpHeaders?: HttpHeaders,\n): Promise<FaucetResponse> {\n  const res = await fetch(endpoint, {\n    method: 'POST',\n    body: JSON.stringify({\n      FixedAmountRequest: {\n        recipient,\n      },\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n      ...(httpHeaders || {}),\n    },\n  });\n\n  if (res.status === 429) {\n    throw new FaucetRateLimitError(\n      `Too many requests from this client have been sent to the faucet. Please retry later`,\n    );\n  }\n  let parsed;\n  try {\n    parsed = await res.json();\n  } catch (e) {\n    throw new Error(\n      `Ecountered error when parsing response from faucet, error: ${e}, status ${res.status}, response ${res}`,\n    );\n  }\n  if (parsed.error) {\n    throw new Error(`Faucet returns error: ${parsed.error}`);\n  }\n  return parsed;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Provider } from './provider';\nimport { ErrorResponse, HttpHeaders, JsonRpcClient } from '../rpc/client';\nimport {\n  Coin,\n  ExecuteTransactionRequestType,\n  GatewayTxSeqNumber,\n  getObjectReference,\n  GetTxnDigestsResponse,\n  ObjectId,\n  PaginatedTransactionDigests,\n  SubscriptionId,\n  SuiAddress,\n  SuiEventEnvelope,\n  SuiEventFilter,\n  SuiExecuteTransactionResponse,\n  SuiMoveFunctionArgTypes,\n  SuiMoveNormalizedFunction,\n  SuiMoveNormalizedModule,\n  SuiMoveNormalizedModules,\n  SuiMoveNormalizedStruct,\n  SuiObjectInfo,\n  SuiObjectRef,\n  SuiTransactionResponse,\n  TransactionDigest,\n  TransactionQuery,\n  SUI_TYPE_ARG,\n  RpcApiVersion,\n  parseVersionFromString,\n  EventQuery,\n  EventId,\n  PaginatedEvents,\n  FaucetResponse,\n  Order,\n  TransactionEffects,\n  DevInspectResults,\n  CoinMetadata,\n  isValidTransactionDigest,\n  isValidSuiAddress,\n  isValidSuiObjectId,\n  normalizeSuiAddress,\n  normalizeSuiObjectId,\n  CoinMetadataStruct,\n  PaginatedCoins,\n  GetObjectDataResponse,\n  GetOwnedObjectsResponse,\n  DelegatedStake,\n  ValidatorMetaData,\n  SuiSystemState,\n  CoinBalance,\n  CoinSupply,\n  CheckpointSummary,\n  CheckpointContents,\n  CheckpointDigest,\n  CheckPointContentsDigest,\n  CommitteeInfo,\n} from '../types';\nimport { DynamicFieldName, DynamicFieldPage } from '../types/dynamic_fields';\nimport {\n  DEFAULT_CLIENT_OPTIONS,\n  WebsocketClient,\n  WebsocketClientOptions,\n} from '../rpc/websocket-client';\nimport { requestSuiFromFaucet } from '../rpc/faucet-client';\nimport { any, is, number, array } from 'superstruct';\nimport { UnserializedSignableTransaction } from '../signers/txn-data-serializers/txn-data-serializer';\nimport { LocalTxnDataSerializer } from '../signers/txn-data-serializers/local-txn-data-serializer';\nimport { toB64 } from '@mysten/bcs';\nimport { SerializedSignature } from '../cryptography/signature';\nimport { Connection, devnetConnection } from '../rpc/connection';\n\nexport const TARGETED_RPC_VERSION = '0.27.0';\n\n/**\n * Configuration options for the JsonRpcProvider. If the value of a field is not provided,\n * value in `DEFAULT_OPTIONS` for that field will be used\n */\nexport type RpcProviderOptions = {\n  /**\n   * Default to `true`. If set to `false`, the rpc\n   * client will throw an error if the responses from the RPC server do not\n   * conform to the schema defined in the TypeScript SDK. If set to `true`, the\n   * rpc client will log the mismatch as a warning message instead of throwing an\n   * error. The mismatches often happen when the SDK is in a different version than\n   * the RPC server. Skipping the validation can maximize\n   * the version compatibility of the SDK, as not all the schema\n   * changes in the RPC response will affect the caller, but the caller needs to\n   * understand that the data may not match the TypeSrcript definitions.\n   */\n  skipDataValidation?: boolean;\n  /**\n   * Configuration options for the websocket connection\n   * TODO: Move to connection.\n   */\n  socketOptions?: WebsocketClientOptions;\n  /**\n   * Cache timeout in seconds for the RPC API Version\n   */\n  versionCacheTimeoutInSeconds?: number;\n\n  /** Allow defining a custom RPC client to use */\n  rpcClient?: JsonRpcClient;\n\n  /** Allow defining a custom websocket client to use */\n  websocketClient?: WebsocketClient;\n};\n\nconst DEFAULT_OPTIONS: RpcProviderOptions = {\n  skipDataValidation: true,\n  socketOptions: DEFAULT_CLIENT_OPTIONS,\n  versionCacheTimeoutInSeconds: 600,\n};\n\nexport class JsonRpcProvider extends Provider {\n  public connection: Connection;\n  protected client: JsonRpcClient;\n  protected wsClient: WebsocketClient;\n  private rpcApiVersion: RpcApiVersion | undefined;\n  private cacheExpiry: number | undefined;\n  /**\n   * Establish a connection to a Sui RPC endpoint\n   *\n   * @param connection The `Connection` object containing configuration for the network.\n   * @param options configuration options for the provider\n   */\n  constructor(\n    // TODO: Probably remove the default endpoint here:\n    connection: Connection = devnetConnection,\n    public options: RpcProviderOptions = DEFAULT_OPTIONS,\n  ) {\n    super();\n\n    this.connection = connection;\n\n    const opts = { ...DEFAULT_OPTIONS, ...options };\n    this.options = opts;\n    // TODO: add header for websocket request\n    this.client = opts.rpcClient ?? new JsonRpcClient(this.connection.fullnode);\n\n    this.wsClient =\n      opts.websocketClient ??\n      new WebsocketClient(\n        this.connection.websocket,\n        opts.skipDataValidation!,\n        opts.socketOptions,\n      );\n  }\n\n  async getRpcApiVersion(): Promise<RpcApiVersion | undefined> {\n    if (\n      this.rpcApiVersion &&\n      this.cacheExpiry &&\n      this.cacheExpiry <= Date.now()\n    ) {\n      return this.rpcApiVersion;\n    }\n    try {\n      const resp = await this.client.requestWithType(\n        'rpc.discover',\n        [],\n        any(),\n        this.options.skipDataValidation,\n      );\n      this.rpcApiVersion = parseVersionFromString(resp.info.version);\n      this.cacheExpiry =\n        // Date.now() is in milliseconds, but the timeout is in seconds\n        Date.now() + (this.options.versionCacheTimeoutInSeconds ?? 0) * 1000;\n      return this.rpcApiVersion;\n    } catch (err) {\n      console.warn('Error fetching version number of the RPC API', err);\n    }\n    return undefined;\n  }\n\n  async requestSuiFromFaucet(\n    recipient: SuiAddress,\n    httpHeaders?: HttpHeaders,\n  ): Promise<FaucetResponse> {\n    if (!this.connection.faucet) {\n      throw new Error('Faucet URL is not specified');\n    }\n    return requestSuiFromFaucet(this.connection.faucet, recipient, httpHeaders);\n  }\n\n  // Coins\n  async getCoins(\n    owner: SuiAddress,\n    coinType: string | null = null,\n    cursor: ObjectId | null = null,\n    limit: number | null = null,\n  ): Promise<PaginatedCoins> {\n    try {\n      if (!owner || !isValidSuiAddress(normalizeSuiAddress(owner))) {\n        throw new Error('Invalid Sui address');\n      }\n      return await this.client.requestWithType(\n        'sui_getCoins',\n        [owner, coinType, cursor, limit],\n        PaginatedCoins,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(`Error getting coins for owner ${owner}: ${err}`);\n    }\n  }\n\n  async getAllCoins(\n    owner: SuiAddress,\n    cursor: ObjectId | null = null,\n    limit: number | null = null,\n  ): Promise<PaginatedCoins> {\n    try {\n      if (!owner || !isValidSuiAddress(normalizeSuiAddress(owner))) {\n        throw new Error('Invalid Sui address');\n      }\n      return await this.client.requestWithType(\n        'sui_getAllCoins',\n        [owner, cursor, limit],\n        PaginatedCoins,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(`Error getting all coins for owner ${owner}: ${err}`);\n    }\n  }\n\n  async getBalance(\n    owner: SuiAddress,\n    coinType: string | null = null,\n  ): Promise<CoinBalance> {\n    try {\n      if (!owner || !isValidSuiAddress(normalizeSuiAddress(owner))) {\n        throw new Error('Invalid Sui address');\n      }\n      return await this.client.requestWithType(\n        'sui_getBalance',\n        [owner, coinType],\n        CoinBalance,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error getting balance for coin type ${coinType} for owner ${owner}: ${err}`,\n      );\n    }\n  }\n\n  async getAllBalances(owner: SuiAddress): Promise<CoinBalance[]> {\n    try {\n      if (!owner || !isValidSuiAddress(normalizeSuiAddress(owner))) {\n        throw new Error('Invalid Sui address');\n      }\n      return await this.client.requestWithType(\n        'sui_getAllBalances',\n        [owner],\n        array(CoinBalance),\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(`Error getting all balances for owner ${owner}: ${err}`);\n    }\n  }\n\n  async getCoinMetadata(coinType: string): Promise<CoinMetadata> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getCoinMetadata',\n        [coinType],\n        CoinMetadataStruct,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(`Error fetching CoinMetadata for ${coinType}: ${err}`);\n    }\n  }\n\n  async getTotalSupply(coinType: string): Promise<CoinSupply> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getTotalSupply',\n        [coinType],\n        CoinSupply,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching total supply for Coin type ${coinType}: ${err}`,\n      );\n    }\n  }\n\n  // RPC endpoint\n  async call(endpoint: string, params: Array<any>): Promise<any> {\n    try {\n      const response = await this.client.request(endpoint, params);\n      if (is(response, ErrorResponse)) {\n        throw new Error(`RPC Error: ${response.error.message}`);\n      }\n      return response.result;\n    } catch (err) {\n      throw new Error(`Error calling RPC endpoint ${endpoint}: ${err}`);\n    }\n  }\n\n  // Move info\n  async getMoveFunctionArgTypes(\n    packageId: string,\n    moduleName: string,\n    functionName: string,\n  ): Promise<SuiMoveFunctionArgTypes> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getMoveFunctionArgTypes',\n        [packageId, moduleName, functionName],\n        SuiMoveFunctionArgTypes,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching Move function arg types with package object ID: ${packageId}, module name: ${moduleName}, function name: ${functionName}`,\n      );\n    }\n  }\n\n  async getNormalizedMoveModulesByPackage(\n    packageId: string,\n  ): Promise<SuiMoveNormalizedModules> {\n    // TODO: Add caching since package object does not change\n    try {\n      return await this.client.requestWithType(\n        'sui_getNormalizedMoveModulesByPackage',\n        [packageId],\n        SuiMoveNormalizedModules,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching package: ${err} for package ${packageId}`,\n      );\n    }\n  }\n\n  async getNormalizedMoveModule(\n    packageId: string,\n    moduleName: string,\n  ): Promise<SuiMoveNormalizedModule> {\n    // TODO: Add caching since package object does not change\n    try {\n      return await this.client.requestWithType(\n        'sui_getNormalizedMoveModule',\n        [packageId, moduleName],\n        SuiMoveNormalizedModule,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching module: ${err} for package ${packageId}, module ${moduleName}`,\n      );\n    }\n  }\n\n  async getNormalizedMoveFunction(\n    packageId: string,\n    moduleName: string,\n    functionName: string,\n  ): Promise<SuiMoveNormalizedFunction> {\n    // TODO: Add caching since package object does not change\n    try {\n      return await this.client.requestWithType(\n        'sui_getNormalizedMoveFunction',\n        [packageId, moduleName, functionName],\n        SuiMoveNormalizedFunction,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching function: ${err} for package ${packageId}, module ${moduleName} and function ${functionName}`,\n      );\n    }\n  }\n\n  async getNormalizedMoveStruct(\n    packageId: string,\n    moduleName: string,\n    structName: string,\n  ): Promise<SuiMoveNormalizedStruct> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getNormalizedMoveStruct',\n        [packageId, moduleName, structName],\n        SuiMoveNormalizedStruct,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching struct: ${err} for package ${packageId}, module ${moduleName} and struct ${structName}`,\n      );\n    }\n  }\n\n  // Objects\n  async getObjectsOwnedByAddress(\n    address: SuiAddress,\n  ): Promise<SuiObjectInfo[]> {\n    try {\n      if (!address || !isValidSuiAddress(normalizeSuiAddress(address))) {\n        throw new Error('Invalid Sui address');\n      }\n      return await this.client.requestWithType(\n        'sui_getObjectsOwnedByAddress',\n        [address],\n        GetOwnedObjectsResponse,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching owned object: ${err} for address ${address}`,\n      );\n    }\n  }\n\n  async getGasObjectsOwnedByAddress(\n    address: SuiAddress,\n  ): Promise<SuiObjectInfo[]> {\n    const objects = await this.getObjectsOwnedByAddress(address);\n    return objects.filter((obj: SuiObjectInfo) => Coin.isSUI(obj));\n  }\n\n  /**\n   * @deprecated The method should not be used\n   */\n  async getCoinBalancesOwnedByAddress(\n    address: SuiAddress,\n    typeArg?: string,\n  ): Promise<GetObjectDataResponse[]> {\n    const objects = await this.getObjectsOwnedByAddress(address);\n    const coinIds = objects\n      .filter(\n        (obj: SuiObjectInfo) =>\n          Coin.isCoin(obj) &&\n          (typeArg === undefined || typeArg === Coin.getCoinTypeArg(obj)),\n      )\n      .map((c) => c.objectId);\n\n    return await this.getObjectBatch(coinIds);\n  }\n\n  async selectCoinsWithBalanceGreaterThanOrEqual(\n    address: SuiAddress,\n    amount: bigint,\n    typeArg: string = SUI_TYPE_ARG,\n    exclude: ObjectId[] = [],\n  ): Promise<GetObjectDataResponse[]> {\n    const coinsStruct = await this.getCoins(address, typeArg);\n    const coinIds = coinsStruct.data.map((c) => c.coinObjectId);\n    const coins = await this.getObjectBatch(coinIds);\n    return (await Coin.selectCoinsWithBalanceGreaterThanOrEqual(\n      coins,\n      amount,\n      exclude,\n    )) as GetObjectDataResponse[];\n  }\n\n  async selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\n    address: SuiAddress,\n    amount: bigint,\n    typeArg: string = SUI_TYPE_ARG,\n    exclude: ObjectId[] = [],\n  ): Promise<GetObjectDataResponse[]> {\n    const coinsStruct = await this.getCoins(address, typeArg);\n    const coinIds = coinsStruct.data.map((c) => c.coinObjectId);\n    const coins = await this.getObjectBatch(coinIds);\n    return (await Coin.selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\n      coins,\n      amount,\n      exclude,\n    )) as GetObjectDataResponse[];\n  }\n\n  async getObject(objectId: ObjectId): Promise<GetObjectDataResponse> {\n    try {\n      if (!objectId || !isValidSuiObjectId(normalizeSuiObjectId(objectId))) {\n        throw new Error('Invalid Sui Object id');\n      }\n      return await this.client.requestWithType(\n        'sui_getObject',\n        [objectId],\n        GetObjectDataResponse,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(`Error fetching object info: ${err} for id ${objectId}`);\n    }\n  }\n\n  async getObjectRef(objectId: ObjectId): Promise<SuiObjectRef | undefined> {\n    const resp = await this.getObject(objectId);\n    return getObjectReference(resp);\n  }\n\n  async getObjectBatch(\n    objectIds: ObjectId[],\n  ): Promise<GetObjectDataResponse[]> {\n    try {\n      const requests = objectIds.map((id) => {\n        if (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n          throw new Error(`Invalid Sui Object id ${id}`);\n        }\n        return {\n          method: 'sui_getObject',\n          args: [id],\n        };\n      });\n      return await this.client.batchRequestWithType(\n        requests,\n        GetObjectDataResponse,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching object info: ${err} for ids [${objectIds}]`,\n      );\n    }\n  }\n\n  // Transactions\n  async getTransactions(\n    query: TransactionQuery,\n    cursor: TransactionDigest | null = null,\n    limit: number | null = null,\n    order: Order = 'descending',\n  ): Promise<PaginatedTransactionDigests> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getTransactions',\n        [query, cursor, limit, order === 'descending'],\n        PaginatedTransactionDigests,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error getting transactions for query: ${err} for query ${query}`,\n      );\n    }\n  }\n\n  async getTransactionsForObject(\n    objectID: ObjectId,\n    descendingOrder: boolean = true,\n  ): Promise<GetTxnDigestsResponse> {\n    const requests = [\n      {\n        method: 'sui_getTransactions',\n        args: [{ InputObject: objectID }, null, null, descendingOrder],\n      },\n      {\n        method: 'sui_getTransactions',\n        args: [{ MutatedObject: objectID }, null, null, descendingOrder],\n      },\n    ];\n\n    try {\n      if (!objectID || !isValidSuiObjectId(normalizeSuiObjectId(objectID))) {\n        throw new Error('Invalid Sui Object id');\n      }\n      const results = await this.client.batchRequestWithType(\n        requests,\n        PaginatedTransactionDigests,\n        this.options.skipDataValidation,\n      );\n      return [...results[0].data, ...results[1].data];\n    } catch (err) {\n      throw new Error(\n        `Error getting transactions for object: ${err} for id ${objectID}`,\n      );\n    }\n  }\n\n  async getTransactionsForAddress(\n    addressID: SuiAddress,\n    descendingOrder: boolean = true,\n  ): Promise<GetTxnDigestsResponse> {\n    const requests = [\n      {\n        method: 'sui_getTransactions',\n        args: [{ ToAddress: addressID }, null, null, descendingOrder],\n      },\n      {\n        method: 'sui_getTransactions',\n        args: [{ FromAddress: addressID }, null, null, descendingOrder],\n      },\n    ];\n    try {\n      if (!addressID || !isValidSuiAddress(normalizeSuiAddress(addressID))) {\n        throw new Error('Invalid Sui address');\n      }\n      const results = await this.client.batchRequestWithType(\n        requests,\n        PaginatedTransactionDigests,\n        this.options.skipDataValidation,\n      );\n      return [...results[0].data, ...results[1].data];\n    } catch (err) {\n      throw new Error(\n        `Error getting transactions for address: ${err} for id ${addressID}`,\n      );\n    }\n  }\n\n  async getTransactionWithEffects(\n    digest: TransactionDigest,\n  ): Promise<SuiTransactionResponse> {\n    try {\n      if (!isValidTransactionDigest(digest)) {\n        throw new Error('Invalid Transaction digest');\n      }\n      const resp = await this.client.requestWithType(\n        'sui_getTransaction',\n        [digest],\n        SuiTransactionResponse,\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(\n        `Error getting transaction with effects: ${err} for digest ${digest}`,\n      );\n    }\n  }\n\n  async getTransactionWithEffectsBatch(\n    digests: TransactionDigest[],\n  ): Promise<SuiTransactionResponse[]> {\n    try {\n      const requests = digests.map((d) => {\n        if (!isValidTransactionDigest(d)) {\n          throw new Error(`Invalid Transaction digest ${d}`);\n        }\n        return {\n          method: 'sui_getTransaction',\n          args: [d],\n        };\n      });\n      return await this.client.batchRequestWithType(\n        requests,\n        SuiTransactionResponse,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error getting transaction effects: ${err} for digests [${digests}]`,\n      );\n    }\n  }\n\n  async executeTransaction(\n    txnBytes: Uint8Array | string,\n    signature: SerializedSignature,\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert',\n  ): Promise<SuiExecuteTransactionResponse> {\n    try {\n      return await this.client.requestWithType(\n        'sui_executeTransactionSerializedSig',\n        [\n          typeof txnBytes === 'string' ? txnBytes : toB64(txnBytes),\n          signature,\n          requestType,\n        ],\n        SuiExecuteTransactionResponse,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(`Error executing transaction with request type: ${err}`);\n    }\n  }\n\n  async getTotalTransactionNumber(): Promise<number> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_getTotalTransactionNumber',\n        [],\n        number(),\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(`Error fetching total transaction number: ${err}`);\n    }\n  }\n\n  async getTransactionDigestsInRange(\n    start: GatewayTxSeqNumber,\n    end: GatewayTxSeqNumber,\n  ): Promise<GetTxnDigestsResponse> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getTransactionsInRange',\n        [start, end],\n        GetTxnDigestsResponse,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error fetching transaction digests in range: ${err} for range ${start}-${end}`,\n      );\n    }\n  }\n\n  // Governance\n  async getReferenceGasPrice(): Promise<number> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getReferenceGasPrice',\n        [],\n        number(),\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(`Error getting the reference gas price ${err}`);\n    }\n  }\n\n  async getDelegatedStakes(address: SuiAddress): Promise<DelegatedStake[]> {\n    try {\n      if (!address || !isValidSuiAddress(normalizeSuiAddress(address))) {\n        throw new Error('Invalid Sui address');\n      }\n      const resp = await this.client.requestWithType(\n        'sui_getDelegatedStakes',\n        [address],\n        array(DelegatedStake),\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(`Error in getDelegatedStake: ${err}`);\n    }\n  }\n\n  async getValidators(): Promise<ValidatorMetaData[]> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_getValidators',\n        [],\n        array(ValidatorMetaData),\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(`Error in getValidators: ${err}`);\n    }\n  }\n\n  async getSuiSystemState(): Promise<SuiSystemState> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_getSuiSystemState',\n        [],\n        SuiSystemState,\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(`Error in getSuiSystemState: ${err}`);\n    }\n  }\n\n  // Events\n  async getEvents(\n    query: EventQuery,\n    cursor: EventId | null,\n    limit: number | null,\n    order: Order = 'descending',\n  ): Promise<PaginatedEvents> {\n    try {\n      return await this.client.requestWithType(\n        'sui_getEvents',\n        [query, cursor, limit, order === 'descending'],\n        PaginatedEvents,\n        this.options.skipDataValidation,\n      );\n    } catch (err) {\n      throw new Error(\n        `Error getting events for query: ${err} for query ${query}`,\n      );\n    }\n  }\n\n  async subscribeEvent(\n    filter: SuiEventFilter,\n    onMessage: (event: SuiEventEnvelope) => void,\n  ): Promise<SubscriptionId> {\n    return this.wsClient.subscribeEvent(filter, onMessage);\n  }\n\n  async unsubscribeEvent(id: SubscriptionId): Promise<boolean> {\n    return this.wsClient.unsubscribeEvent(id);\n  }\n\n  async devInspectTransaction(\n    sender: SuiAddress,\n    tx: UnserializedSignableTransaction | string | Uint8Array,\n    gasPrice: number | null = null,\n    epoch: number | null = null,\n  ): Promise<DevInspectResults> {\n    try {\n      let devInspectTxBytes;\n      if (typeof tx === 'string') {\n        devInspectTxBytes = tx;\n      } else if (tx instanceof Uint8Array) {\n        devInspectTxBytes = toB64(tx);\n      } else {\n        devInspectTxBytes = toB64(\n          await new LocalTxnDataSerializer(this).serializeToBytesWithoutGasInfo(\n            sender,\n            tx,\n          ),\n        );\n      }\n\n      const resp = await this.client.requestWithType(\n        'sui_devInspectTransaction',\n        [sender, devInspectTxBytes, gasPrice, epoch],\n        DevInspectResults,\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(\n        `Error dev inspect transaction with request type: ${err}`,\n      );\n    }\n  }\n\n  async dryRunTransaction(txBytes: Uint8Array): Promise<TransactionEffects> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_dryRunTransaction',\n        [toB64(txBytes)],\n        TransactionEffects,\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(\n        `Error dry running transaction with request type: ${err}`,\n      );\n    }\n  }\n\n  // Dynamic Fields\n  async getDynamicFields(\n    parent_object_id: ObjectId,\n    cursor: ObjectId | null = null,\n    limit: number | null = null,\n  ): Promise<DynamicFieldPage> {\n    try {\n      if (\n        !parent_object_id ||\n        !isValidSuiObjectId(normalizeSuiObjectId(parent_object_id))\n      ) {\n        throw new Error('Invalid Sui Object id');\n      }\n      const resp = await this.client.requestWithType(\n        'sui_getDynamicFields',\n        [parent_object_id, cursor, limit],\n        DynamicFieldPage,\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(\n        `Error getting dynamic fields with request type: ${err} for parent_object_id: ${parent_object_id}, cursor: ${cursor} and limit: ${limit}.`,\n      );\n    }\n  }\n\n  async getDynamicFieldObject(\n    parent_object_id: ObjectId,\n    name: string | DynamicFieldName,\n  ): Promise<GetObjectDataResponse> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_getDynamicFieldObject',\n        [parent_object_id, name],\n        GetObjectDataResponse,\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(\n        `Error getting dynamic field object with request type: ${err} for parent_object_id: ${parent_object_id} and name: ${name}.`,\n      );\n    }\n  }\n\n  // Checkpoints\n  async getLatestCheckpointSequenceNumber(): Promise<number> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_getLatestCheckpointSequenceNumber',\n        [],\n        number(),\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(\n        `Error fetching latest checkpoint sequence number: ${err}`,\n      );\n    }\n  }\n\n  async getCheckpointSummary(\n    sequence_number: number,\n  ): Promise<CheckpointSummary> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_getCheckpointSummary',\n        [sequence_number],\n        CheckpointSummary,\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(\n        `Error getting checkpoint summary with request type: ${err} for sequence number: ${sequence_number}.`,\n      );\n    }\n  }\n\n  async getCheckpointSummaryByDigest(\n    digest: CheckpointDigest,\n  ): Promise<CheckpointSummary> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_getCheckpointSummaryByDigest',\n        [digest],\n        CheckpointSummary,\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(\n        `Error getting checkpoint summary with request type: ${err} for digest: ${digest}.`,\n      );\n    }\n  }\n\n  async getCheckpointContents(\n    sequence_number: number | CheckPointContentsDigest,\n  ): Promise<CheckpointContents> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_getCheckpointContents',\n        [sequence_number],\n        CheckpointContents,\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(\n        `Error getting checkpoint contents with request type: ${err} for sequence number: ${sequence_number}.`,\n      );\n    }\n  }\n\n  async getCheckpointContentsByDigest(\n    digest: CheckPointContentsDigest,\n  ): Promise<CheckpointContents> {\n    try {\n      const resp = await this.client.requestWithType(\n        'sui_getCheckpointContentsByDigest',\n        [digest],\n        CheckpointContents,\n        this.options.skipDataValidation,\n      );\n      return resp;\n    } catch (err) {\n      throw new Error(\n        `Error getting checkpoint summary with request type: ${err} for digest: ${digest}.`,\n      );\n    }\n  }\n\n  async getCommitteeInfo(epoch?: number): Promise<CommitteeInfo> {\n    try {\n      const committeeInfo = await this.client.requestWithType(\n        'sui_getCommitteeInfo',\n        [epoch],\n        CommitteeInfo,\n      );\n\n      return committeeInfo;\n    } catch (error) {\n      throw new Error(`Error getCommitteeInfo : ${error}`);\n    }\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Provider } from '../../providers/provider';\nimport {\n  extractMutableReference,\n  extractStructTag,\n  getObjectReference,\n  getSharedObjectInitialVersion,\n  ID_STRUCT_NAME,\n  isValidSuiAddress,\n  MOVE_STDLIB_ADDRESS,\n  normalizeSuiObjectId,\n  ObjectId,\n  OBJECT_MODULE_NAME,\n  SuiJsonValue,\n  SuiMoveNormalizedType,\n  SuiObjectRef,\n  SUI_FRAMEWORK_ADDRESS,\n} from '../../types';\nimport {\n  bcsForVersion,\n  CallArg,\n  isPureArg,\n  MoveCallTx,\n  ObjectArg,\n  PureArg,\n} from '../../types/sui-bcs';\nimport { MoveCallTransaction } from './txn-data-serializer';\n\nconst MOVE_CALL_SER_ERROR = 'Move call argument serialization error:';\n\nconst STD_ASCII_MODULE_NAME = 'ascii';\nconst STD_ASCII_STRUCT_NAME = 'String';\n\nconst STD_UTF8_MODULE_NAME = 'string';\nconst STD_UTF8_STRUCT_NAME = 'String';\n\nconst STD_OPTION_MODULE_NAME = 'option';\nconst STD_OPTION_STRUCT_NAME = 'Option';\n\nconst RESOLVED_SUI_ID = {\n  address: SUI_FRAMEWORK_ADDRESS,\n  module: OBJECT_MODULE_NAME,\n  name: ID_STRUCT_NAME,\n};\n\nconst RESOLVED_ASCII_STR = {\n  address: MOVE_STDLIB_ADDRESS,\n  module: STD_ASCII_MODULE_NAME,\n  name: STD_ASCII_STRUCT_NAME,\n};\nconst RESOLVED_UTF8_STR = {\n  address: MOVE_STDLIB_ADDRESS,\n  module: STD_UTF8_MODULE_NAME,\n  name: STD_UTF8_STRUCT_NAME,\n};\n\nconst RESOLVED_STD_OPTION = {\n  address: MOVE_STDLIB_ADDRESS,\n  module: STD_OPTION_MODULE_NAME,\n  name: STD_OPTION_STRUCT_NAME,\n};\n\nconst isTypeFunc = (type: string) => (t: any) => typeof t === type;\nconst isSameStruct = (a: any, b: any) =>\n  a.address === b.address && a.module === b.module && a.name === b.name;\n\nexport class CallArgSerializer {\n  constructor(private provider: Provider) {}\n\n  async extractObjectIds(txn: MoveCallTransaction): Promise<ObjectId[]> {\n    const args = await this.serializeMoveCallArguments(txn);\n    return args\n      .map((arg) =>\n        'ObjVec' in arg\n          ? Array.from(arg.ObjVec).map((a) => ({\n              Object: a,\n            }))\n          : arg,\n      )\n      .flat()\n      .map((arg) => {\n        if ('Object' in arg) {\n          const objectArg = arg.Object;\n          if ('Shared' in objectArg) {\n            return objectArg.Shared.objectId;\n          } else {\n            return objectArg.ImmOrOwned.objectId;\n          }\n        }\n        return null;\n      })\n      .filter((a) => a != null) as ObjectId[];\n  }\n\n  async serializeMoveCallArguments(\n    txn: MoveCallTransaction,\n  ): Promise<CallArg[]> {\n    const userParams = await this.extractNormalizedFunctionParams(\n      txn.packageObjectId,\n      txn.module,\n      txn.function,\n    );\n\n    if (userParams.length !== txn.arguments.length) {\n      throw new Error(\n        `${MOVE_CALL_SER_ERROR} expect ${userParams.length} ` +\n          `arguments, received ${txn.arguments.length} arguments`,\n      );\n    }\n    return Promise.all(\n      userParams.map(async (param, i) =>\n        this.newCallArg(param, txn.arguments[i]),\n      ),\n    );\n  }\n\n  /**\n   * Deserialize Call Args used in `Transaction` into `SuiJsonValue` arguments\n   */\n  async deserializeCallArgs(txn: MoveCallTx): Promise<SuiJsonValue[]> {\n    const userParams = await this.extractNormalizedFunctionParams(\n      txn.Call.package,\n      txn.Call.module,\n      txn.Call.function,\n    );\n\n    return Promise.all(\n      userParams.map(async (param, i) =>\n        this.deserializeCallArg(param, txn.Call.arguments[i]),\n      ),\n    );\n  }\n\n  private async extractNormalizedFunctionParams(\n    // TODO: Restrict to just `ObjectId` once 0.24.0 has deployed\n    packageId: ObjectId | SuiObjectRef,\n    module: string,\n    functionName: string,\n  ) {\n    const normalized = await this.provider.getNormalizedMoveFunction(\n      normalizeSuiObjectId(\n        typeof packageId === 'string' ? packageId : packageId.objectId,\n      ),\n      module,\n      functionName,\n    );\n    const params = normalized.parameters;\n    // Entry functions can have a mutable reference to an instance of the TxContext\n    // struct defined in the TxContext module as the last parameter. The caller of\n    // the function does not need to pass it in as an argument.\n    const hasTxContext = params.length > 0 && this.isTxContext(params.at(-1)!);\n    return hasTxContext ? params.slice(0, params.length - 1) : params;\n  }\n\n  async newObjectArg(objectId: string): Promise<ObjectArg> {\n    const object = await this.provider.getObject(objectId);\n    const initialSharedVersion = getSharedObjectInitialVersion(object);\n\n    const mutable = true; // Defaulted to True to match current behavior.\n    if (initialSharedVersion) {\n      return { Shared: { objectId, initialSharedVersion, mutable } };\n    }\n    return { ImmOrOwned: getObjectReference(object)! };\n  }\n\n  private async newCallArg(\n    expectedType: SuiMoveNormalizedType,\n    argVal: SuiJsonValue | PureArg,\n  ): Promise<CallArg> {\n    if (isPureArg(argVal)) {\n      return argVal;\n    }\n    const serType = this.getPureSerializationType(expectedType, argVal);\n    const version = await this.provider.getRpcApiVersion();\n    if (serType !== undefined) {\n      return {\n        Pure: bcsForVersion(version).ser(serType, argVal).toBytes(),\n      };\n    }\n\n    const structVal = extractStructTag(expectedType);\n    if (\n      structVal != null ||\n      (typeof expectedType === 'object' && 'TypeParameter' in expectedType)\n    ) {\n      if (typeof argVal !== 'string') {\n        throw new Error(\n          `${MOVE_CALL_SER_ERROR} expect the argument to be an object id string, got ${JSON.stringify(\n            argVal,\n            null,\n            2,\n          )}`,\n        );\n      }\n      return { Object: await this.newObjectArg(argVal) };\n    }\n\n    if (\n      typeof expectedType === 'object' &&\n      'Vector' in expectedType &&\n      typeof expectedType.Vector === 'object' &&\n      'Struct' in expectedType.Vector\n    ) {\n      if (!Array.isArray(argVal)) {\n        throw new Error(\n          `Expect ${argVal} to be a array, received ${typeof argVal}`,\n        );\n      }\n      return {\n        ObjVec: await Promise.all(\n          argVal.map((arg) => this.newObjectArg(arg as string)),\n        ),\n      };\n    }\n\n    throw new Error(\n      `Unknown call arg type ${JSON.stringify(expectedType, null, 2)} ` +\n        `for value ${JSON.stringify(argVal, null, 2)}`,\n    );\n  }\n\n  private extractIdFromObjectArg(arg: ObjectArg) {\n    if ('ImmOrOwned' in arg) {\n      return arg.ImmOrOwned.objectId;\n    }\n    return arg.Shared.objectId;\n  }\n\n  private async deserializeCallArg(\n    expectedType: SuiMoveNormalizedType,\n    argVal: CallArg,\n  ): Promise<SuiJsonValue> {\n    if ('Object' in argVal) {\n      return this.extractIdFromObjectArg(argVal.Object);\n    } else if ('ObjVec' in argVal) {\n      return Array.from(argVal.ObjVec).map((o) =>\n        this.extractIdFromObjectArg(o),\n      );\n    }\n\n    const serType = this.getPureSerializationType(expectedType, undefined);\n    const version = await this.provider.getRpcApiVersion();\n    return bcsForVersion(version).de(serType!, Uint8Array.from(argVal.Pure));\n  }\n\n  /**\n   *\n   * @param argVal used to do additional data validation to make sure the argVal\n   * matches the normalized Move types. If `argVal === undefined`, the data validation\n   * will be skipped. This is useful in the case where `normalizedType` is a vector<T>\n   * and `argVal` is an empty array, the data validation for the inner types will be skipped.\n   */\n  private getPureSerializationType(\n    normalizedType: SuiMoveNormalizedType,\n    argVal: SuiJsonValue | undefined,\n  ): string | undefined {\n    const allowedTypes = [\n      'Address',\n      'Bool',\n      'U8',\n      'U16',\n      'U32',\n      'U64',\n      'U128',\n      'U256',\n    ];\n    if (\n      typeof normalizedType === 'string' &&\n      allowedTypes.includes(normalizedType)\n    ) {\n      if (normalizedType in ['U8', 'U16', 'U32', 'U64', 'U128', 'U256']) {\n        this.checkArgVal(isTypeFunc('number'), argVal, 'number');\n      } else if (normalizedType === 'Bool') {\n        this.checkArgVal(isTypeFunc('boolean'), argVal, 'boolean');\n      } else if (normalizedType === 'Address') {\n        this.checkArgVal(\n          (t: any) => typeof t === 'string' && isValidSuiAddress(t),\n          argVal,\n          'valid SUI address',\n        );\n      }\n      return normalizedType.toLowerCase();\n    } else if (typeof normalizedType === 'string') {\n      throw new Error(\n        `${MOVE_CALL_SER_ERROR} unknown pure normalized type ${JSON.stringify(\n          normalizedType,\n          null,\n          2,\n        )}`,\n      );\n    }\n\n    if ('Vector' in normalizedType) {\n      if (\n        (argVal === undefined || typeof argVal === 'string') &&\n        normalizedType.Vector === 'U8'\n      ) {\n        return 'string';\n      }\n\n      if (argVal !== undefined && !Array.isArray(argVal)) {\n        throw new Error(\n          `Expect ${argVal} to be a array, received ${typeof argVal}`,\n        );\n      }\n      const innerType = this.getPureSerializationType(\n        normalizedType.Vector,\n        // undefined when argVal is empty\n        argVal ? argVal[0] : undefined,\n      );\n      if (innerType === undefined) {\n        return undefined;\n      }\n      return `vector<${innerType}>`;\n    }\n\n    if ('Struct' in normalizedType) {\n      if (isSameStruct(normalizedType.Struct, RESOLVED_ASCII_STR)) {\n        return 'string';\n      } else if (isSameStruct(normalizedType.Struct, RESOLVED_UTF8_STR)) {\n        return 'utf8string';\n      } else if (isSameStruct(normalizedType.Struct, RESOLVED_SUI_ID)) {\n        return 'address';\n      } else if (isSameStruct(normalizedType.Struct, RESOLVED_STD_OPTION)) {\n        const optionToVec: SuiMoveNormalizedType = {\n          Vector: normalizedType.Struct.type_arguments[0],\n        };\n        return this.getPureSerializationType(optionToVec, argVal);\n      }\n    }\n\n    return undefined;\n  }\n\n  private checkArgVal(\n    check: (t: any) => boolean,\n    argVal: SuiJsonValue | undefined,\n    expectedType: string,\n  ) {\n    if (argVal === undefined) {\n      return;\n    }\n    if (!check(argVal)) {\n      throw new Error(\n        `Expect ${argVal} to be ${expectedType}, received ${typeof argVal}`,\n      );\n    }\n  }\n\n  private isTxContext(param: SuiMoveNormalizedType): boolean {\n    const struct = extractStructTag(param)?.Struct;\n    return (\n      extractMutableReference(param) != null &&\n      struct?.address === '0x2' &&\n      struct?.module === 'tx_context' &&\n      struct?.name === 'TxContext'\n    );\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { normalizeSuiAddress, TypeTag } from '../../types';\n\nconst VECTOR_REGEX = /^vector<(.+)>$/;\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;\n\nexport class TypeTagSerializer {\n  static parseFromStr(str: string, normalizeAddress = false): TypeTag {\n    if (str === 'address') {\n      return { address: null };\n    } else if (str === 'bool') {\n      return { bool: null };\n    } else if (str === 'u8') {\n      return { u8: null };\n    } else if (str === 'u16') {\n      return { u16: null };\n    } else if (str === 'u32') {\n      return { u32: null };\n    } else if (str === 'u64') {\n      return { u64: null };\n    } else if (str === 'u128') {\n      return { u128: null };\n    } else if (str === 'u256') {\n      return { u256: null };\n    } else if (str === 'signer') {\n      return { signer: null };\n    }\n    const vectorMatch = str.match(VECTOR_REGEX);\n    if (vectorMatch) {\n      return {\n        vector: TypeTagSerializer.parseFromStr(\n          vectorMatch[1],\n          normalizeAddress,\n        ),\n      };\n    }\n\n    const structMatch = str.match(STRUCT_REGEX);\n    if (structMatch) {\n      const address = normalizeAddress\n        ? normalizeSuiAddress(structMatch[1])\n        : structMatch[1];\n      return {\n        struct: {\n          address,\n          module: structMatch[2],\n          name: structMatch[3],\n          typeParams:\n            structMatch[5] === undefined\n              ? []\n              : TypeTagSerializer.parseStructTypeArgs(\n                  structMatch[5],\n                  normalizeAddress,\n                ),\n        },\n      };\n    }\n\n    throw new Error(\n      `Encountered unexpected token when parsing type args for ${str}`,\n    );\n  }\n\n  static parseStructTypeArgs(str: string, normalizeAddress = false): TypeTag[] {\n    // split `str` by all `,` outside angle brackets\n    const tok: Array<string> = [];\n    let word = '';\n    let nestedAngleBrackets = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str[i];\n      if (char === '<') {\n        nestedAngleBrackets++;\n      }\n      if (char === '>') {\n        nestedAngleBrackets--;\n      }\n      if (nestedAngleBrackets === 0 && char === ',') {\n        tok.push(word.trim());\n        word = '';\n        continue;\n      }\n      word += char;\n    }\n\n    tok.push(word.trim());\n\n    return tok.map((tok) =>\n      TypeTagSerializer.parseFromStr(tok, normalizeAddress),\n    );\n  }\n\n  static tagToString(tag: TypeTag): string {\n    if ('bool' in tag) {\n      return 'bool';\n    }\n    if ('u8' in tag) {\n      return 'u8';\n    }\n    if ('u16' in tag) {\n      return 'u16';\n    }\n    if ('u32' in tag) {\n      return 'u32';\n    }\n    if ('u64' in tag) {\n      return 'u64';\n    }\n    if ('u128' in tag) {\n      return 'u128';\n    }\n    if ('u256' in tag) {\n      return 'u256';\n    }\n    if ('address' in tag) {\n      return 'address';\n    }\n    if ('signer' in tag) {\n      return 'signer';\n    }\n    if ('vector' in tag) {\n      return `vector<${TypeTagSerializer.tagToString(tag.vector)}>`;\n    }\n    if ('struct' in tag) {\n      const struct = tag.struct;\n      const typeParams = struct.typeParams\n        .map(TypeTagSerializer.tagToString)\n        .join(', ');\n      return `${struct.address}::${struct.module}::${struct.name}${\n        typeParams ? `<${typeParams}>` : ''\n      }`;\n    }\n    throw new Error('Invalid TypeTag');\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  Coin,\n  PAY_JOIN_COIN_FUNC_NAME,\n  PAY_MODULE_NAME,\n  SUI_FRAMEWORK_ADDRESS,\n  PAY_SPLIT_COIN_VEC_FUNC_NAME,\n  ObjectId,\n  SuiAddress,\n  SUI_TYPE_ARG,\n  Transaction,\n  TransactionData,\n  TransactionKind,\n  TypeTag,\n  deserializeTransactionBytesToTransactionData,\n  normalizeSuiObjectId,\n  bcsForVersion,\n  GasData,\n  RpcApiVersion,\n} from '../../types';\nimport {\n  MoveCallTransaction,\n  MergeCoinTransaction,\n  SplitCoinTransaction,\n  TransferObjectTransaction,\n  TransferSuiTransaction,\n  PublishTransaction,\n  TxnDataSerializer,\n  PayTransaction,\n  PaySuiTransaction,\n  PayAllSuiTransaction,\n  SignableTransaction,\n  UnserializedSignableTransaction,\n  TransactionBuilderMode,\n} from './txn-data-serializer';\nimport { Provider } from '../../providers/provider';\nimport { CallArgSerializer } from './call-arg-serializer';\nimport { TypeTagSerializer } from './type-tag-serializer';\n\nexport class LocalTxnDataSerializer implements TxnDataSerializer {\n  /**\n   * Need a provider to fetch the latest object reference. Ideally the provider\n   * should cache the object reference locally\n   */\n  constructor(private provider: Provider) {}\n\n  async getRpcApiVersion(): Promise<RpcApiVersion | undefined> {\n    return await this.provider.getRpcApiVersion();\n  }\n\n  async serializeToBytes(\n    signerAddress: string,\n    txn: UnserializedSignableTransaction,\n    _mode: TransactionBuilderMode = 'Commit',\n  ): Promise<Uint8Array> {\n    try {\n      return await this.serializeTransactionData(\n        await this.constructTransactionData(signerAddress, txn),\n      );\n    } catch (e) {\n      throw new Error(\n        `Encountered error when serializing a ${txn.kind} transaction for ` +\n          `address ${signerAddress} for transaction ${JSON.stringify(\n            txn,\n            null,\n            2,\n          )}: ${e}`,\n      );\n    }\n  }\n\n  /**\n   * Serialize a signable transaction without gasPayment, gasPrice, and gasBudget\n   * This is useful for the DevInspect endpoint for simulating the transaction\n   */\n  async serializeToBytesWithoutGasInfo(\n    signerAddress: string,\n    txn: UnserializedSignableTransaction,\n  ): Promise<Uint8Array> {\n    try {\n      return await this.serializeTransactionKind(\n        (\n          await this.constructTransactionKindAndPayment(signerAddress, txn)\n        )[0],\n      );\n    } catch (e) {\n      throw new Error(\n        `Encountered error when serializing a ${txn.kind} transaction without gas info for ` +\n          `address ${signerAddress} for transaction ${JSON.stringify(\n            txn,\n            null,\n            2,\n          )}: ${e}`,\n      );\n    }\n  }\n\n  async constructTransactionKindAndPayment(\n    signerAddress: string,\n    unserializedTxn: UnserializedSignableTransaction,\n  ): Promise<[TransactionKind, ObjectId | undefined]> {\n    let tx: Transaction;\n    let gasPayment: ObjectId | undefined;\n    switch (unserializedTxn.kind) {\n      case 'transferObject':\n        const t = unserializedTxn.data as TransferObjectTransaction;\n        const objectRef = await this.provider.getObjectRef(t.objectId);\n        tx = {\n          TransferObject: {\n            recipient: t.recipient,\n            object_ref: objectRef!,\n          },\n        };\n        gasPayment = t.gasPayment;\n        break;\n      case 'transferSui':\n        const transferSui = unserializedTxn.data as TransferSuiTransaction;\n        tx = {\n          TransferSui: {\n            recipient: transferSui.recipient,\n            amount:\n              transferSui.amount == null\n                ? { None: null }\n                : { Some: transferSui.amount },\n          },\n        };\n        gasPayment = transferSui.suiObjectId;\n        break;\n      case 'pay':\n        const pay = unserializedTxn.data as PayTransaction;\n        const inputCoinRefs = (\n          await Promise.all(\n            pay.inputCoins.map((coin) => this.provider.getObjectRef(coin)),\n          )\n        ).map((ref) => ref!);\n        tx = {\n          Pay: {\n            coins: inputCoinRefs,\n            recipients: pay.recipients,\n            amounts: pay.amounts,\n          },\n        };\n        gasPayment = pay.gasPayment;\n        break;\n      case 'paySui':\n        const paySui = unserializedTxn.data as PaySuiTransaction;\n        const paySuiInputCoinRefs = (\n          await Promise.all(\n            paySui.inputCoins.map((coin) => this.provider.getObjectRef(coin)),\n          )\n        ).map((ref) => ref!);\n        tx = {\n          PaySui: {\n            coins: paySuiInputCoinRefs,\n            recipients: paySui.recipients,\n            amounts: paySui.amounts,\n          },\n        };\n        gasPayment = paySui.inputCoins[0];\n        break;\n      case 'payAllSui':\n        const payAllSui = unserializedTxn.data as PayAllSuiTransaction;\n        const payAllSuiInputCoinRefs = (\n          await Promise.all(\n            payAllSui.inputCoins.map((coin) =>\n              this.provider.getObjectRef(coin),\n            ),\n          )\n        ).map((ref) => ref!);\n        tx = {\n          PayAllSui: {\n            coins: payAllSuiInputCoinRefs,\n            recipient: payAllSui.recipient,\n          },\n        };\n        gasPayment = payAllSui.inputCoins[0];\n        break;\n      case 'moveCall':\n        const moveCall = unserializedTxn.data as MoveCallTransaction;\n        const pkg = normalizeSuiObjectId(moveCall.packageObjectId);\n\n        tx = {\n          Call: {\n            package: pkg,\n            module: moveCall.module,\n            function: moveCall.function,\n            typeArguments: moveCall.typeArguments.map((a) =>\n              typeof a === 'string'\n                ? TypeTagSerializer.parseFromStr(a, true)\n                : (a as TypeTag),\n            ),\n            arguments: await new CallArgSerializer(\n              this.provider,\n            ).serializeMoveCallArguments(moveCall),\n          },\n        };\n        gasPayment = moveCall.gasPayment;\n        break;\n      case 'mergeCoin':\n        const mergeCoin = unserializedTxn.data as MergeCoinTransaction;\n        return this.constructTransactionKindAndPayment(signerAddress, {\n          kind: 'moveCall',\n          data: {\n            packageObjectId: SUI_FRAMEWORK_ADDRESS,\n            module: PAY_MODULE_NAME,\n            function: PAY_JOIN_COIN_FUNC_NAME,\n            typeArguments: [await this.getCoinStructTag(mergeCoin.coinToMerge)],\n            arguments: [mergeCoin.primaryCoin, mergeCoin.coinToMerge],\n            gasPayment: mergeCoin.gasPayment,\n            gasBudget: mergeCoin.gasBudget,\n          },\n        });\n      case 'splitCoin':\n        const splitCoin = unserializedTxn.data as SplitCoinTransaction;\n        return this.constructTransactionKindAndPayment(signerAddress, {\n          kind: 'moveCall',\n          data: {\n            packageObjectId: SUI_FRAMEWORK_ADDRESS,\n            module: PAY_MODULE_NAME,\n            function: PAY_SPLIT_COIN_VEC_FUNC_NAME,\n            typeArguments: [\n              await this.getCoinStructTag(splitCoin.coinObjectId),\n            ],\n            arguments: [splitCoin.coinObjectId, splitCoin.splitAmounts],\n            gasPayment: splitCoin.gasPayment,\n            gasBudget: splitCoin.gasBudget,\n          },\n        });\n      case 'publish':\n        const publish = unserializedTxn.data as PublishTransaction;\n        tx = {\n          Publish: {\n            modules: publish.compiledModules as ArrayLike<ArrayLike<number>>,\n          },\n        };\n        gasPayment = publish.gasPayment;\n        break;\n    }\n    // TODO: support batch transaction\n    return [{ Single: tx }, gasPayment];\n  }\n\n  async constructTransactionData(\n    signerAddress: string,\n    unserializedTxn: UnserializedSignableTransaction,\n  ): Promise<TransactionData> {\n    const [tx, gasPayment] = await this.constructTransactionKindAndPayment(\n      signerAddress,\n      unserializedTxn,\n    );\n    return this.constructTransactionDataHelper(\n      tx,\n      unserializedTxn,\n      gasPayment,\n      signerAddress,\n    );\n  }\n\n  /**\n   * Util function to select a coin for gas payment given an transaction, which will select\n   * an arbitrary gas object owned by the address with balance greater than or equal to\n   * `txn.data.gasBudget` that's not used in `txn` itself and the `exclude` list.\n   *\n   * @param txn the transaction for which the gas object is selected\n   * @param signerAddress signer of the transaction\n   * @param exclude additional object ids of the gas coins to exclude. Object ids that appear\n   * in `txn` will be appended\n   */\n  public async selectGasPaymentForTransaction(\n    txn: SignableTransaction,\n    signerAddress: string,\n    exclude: ObjectId[] = [],\n  ): Promise<ObjectId | undefined> {\n    if (txn.kind === 'bytes') {\n      return undefined;\n    }\n    const requiredGasAmount =\n      BigInt(txn.data.gasBudget!) * BigInt(txn.data.gasPrice!);\n    const coins = await this.provider.selectCoinsWithBalanceGreaterThanOrEqual(\n      signerAddress,\n      requiredGasAmount,\n      SUI_TYPE_ARG,\n      exclude.concat(await this.extractObjectIds(txn)),\n    );\n\n    return coins.length > 0 ? Coin.getID(coins[0]) : undefined;\n  }\n\n  /**\n   * Returns a list of object ids used in the transaction, including the gas payment object\n   */\n  public async extractObjectIds(txn: SignableTransaction): Promise<ObjectId[]> {\n    const ret = await this.extractInputObjectIds(txn);\n    if ('gasPayment' in txn.data && txn.data['gasPayment']) {\n      ret.push(txn.data['gasPayment']);\n    }\n    return ret;\n  }\n\n  private async extractInputObjectIds(\n    txn: SignableTransaction,\n  ): Promise<ObjectId[]> {\n    switch (txn.kind) {\n      case 'moveCall':\n        return await new CallArgSerializer(this.provider).extractObjectIds(\n          txn.data,\n        );\n      case 'transferSui':\n        return [txn.data.suiObjectId];\n      case 'transferObject':\n        return [txn.data.objectId];\n      case 'mergeCoin':\n        return [txn.data.primaryCoin, txn.data.coinToMerge];\n      case 'splitCoin':\n        return [txn.data.coinObjectId];\n      case 'pay':\n        return txn.data.inputCoins;\n    }\n    return [];\n  }\n\n  private async getCoinStructTag(coinId: string): Promise<TypeTag> {\n    const coin = await this.provider.getObject(coinId);\n    const coinTypeArg = Coin.getCoinTypeArg(coin);\n    if (coinTypeArg == null) {\n      throw new Error(`Object ${coinId} is not a valid coin type`);\n    }\n    return { struct: Coin.getCoinStructTag(coinTypeArg) };\n  }\n\n  private async constructTransactionDataHelper(\n    tx: TransactionKind,\n    originalTx: UnserializedSignableTransaction,\n    gasObjectId: ObjectId | undefined,\n    signerAddress: SuiAddress,\n  ): Promise<TransactionData> {\n    // TODO: Allow people to add tip to the reference gas price by using originalTx.data.gasPrice\n    originalTx.data.gasPrice = await this.provider.getReferenceGasPrice();\n    if (gasObjectId === undefined) {\n      gasObjectId = await this.selectGasPaymentForTransaction(\n        originalTx,\n        signerAddress,\n      );\n      if (gasObjectId === undefined) {\n        throw new Error(\n          `Unable to select a gas object with balance greater than or equal to ${originalTx.data.gasBudget}`,\n        );\n      }\n    }\n    const gasPayment = await this.provider.getObjectRef(gasObjectId);\n    if (!originalTx.data.gasBudget) {\n      throw new Error(\n        'Must provide a valid gas budget for contructing TransactionData',\n      );\n    }\n    return {\n      kind: tx,\n      sender: signerAddress,\n      gasData: {\n        payment: gasPayment!,\n        price: originalTx.data.gasPrice!,\n        budget: originalTx.data.gasBudget!,\n        owner: signerAddress,\n      },\n      expiration: { None: null },\n    };\n  }\n\n  /**\n   * Serialize `TransactionData` into BCS encoded bytes\n   */\n  public async serializeTransactionData(\n    tx: TransactionData,\n    // TODO: derive the buffer size automatically\n    size: number = 8192,\n  ): Promise<Uint8Array> {\n    const bcs = bcsForVersion(await this.provider.getRpcApiVersion());\n    const dataBytes = bcs.ser('TransactionData', tx, size).toBytes();\n    return dataBytes;\n  }\n\n  /**\n   * Serialize `TransactionKind` into BCS encoded bytes\n   */\n  public async serializeTransactionKind(\n    tx: TransactionKind,\n    // TODO: derive the buffer size automatically\n    size: number = 8192,\n  ): Promise<Uint8Array> {\n    const bcs = bcsForVersion(await this.provider.getRpcApiVersion());\n    const dataBytes = bcs.ser('TransactionKind', tx, size).toBytes();\n    return dataBytes;\n  }\n\n  /**\n   * Deserialize BCS encoded bytes into `SignableTransaction`\n   */\n  public async deserializeTransactionBytesToSignableTransaction(\n    bytes: Uint8Array,\n  ): Promise<\n    UnserializedSignableTransaction | UnserializedSignableTransaction[]\n  > {\n    let version = await this.provider.getRpcApiVersion();\n    return this.transformTransactionDataToSignableTransaction(\n      deserializeTransactionBytesToTransactionData(\n        bcsForVersion(version),\n        bytes,\n      ),\n    );\n  }\n\n  /**\n   * Deserialize `TransactionData` to `SignableTransaction`\n   */\n  public async transformTransactionDataToSignableTransaction(\n    tx_data: TransactionData,\n  ): Promise<\n    UnserializedSignableTransaction | UnserializedSignableTransaction[]\n  > {\n    if ('Single' in tx_data.kind) {\n      return this.transformTransactionToSignableTransaction(\n        tx_data.kind.Single,\n        tx_data.gasData,\n      );\n    }\n    return Promise.all(\n      tx_data.kind.Batch.map((t) =>\n        this.transformTransactionToSignableTransaction(t, tx_data.gasData),\n      ),\n    );\n  }\n\n  public async transformTransactionToSignableTransaction(\n    tx: Transaction,\n    gasData: GasData,\n  ): Promise<UnserializedSignableTransaction> {\n    if ('Pay' in tx) {\n      return {\n        kind: 'pay',\n        data: {\n          inputCoins: tx.Pay.coins.map((c) => c.objectId),\n          recipients: tx.Pay.recipients,\n          amounts: tx.Pay.amounts,\n          gasPayment: gasData.payment?.objectId,\n          gasBudget: gasData.budget,\n          gasOwner: gasData.owner,\n          gasPrice: gasData.price,\n        },\n      };\n    } else if ('Call' in tx) {\n      return {\n        kind: 'moveCall',\n        data: {\n          packageObjectId: tx.Call.package,\n          module: tx.Call.module,\n          function: tx.Call.function,\n          typeArguments: tx.Call.typeArguments,\n          arguments: await new CallArgSerializer(\n            this.provider,\n          ).deserializeCallArgs(tx),\n          gasPayment: gasData.payment?.objectId,\n          gasBudget: gasData.budget,\n          gasOwner: gasData.owner,\n          gasPrice: gasData.price,\n        },\n      };\n    } else if ('TransferObject' in tx) {\n      return {\n        kind: 'transferObject',\n        data: {\n          objectId: tx.TransferObject.object_ref.objectId,\n          recipient: tx.TransferObject.recipient,\n          gasPayment: gasData.payment?.objectId,\n          gasBudget: gasData.budget,\n          gasOwner: gasData.owner,\n          gasPrice: gasData.price,\n        },\n      };\n    } else if ('TransferSui' in tx) {\n      return {\n        kind: 'transferSui',\n        data: {\n          suiObjectId: gasData.payment!.objectId,\n          recipient: tx.TransferSui.recipient,\n          amount:\n            'Some' in tx.TransferSui.amount ? tx.TransferSui.amount.Some : null,\n          gasBudget: gasData.budget,\n          gasPrice: gasData.price,\n        },\n      };\n    } else if ('Publish' in tx) {\n      return {\n        kind: 'publish',\n        data: {\n          compiledModules: tx.Publish.modules,\n          gasPayment: gasData.payment?.objectId,\n          gasBudget: gasData.budget,\n          gasOwner: gasData.owner,\n        },\n      };\n    } else if ('PaySui' in tx) {\n      return {\n        kind: 'paySui',\n        data: {\n          inputCoins: tx.PaySui.coins.map((c) => c.objectId),\n          recipients: tx.PaySui.recipients,\n          amounts: tx.PaySui.amounts,\n        },\n      };\n    } else if ('PayAllSui' in tx) {\n      return {\n        kind: 'payAllSui',\n        data: {\n          inputCoins: tx.PayAllSui.coins.map((c) => c.objectId),\n          recipient: tx.PayAllSui.recipient,\n        },\n      };\n    }\n    throw new Error(`Unsupported transaction type ${tx}`);\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\ninterface ConnectionOptions {\n  fullnode: string;\n  websocket?: string;\n  faucet?: string;\n}\n\nexport class Connection {\n  #options: ConnectionOptions;\n  constructor(options: ConnectionOptions) {\n    this.#options = options;\n  }\n\n  get fullnode() {\n    return this.#options.fullnode;\n  }\n\n  // TODO: Decide if we should default the websocket URL like this:\n  get websocket() {\n    return this.#options.websocket || this.#options.fullnode;\n  }\n\n  get faucet() {\n    return this.#options.faucet;\n  }\n}\n\n// TODO: Maybe don't have pre-built connections, and instead just have pre-built objects that folks\n// can use with the connection?\nexport const localnetConnection = new Connection({\n  fullnode: 'http://127.0.0.1:9000',\n  faucet: 'http://127.0.0.1:9123/gas',\n});\n\nexport const devnetConnection = new Connection({\n  fullnode: 'https://fullnode.devnet.sui.io:443/',\n  faucet: 'https://faucet.devnet.sui.io/gas',\n});\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n  GetObjectDataResponse,\n  SuiObjectInfo,\n  SuiObjectRef,\n  getObjectReference,\n  TransactionEffects,\n  normalizeSuiObjectId,\n  ExecuteTransactionRequestType,\n  SuiExecuteTransactionResponse,\n  getTransactionEffects,\n} from '../types';\nimport { JsonRpcProvider } from './json-rpc-provider';\nimport { is } from 'superstruct';\nimport { SerializedSignature } from '../cryptography/signature';\n\nexport class JsonRpcProviderWithCache extends JsonRpcProvider {\n  /**\n   * A list of object references which are being tracked.\n   *\n   * Whenever an object is fetched or updated within the transaction,\n   * its record gets updated.\n   */\n  private objectRefs: Map<string, SuiObjectRef> = new Map();\n\n  // Objects\n  async getObjectsOwnedByAddress(address: string): Promise<SuiObjectInfo[]> {\n    const resp = await super.getObjectsOwnedByAddress(address);\n    resp.forEach((r) => this.updateObjectRefCache(r));\n    return resp;\n  }\n\n  async getObject(objectId: string): Promise<GetObjectDataResponse> {\n    const resp = await super.getObject(objectId);\n    this.updateObjectRefCache(resp);\n    return resp;\n  }\n\n  async getObjectRef(\n    objectId: string,\n    skipCache = false,\n  ): Promise<SuiObjectRef | undefined> {\n    const normalizedId = normalizeSuiObjectId(objectId);\n    if (!skipCache && this.objectRefs.has(normalizedId)) {\n      return this.objectRefs.get(normalizedId);\n    }\n\n    const ref = await super.getObjectRef(objectId);\n    this.updateObjectRefCache(ref);\n    return ref;\n  }\n\n  async getObjectBatch(objectIds: string[]): Promise<GetObjectDataResponse[]> {\n    const resp = await super.getObjectBatch(objectIds);\n    resp.forEach((r) => this.updateObjectRefCache(r));\n    return resp;\n  }\n\n  // Transactions\n\n  async executeTransaction(\n    txnBytes: Uint8Array | string,\n    signature: SerializedSignature,\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert',\n  ): Promise<SuiExecuteTransactionResponse> {\n    if (requestType !== 'WaitForEffectsCert') {\n      console.warn(\n        `It's not recommended to use JsonRpcProviderWithCache with the request ` +\n          `type other than 'WaitForEffectsCert' for executeTransaction. Using ` +\n          `the '${requestType}' may result in stale cache and a failure in subsequent transactions.`,\n      );\n    }\n    const resp = await super.executeTransaction(\n      txnBytes,\n      signature,\n      requestType,\n    );\n    const effects = getTransactionEffects(resp);\n    if (effects != null) {\n      this.updateObjectRefCacheFromTransactionEffects(effects);\n    }\n    return resp;\n  }\n\n  private updateObjectRefCache(\n    newData: GetObjectDataResponse | SuiObjectRef | undefined,\n  ) {\n    if (newData == null) {\n      return;\n    }\n    const ref = is(newData, SuiObjectRef)\n      ? newData\n      : getObjectReference(newData);\n    if (ref != null) {\n      this.objectRefs.set(ref.objectId, ref);\n    }\n  }\n\n  private updateObjectRefCacheFromTransactionEffects(\n    effects: TransactionEffects,\n  ) {\n    effects.created?.forEach((r) => this.updateObjectRefCache(r.reference));\n    effects.mutated?.forEach((r) => this.updateObjectRefCache(r.reference));\n    effects.unwrapped?.forEach((r) => this.updateObjectRefCache(r.reference));\n    effects.wrapped?.forEach((r) => this.updateObjectRefCache(r));\n    effects.deleted?.forEach((r) => this.objectRefs.delete(r.objectId));\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport { JsonRpcClient } from '../../rpc/client';\nimport { isPureArg } from '../../types';\nimport { TransactionBytes } from '../../types/transactions';\nimport {\n  MoveCallTransaction,\n  MergeCoinTransaction,\n  SplitCoinTransaction,\n  TransferObjectTransaction,\n  TransferSuiTransaction,\n  PayTransaction,\n  PaySuiTransaction,\n  PayAllSuiTransaction,\n  PublishTransaction,\n  TxnDataSerializer,\n  UnserializedSignableTransaction,\n  TransactionBuilderMode,\n} from './txn-data-serializer';\n\n/**\n * This is a temporary implementation of the `TxnDataSerializer` class\n * that uses the Sui Fullnode RPC API to serialize a transaction into BCS bytes. We will\n * deprecate this implementation once `LocalTxnDataSerializer` stabilizes.\n *\n * Prefer to use `LocalTxnDataSerializer` instead for better performance and *security*, otherwise\n * this needs to be used with a trusted fullnode and it is recommended to verify the returned\n * BCS bytes matches the input.\n */\nexport class RpcTxnDataSerializer implements TxnDataSerializer {\n  private client: JsonRpcClient;\n\n  /**\n   * Establish a connection to a Sui RPC endpoint\n   *\n   * @param endpoint URL to the Sui RPC endpoint\n   * @param skipDataValidation default to `false`. If set to `true`, the rpc\n   * client will not check if the responses from the RPC server conform to the schema\n   * defined in the TypeScript SDK. The mismatches often happen when the SDK\n   * is in a different version than the RPC server. Skipping the validation\n   * can maximize the version compatibility of the SDK, as not all the schema\n   * changes in the RPC response will affect the caller, but the caller needs to\n   * understand that the data may not match the TypeSrcript definitions.\n   */\n  constructor(endpoint: string, private skipDataValidation: boolean = false) {\n    this.client = new JsonRpcClient(endpoint);\n  }\n\n  async serializeToBytes(\n    signerAddress: string,\n    unserializedTxn: UnserializedSignableTransaction,\n    mode: TransactionBuilderMode = 'Commit',\n  ): Promise<Uint8Array> {\n    let endpoint: string;\n    let args: Array<any>;\n    if (!unserializedTxn.data.gasBudget) {\n      throw new Error('serializeToBytes requires a valid gas budget');\n    }\n    switch (unserializedTxn.kind) {\n      case 'transferObject':\n        const t = unserializedTxn.data as TransferObjectTransaction;\n        endpoint = 'sui_transferObject';\n        args = [\n          signerAddress,\n          t.objectId,\n          t.gasPayment,\n          t.gasBudget,\n          t.recipient,\n        ];\n        break;\n      case 'transferSui':\n        const transferSui = unserializedTxn.data as TransferSuiTransaction;\n        endpoint = 'sui_transferSui';\n        args = [\n          signerAddress,\n          transferSui.suiObjectId,\n          transferSui.gasBudget,\n          transferSui.recipient,\n          transferSui.amount,\n        ];\n        break;\n      case 'pay':\n        const pay = unserializedTxn.data as PayTransaction;\n        endpoint = 'sui_pay';\n        args = [\n          signerAddress,\n          pay.inputCoins,\n          pay.recipients,\n          pay.amounts,\n          pay.gasPayment,\n          pay.gasBudget,\n        ];\n        break;\n      case 'paySui':\n        const paySui = unserializedTxn.data as PaySuiTransaction;\n        endpoint = 'sui_paySui';\n        args = [\n          signerAddress,\n          paySui.inputCoins,\n          paySui.recipients,\n          paySui.amounts,\n          paySui.gasBudget,\n        ];\n        break;\n      case 'payAllSui':\n        const payAllSui = unserializedTxn.data as PayAllSuiTransaction;\n        endpoint = 'sui_payAllSui';\n        args = [\n          signerAddress,\n          payAllSui.inputCoins,\n          payAllSui.recipient,\n          payAllSui.gasBudget,\n        ];\n        break;\n      case 'moveCall':\n        const moveCall = unserializedTxn.data as MoveCallTransaction;\n        for (const arg of moveCall.arguments) {\n          if (isPureArg(arg)) {\n            throw new Error(\n              'PureArg is not allowed as argument in RpcTxnDataSerializer. Please use LocalTxnDataSerializer instead.',\n            );\n          }\n        }\n        endpoint = 'sui_moveCall';\n        args = [\n          signerAddress,\n          moveCall.packageObjectId,\n          moveCall.module,\n          moveCall.function,\n          moveCall.typeArguments,\n          moveCall.arguments,\n          moveCall.gasPayment,\n          moveCall.gasBudget,\n          mode,\n        ];\n        break;\n      case 'mergeCoin':\n        const mergeCoin = unserializedTxn.data as MergeCoinTransaction;\n        endpoint = 'sui_mergeCoins';\n        args = [\n          signerAddress,\n          mergeCoin.primaryCoin,\n          mergeCoin.coinToMerge,\n          mergeCoin.gasPayment,\n          mergeCoin.gasBudget,\n        ];\n        break;\n      case 'splitCoin':\n        const splitCoin = unserializedTxn.data as SplitCoinTransaction;\n        endpoint = 'sui_splitCoin';\n        args = [\n          signerAddress,\n          splitCoin.coinObjectId,\n          splitCoin.splitAmounts,\n          splitCoin.gasPayment,\n          splitCoin.gasBudget,\n        ];\n        break;\n      case 'publish':\n        const publish = unserializedTxn.data as PublishTransaction;\n        endpoint = 'sui_publish';\n        args = [\n          signerAddress,\n          publish.compiledModules,\n          publish.gasPayment,\n          publish.gasBudget,\n        ];\n        break;\n    }\n\n    try {\n      const resp = await this.client.requestWithType(\n        endpoint,\n        args,\n        TransactionBytes,\n        this.skipDataValidation,\n      );\n      return fromB64(resp.txBytes);\n    } catch (e) {\n      throw new Error(\n        `Encountered error when calling RpcTxnDataSerialize for a ${unserializedTxn.kind} transaction for ` +\n          `address ${signerAddress} for transaction ${JSON.stringify(\n            unserializedTxn,\n            null,\n            2,\n          )}: ${e}`,\n      );\n    }\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport { SerializedSignature } from '../cryptography/signature';\nimport { JsonRpcProvider } from '../providers/json-rpc-provider';\nimport { Provider } from '../providers/provider';\nimport { VoidProvider } from '../providers/void-provider';\nimport { HttpHeaders } from '../rpc/client';\nimport {\n  deserializeTransactionBytesToTransactionData,\n  ExecuteTransactionRequestType,\n  FaucetResponse,\n  generateTransactionDigest,\n  getTotalGasUsedUpperBound,\n  SuiAddress,\n  SuiExecuteTransactionResponse,\n  TransactionEffects,\n  DevInspectResults,\n  bcsForVersion,\n} from '../types';\nimport { IntentScope, messageWithIntent } from '../utils/intent';\nimport { Signer } from './signer';\nimport { RpcTxnDataSerializer } from './txn-data-serializers/rpc-txn-data-serializer';\nimport {\n  MoveCallTransaction,\n  MergeCoinTransaction,\n  PayTransaction,\n  PaySuiTransaction,\n  PayAllSuiTransaction,\n  SplitCoinTransaction,\n  TransferObjectTransaction,\n  TransferSuiTransaction,\n  TxnDataSerializer,\n  PublishTransaction,\n  SignableTransaction,\n  UnserializedSignableTransaction,\n  SignedTransaction,\n} from './txn-data-serializers/txn-data-serializer';\n\n///////////////////////////////\n// Exported Abstracts\nexport abstract class SignerWithProvider implements Signer {\n  readonly provider: Provider;\n  readonly serializer: TxnDataSerializer;\n\n  ///////////////////\n  // Sub-classes MUST implement these\n\n  // Returns the checksum address\n  abstract getAddress(): Promise<SuiAddress>;\n\n  /**\n   * Returns the signature for the data and the public key of the signer\n   */\n  abstract signData(data: Uint8Array): Promise<SerializedSignature>;\n\n  // Returns a new instance of the Signer, connected to provider.\n  // This MAY throw if changing providers is not supported.\n  abstract connect(provider: Provider): SignerWithProvider;\n\n  ///////////////////\n  // Sub-classes MAY override these\n\n  /**\n   * Request gas tokens from a faucet server and send to the signer\n   * address\n   * @param httpHeaders optional request headers\n   */\n  async requestSuiFromFaucet(\n    httpHeaders?: HttpHeaders,\n  ): Promise<FaucetResponse> {\n    return this.provider.requestSuiFromFaucet(\n      await this.getAddress(),\n      httpHeaders,\n    );\n  }\n\n  constructor(provider?: Provider, serializer?: TxnDataSerializer) {\n    this.provider = provider || new VoidProvider();\n    let endpoint = '';\n    let skipDataValidation = false;\n    if (this.provider instanceof JsonRpcProvider) {\n      endpoint = this.provider.connection.fullnode;\n      skipDataValidation = this.provider.options.skipDataValidation!;\n    }\n    this.serializer =\n      serializer || new RpcTxnDataSerializer(endpoint, skipDataValidation);\n  }\n\n  /**\n   * Sign a message using the keypair, with the `PersonalMessage` intent.\n   */\n  async signMessage(message: Uint8Array): Promise<SerializedSignature> {\n    return await this.signData(\n      messageWithIntent(IntentScope.PersonalMessage, message),\n    );\n  }\n\n  /**\n   * Sign a transaction.\n   */\n  async signTransaction(\n    transaction: Uint8Array | SignableTransaction,\n  ): Promise<SignedTransaction> {\n    let transactionBytes;\n    if (transaction instanceof Uint8Array || transaction.kind === 'bytes') {\n      transactionBytes =\n        transaction instanceof Uint8Array ? transaction : transaction.data;\n    } else {\n      transactionBytes = await this.serializer.serializeToBytes(\n        await this.getAddress(),\n        transaction,\n        'Commit',\n      );\n    }\n\n    const intentMessage = messageWithIntent(\n      IntentScope.TransactionData,\n      transactionBytes,\n    );\n    const signature = await this.signData(intentMessage);\n\n    return {\n      transactionBytes: toB64(transactionBytes),\n      signature,\n    };\n  }\n\n  /**\n   * Sign a transaction and submit to the Fullnode for execution.\n   */\n  async signAndExecuteTransaction(\n    transaction: Uint8Array | SignableTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution',\n  ): Promise<SuiExecuteTransactionResponse> {\n    const { transactionBytes, signature } = await this.signTransaction(\n      transaction,\n    );\n\n    return await this.provider.executeTransaction(\n      transactionBytes,\n      signature,\n      requestType,\n    );\n  }\n\n  async getTransactionDigest(\n    tx: Uint8Array | SignableTransaction,\n  ): Promise<string> {\n    let txBytes: Uint8Array;\n    if (tx instanceof Uint8Array || tx.kind === 'bytes') {\n      txBytes = tx instanceof Uint8Array ? tx : tx.data;\n    } else {\n      txBytes = await this.serializer.serializeToBytes(\n        await this.getAddress(),\n        tx,\n        'DevInspect',\n      );\n    }\n    const version = await this.provider.getRpcApiVersion();\n    const bcs = bcsForVersion(version);\n    const data = deserializeTransactionBytesToTransactionData(bcs, txBytes);\n    return generateTransactionDigest(data, bcs);\n  }\n\n  /**\n   * Runs the transaction in dev-inpsect mode. Which allows for nearly any\n   * transaction (or Move call) with any arguments. Detailed results are\n   * provided, including both the transaction effects and any return values.\n   *\n   * @param tx the transaction as SignableTransaction or string (in base64) that will dry run\n   * @param gas_price optional. Default to use the network reference gas price stored\n   * in the Sui System State object\n   * @param epoch optional. Default to use the current epoch number stored\n   * in the Sui System State object\n   */\n  async devInspectTransaction(\n    tx: UnserializedSignableTransaction | string | Uint8Array,\n    gasPrice: number | null = null,\n    epoch: number | null = null,\n  ): Promise<DevInspectResults> {\n    const address = await this.getAddress();\n    return this.provider.devInspectTransaction(address, tx, gasPrice, epoch);\n  }\n\n  /**\n   * Dry run a transaction and return the result.\n   * @param tx the transaction as SignableTransaction or string (in base64) that will dry run\n   * @returns The transaction effects\n   */\n  async dryRunTransaction(\n    tx: SignableTransaction | string | Uint8Array,\n  ): Promise<TransactionEffects> {\n    const address = await this.getAddress();\n    let dryRunTxBytes: Uint8Array;\n    if (typeof tx === 'string') {\n      dryRunTxBytes = fromB64(tx);\n    } else if (tx instanceof Uint8Array) {\n      dryRunTxBytes = tx;\n    } else {\n      switch (tx.kind) {\n        case 'bytes':\n          dryRunTxBytes = tx.data;\n          break;\n        default:\n          dryRunTxBytes = await this.serializer.serializeToBytes(\n            address,\n            tx,\n            'Commit',\n          );\n          break;\n      }\n    }\n    return this.provider.dryRunTransaction(dryRunTxBytes);\n  }\n\n  /**\n   *\n   * Serialize and sign a `TransferObject` transaction and submit to the Fullnode\n   * for execution\n   */\n  async transferObject(\n    transaction: TransferObjectTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution',\n  ): Promise<SuiExecuteTransactionResponse> {\n    return this.signAndExecuteTransaction(\n      { kind: 'transferObject', data: transaction },\n      requestType,\n    );\n  }\n\n  /**\n   *\n   * Serialize and sign a `TransferSui` transaction and submit to the Fullnode\n   * for execution\n   */\n  async transferSui(\n    transaction: TransferSuiTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution',\n  ): Promise<SuiExecuteTransactionResponse> {\n    return this.signAndExecuteTransaction(\n      { kind: 'transferSui', data: transaction },\n      requestType,\n    );\n  }\n\n  /**\n   *\n   * Serialize and Sign a `Pay` transaction and submit to the fullnode for execution\n   */\n  async pay(\n    transaction: PayTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution',\n  ): Promise<SuiExecuteTransactionResponse> {\n    return this.signAndExecuteTransaction(\n      { kind: 'pay', data: transaction },\n      requestType,\n    );\n  }\n\n  /**\n   * Serialize and Sign a `PaySui` transaction and submit to the fullnode for execution\n   */\n  async paySui(\n    transaction: PaySuiTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution',\n  ): Promise<SuiExecuteTransactionResponse> {\n    return this.signAndExecuteTransaction(\n      { kind: 'paySui', data: transaction },\n      requestType,\n    );\n  }\n\n  /**\n   * Serialize and Sign a `PayAllSui` transaction and submit to the fullnode for execution\n   */\n  async payAllSui(\n    transaction: PayAllSuiTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution',\n  ): Promise<SuiExecuteTransactionResponse> {\n    return this.signAndExecuteTransaction(\n      { kind: 'payAllSui', data: transaction },\n      requestType,\n    );\n  }\n\n  /**\n   *\n   * Serialize and sign a `MergeCoin` transaction and submit to the Fullnode\n   * for execution\n   */\n  async mergeCoin(\n    transaction: MergeCoinTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution',\n  ): Promise<SuiExecuteTransactionResponse> {\n    return this.signAndExecuteTransaction(\n      { kind: 'mergeCoin', data: transaction },\n      requestType,\n    );\n  }\n\n  /**\n   *\n   * Serialize and sign a `SplitCoin` transaction and submit to the Fullnode\n   * for execution\n   */\n  async splitCoin(\n    transaction: SplitCoinTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution',\n  ): Promise<SuiExecuteTransactionResponse> {\n    return this.signAndExecuteTransaction(\n      { kind: 'splitCoin', data: transaction },\n      requestType,\n    );\n  }\n\n  /**\n   * Serialize and sign a `MoveCall` transaction and submit to the Fullnode\n   * for execution\n   */\n  async executeMoveCall(\n    transaction: MoveCallTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution',\n  ): Promise<SuiExecuteTransactionResponse> {\n    return this.signAndExecuteTransaction(\n      { kind: 'moveCall', data: transaction },\n      requestType,\n    );\n  }\n\n  /**\n   *\n   * Serialize and sign a `Publish` transaction and submit to the Fullnode\n   * for execution\n   */\n  async publish(\n    transaction: PublishTransaction,\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution',\n  ): Promise<SuiExecuteTransactionResponse> {\n    return this.signAndExecuteTransaction(\n      { kind: 'publish', data: transaction },\n      requestType,\n    );\n  }\n\n  /**\n   * Returns the estimated gas cost for the transaction\n   * @param tx The transaction to estimate the gas cost. When string it is assumed it's a serialized tx in base64\n   * @returns total gas cost estimation\n   * @throws whens fails to estimate the gas cost\n   */\n  async getGasCostEstimation(\n    ...args: Parameters<SignerWithProvider['dryRunTransaction']>\n  ) {\n    const txEffects = await this.dryRunTransaction(...args);\n    const gasEstimation = getTotalGasUsedUpperBound(txEffects);\n    if (typeof gasEstimation === 'undefined') {\n      throw new Error('Failed to estimate the gas cost from transaction');\n    }\n    return gasEstimation;\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { HttpHeaders } from '../rpc/client';\nimport { UnserializedSignableTransaction } from '../signers/txn-data-serializers/txn-data-serializer';\nimport {\n  CertifiedTransaction,\n  TransactionDigest,\n  GetTxnDigestsResponse,\n  GatewayTxSeqNumber,\n  SuiObjectInfo,\n  GetObjectDataResponse,\n  SuiObjectRef,\n  SuiMoveFunctionArgTypes,\n  SuiMoveNormalizedFunction,\n  SuiMoveNormalizedStruct,\n  SuiMoveNormalizedModule,\n  SuiMoveNormalizedModules,\n  SuiEventFilter,\n  SuiEventEnvelope,\n  SubscriptionId,\n  ExecuteTransactionRequestType,\n  SuiExecuteTransactionResponse,\n  SuiAddress,\n  ObjectId,\n  TransactionQuery,\n  PaginatedTransactionDigests,\n  EventQuery,\n  PaginatedEvents,\n  EventId,\n  RpcApiVersion,\n  FaucetResponse,\n  Order,\n  TransactionEffects,\n  CoinMetadata,\n  DevInspectResults,\n  SuiSystemState,\n  DelegatedStake,\n  ValidatorMetaData,\n  PaginatedCoins,\n  CoinBalance,\n  CoinSupply,\n  CheckpointSummary,\n  CheckpointContents,\n  CheckpointDigest,\n  CheckPointContentsDigest,\n  CommitteeInfo,\n} from '../types';\nimport { Provider } from './provider';\n\nimport { DynamicFieldName, DynamicFieldPage } from '../types/dynamic_fields';\nimport { SerializedSignature } from '../cryptography/signature';\n\nexport class VoidProvider extends Provider {\n  // API Version\n  async getRpcApiVersion(): Promise<RpcApiVersion | undefined> {\n    throw this.newError('getRpcApiVersion');\n  }\n\n  // Governance\n  async getReferenceGasPrice(): Promise<number> {\n    throw this.newError('getReferenceGasPrice');\n  }\n\n  async getSuiSystemState(): Promise<SuiSystemState> {\n    throw this.newError('getSuiSystemState');\n  }\n\n  async getDelegatedStakes(_address: SuiAddress): Promise<DelegatedStake[]> {\n    throw this.newError('getDelegatedStakes');\n  }\n\n  async getValidators(): Promise<ValidatorMetaData[]> {\n    throw this.newError('getValidators');\n  }\n\n  // Faucet\n  async requestSuiFromFaucet(\n    _recipient: SuiAddress,\n    _httpHeaders?: HttpHeaders,\n  ): Promise<FaucetResponse> {\n    throw this.newError('requestSuiFromFaucet');\n  }\n\n  // RPC Endpoint\n  call(_endpoint: string, _params: any[]): Promise<any> {\n    throw this.newError('call');\n  }\n\n  // Coins\n  async getCoins(\n    _owner: SuiAddress,\n    _coinType: string | null,\n    _cursor: ObjectId | null,\n    _limit: number | null,\n  ): Promise<PaginatedCoins> {\n    throw this.newError('getCoins');\n  }\n\n  async getAllCoins(\n    _owner: SuiAddress,\n    _cursor: ObjectId | null,\n    _limit: number | null,\n  ): Promise<PaginatedCoins> {\n    throw this.newError('getAllCoins');\n  }\n\n  async getBalance(\n    _owner: string,\n    _coinType: string | null,\n  ): Promise<CoinBalance> {\n    throw this.newError('getBalance');\n  }\n\n  async getAllBalances(_owner: string): Promise<CoinBalance[]> {\n    throw this.newError('getAllBalances');\n  }\n\n  async getCoinMetadata(_coinType: string): Promise<CoinMetadata> {\n    throw new Error('getCoinMetadata');\n  }\n\n  async getTotalSupply(_coinType: string): Promise<CoinSupply> {\n    throw new Error('getTotalSupply');\n  }\n\n  // Objects\n  async getObjectsOwnedByAddress(_address: string): Promise<SuiObjectInfo[]> {\n    throw this.newError('getObjectsOwnedByAddress');\n  }\n\n  async getGasObjectsOwnedByAddress(\n    _address: string,\n  ): Promise<SuiObjectInfo[]> {\n    throw this.newError('getGasObjectsOwnedByAddress');\n  }\n\n  /**\n   * @deprecated The method should not be used\n   */\n  async getCoinBalancesOwnedByAddress(\n    _address: string,\n    _typeArg?: string,\n  ): Promise<GetObjectDataResponse[]> {\n    throw this.newError('getCoinBalancesOwnedByAddress');\n  }\n\n  async selectCoinsWithBalanceGreaterThanOrEqual(\n    _address: string,\n    _amount: bigint,\n    _typeArg: string,\n    _exclude: ObjectId[] = [],\n  ): Promise<GetObjectDataResponse[]> {\n    throw this.newError('selectCoinsWithBalanceGreaterThanOrEqual');\n  }\n\n  async selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\n    _address: string,\n    _amount: bigint,\n    _typeArg: string,\n    _exclude: ObjectId[],\n  ): Promise<GetObjectDataResponse[]> {\n    throw this.newError('selectCoinSetWithCombinedBalanceGreaterThanOrEqual');\n  }\n\n  async getObject(_objectId: string): Promise<GetObjectDataResponse> {\n    throw this.newError('getObject');\n  }\n\n  async getObjectRef(_objectId: string): Promise<SuiObjectRef | undefined> {\n    throw this.newError('getObjectRef');\n  }\n\n  // Transactions\n  async getTransaction(\n    _digest: TransactionDigest,\n  ): Promise<CertifiedTransaction> {\n    throw this.newError('getTransaction');\n  }\n\n  async executeTransaction(\n    _txnBytes: Uint8Array,\n    _signature: SerializedSignature,\n    _requestType: ExecuteTransactionRequestType,\n  ): Promise<SuiExecuteTransactionResponse> {\n    throw this.newError('executeTransaction with request Type');\n  }\n\n  devInspectTransaction(\n    _sender: SuiAddress,\n    _txn: UnserializedSignableTransaction | string | Uint8Array,\n    _gasPrice: number | null = null,\n    _epoch: number | null = null,\n  ): Promise<DevInspectResults> {\n    throw this.newError('devInspectTransaction');\n  }\n\n  dryRunTransaction(_txBytes: Uint8Array): Promise<TransactionEffects> {\n    throw this.newError('dryRunTransaction');\n  }\n\n  getDynamicFields(\n    _parent_object_id: ObjectId,\n    _cursor: ObjectId | null = null,\n    _limit: number | null = null,\n  ): Promise<DynamicFieldPage> {\n    throw this.newError('getDynamicFields');\n  }\n\n  getDynamicFieldObject(\n    _parent_object_id: ObjectId,\n    _name: string | DynamicFieldName,\n  ): Promise<GetObjectDataResponse> {\n    throw this.newError('getDynamicFieldObject');\n  }\n\n  async getTotalTransactionNumber(): Promise<number> {\n    throw this.newError('getTotalTransactionNumber');\n  }\n\n  async getTransactionDigestsInRange(\n    _start: GatewayTxSeqNumber,\n    _end: GatewayTxSeqNumber,\n  ): Promise<GetTxnDigestsResponse> {\n    throw this.newError('getTransactionDigestsInRange');\n  }\n\n  async getMoveFunctionArgTypes(\n    _objectId: string,\n    _moduleName: string,\n    _functionName: string,\n  ): Promise<SuiMoveFunctionArgTypes> {\n    throw this.newError('getMoveFunctionArgTypes');\n  }\n\n  async getNormalizedMoveModulesByPackage(\n    _objectId: string,\n  ): Promise<SuiMoveNormalizedModules> {\n    throw this.newError('getNormalizedMoveModulesByPackage');\n  }\n\n  async getNormalizedMoveModule(\n    _objectId: string,\n    _moduleName: string,\n  ): Promise<SuiMoveNormalizedModule> {\n    throw this.newError('getNormalizedMoveModule');\n  }\n\n  async getNormalizedMoveFunction(\n    _objectId: string,\n    _moduleName: string,\n    _functionName: string,\n  ): Promise<SuiMoveNormalizedFunction> {\n    throw this.newError('getNormalizedMoveFunction');\n  }\n\n  async getNormalizedMoveStruct(\n    _objectId: string,\n    _oduleName: string,\n    _structName: string,\n  ): Promise<SuiMoveNormalizedStruct> {\n    throw this.newError('getNormalizedMoveStruct');\n  }\n\n  async syncAccountState(_address: string): Promise<any> {\n    throw this.newError('syncAccountState');\n  }\n\n  async subscribeEvent(\n    _filter: SuiEventFilter,\n    _onMessage: (event: SuiEventEnvelope) => void,\n  ): Promise<SubscriptionId> {\n    throw this.newError('subscribeEvent');\n  }\n\n  async unsubscribeEvent(_id: SubscriptionId): Promise<boolean> {\n    throw this.newError('unsubscribeEvent');\n  }\n\n  private newError(operation: string): Error {\n    return new Error(`Please use a valid provider for ${operation}`);\n  }\n\n  async getTransactions(\n    _query: TransactionQuery,\n    _cursor: TransactionDigest | null,\n    _limit: number | null,\n    _order: Order,\n  ): Promise<PaginatedTransactionDigests> {\n    throw this.newError('getTransactions');\n  }\n\n  async getEvents(\n    _query: EventQuery,\n    _cursor: EventId | null,\n    _limit: number | null,\n    _order: Order,\n  ): Promise<PaginatedEvents> {\n    throw this.newError('getEvents');\n  }\n\n  // Checkpoints\n  async getLatestCheckpointSequenceNumber(): Promise<number> {\n    throw this.newError('getLatestCheckpointSequenceNumber');\n  }\n\n  async getCheckpointSummary(\n    _sequenceNumber: number,\n  ): Promise<CheckpointSummary> {\n    throw this.newError('getCheckpointSummary');\n  }\n\n  async getCheckpointSummaryByDigest(\n    _digest: CheckpointDigest,\n  ): Promise<CheckpointSummary> {\n    throw this.newError('getCheckpointSummaryByDigest');\n  }\n\n  async getCheckpointContents(\n    _sequenceNumber: number,\n  ): Promise<CheckpointContents> {\n    throw this.newError('getCheckpointContents');\n  }\n\n  async getCheckpointContentsByDigest(\n    _digest: CheckPointContentsDigest,\n  ): Promise<CheckpointContents> {\n    throw this.newError('getCheckpointContentsByDigest');\n  }\n\n  async getCommitteeInfo(_epoch?: number): Promise<CommitteeInfo> {\n    throw this.newError('getCommitteeInfo');\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// See: sui/crates/sui-types/src/intent.rs\nexport enum AppId {\n  Sui = 0,\n}\n\nexport enum IntentVersion {\n  V0 = 0,\n}\n\nexport enum IntentScope {\n  TransactionData = 0,\n  TransactionEffects = 1,\n  CheckpointSummary = 2,\n  PersonalMessage = 3,\n}\n\nexport type Intent = [IntentScope, IntentVersion, AppId];\n\nfunction intentWithScope(scope: IntentScope): Intent {\n  return [scope, IntentVersion.V0, AppId.Sui];\n}\n\nexport function messageWithIntent(scope: IntentScope, message: Uint8Array) {\n  const intent = intentWithScope(scope);\n  const intentMessage = new Uint8Array(intent.length + message.length);\n  intentMessage.set(intent);\n  intentMessage.set(message, intent.length);\n  return intentMessage;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Keypair } from '../cryptography/keypair';\nimport {\n  SerializedSignature,\n  toSerializedSignature,\n} from '../cryptography/signature';\nimport { Provider } from '../providers/provider';\nimport { SuiAddress } from '../types';\nimport { SignerWithProvider } from './signer-with-provider';\nimport { TxnDataSerializer } from './txn-data-serializers/txn-data-serializer';\n\nexport class RawSigner extends SignerWithProvider {\n  private readonly keypair: Keypair;\n\n  constructor(\n    keypair: Keypair,\n    provider?: Provider,\n    serializer?: TxnDataSerializer,\n  ) {\n    super(provider, serializer);\n    this.keypair = keypair;\n  }\n\n  async getAddress(): Promise<SuiAddress> {\n    return this.keypair.getPublicKey().toSuiAddress();\n  }\n\n  async signData(data: Uint8Array): Promise<SerializedSignature> {\n    const pubkey = this.keypair.getPublicKey();\n    const signature = this.keypair.signData(data, false);\n    const signatureScheme = this.keypair.getKeyScheme();\n\n    return toSerializedSignature({\n      signatureScheme,\n      signature,\n      pubKey: pubkey,\n    });\n  }\n\n  connect(provider: Provider): SignerWithProvider {\n    return new RawSigner(this.keypair, provider);\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nconst ELLIPSIS = '\\u{2026}';\n\nexport function formatAddress(address: string) {\n  const offset = address.startsWith('0x') ? 2 : 0;\n\n  return `0x${address.slice(offset, offset + 4)}${ELLIPSIS}${address.slice(\n    -4,\n  )}`;\n}\n\nexport function formatDigest(digest: string) {\n  // Use 10 first characters\n  return `${digest.slice(0, 10)}${ELLIPSIS}`;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport nacl from 'tweetnacl';\nimport { IntentScope, messageWithIntent } from './intent';\nimport * as secp from '@noble/secp256k1';\nimport {\n  fromSerializedSignature,\n  SerializedSignature,\n} from '../cryptography/signature';\n\n// TODO: This might actually make sense to eventually move to the `Keypair` instances themselves, as\n// it could allow the Sui.js to be tree-shaken a little better, possibly allowing keypairs that are\n// not used (and their deps) to be entirely removed from the bundle.\n\n/** Verify data that is signed with `signer.signMessage`. */\nexport async function verifyMessage(\n  message: Uint8Array | string,\n  serializedSignature: SerializedSignature,\n) {\n  const signature = fromSerializedSignature(serializedSignature);\n  const messageBytes = messageWithIntent(\n    IntentScope.PersonalMessage,\n    typeof message === 'string' ? fromB64(message) : message,\n  );\n\n  switch (signature.signatureScheme) {\n    case 'ED25519':\n      return nacl.sign.detached.verify(\n        messageBytes,\n        signature.signature,\n        signature.pubKey.toBytes(),\n      );\n    case 'Secp256k1':\n      return secp.verify(\n        secp.Signature.fromCompact(signature.signature),\n        await secp.utils.sha256(messageBytes),\n        signature.pubKey.toBytes(),\n      );\n    default:\n      throw new Error(\n        `Unknown signature scheme: \"${signature.signatureScheme}\"`,\n      );\n  }\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { UnserializedSignableTransaction } from '../signers/txn-data-serializers/txn-data-serializer';\nimport {\n  normalizeSuiAddress,\n  ObjectId,\n  SuiAddress,\n  SUI_FRAMEWORK_ADDRESS,\n} from '../types';\n\n/**\n * Address of the Sui System object.\n * Always the same in every Sui network (local, devnet, testnet).\n */\nexport const SUI_SYSTEM_STATE_OBJECT_ID: string = normalizeSuiAddress('0x5');\n\nexport const SUI_SYSTEM_MODULE_NAME = 'sui_system';\nexport const ADD_DELEGATION_MUL_COIN_FUN_NAME =\n  'request_add_delegation_mul_coin';\nexport const ADD_DELEGATION_LOCKED_COIN_FUN_NAME =\n  'request_add_delegation_mul_locked_coin';\nexport const WITHDRAW_DELEGATION_FUN_NAME = 'request_withdraw_delegation';\n\n/**\n * Utility class for `0x5` object\n */\nexport class SuiSystemStateUtil {\n  /**\n   * Create a new transaction for delegating coins ready to be signed and executed with `signer-and-provider`.\n   *\n   * @param coins the coins to be used in delegation\n   * @param amount the amount to delegate\n   * @param gasBudget omittable only for DevInspect mode\n   */\n  public static async newRequestAddDelegationTxn(\n    coins: ObjectId[],\n    amount: bigint,\n    validatorAddress: SuiAddress,\n    gasBudget?: number,\n    gasPayment?: ObjectId,\n    gasPrice?: number,\n  ): Promise<UnserializedSignableTransaction> {\n    // TODO: validate coin types and handle locked coins\n    return {\n      kind: 'moveCall',\n      data: {\n        packageObjectId: SUI_FRAMEWORK_ADDRESS,\n        module: SUI_SYSTEM_MODULE_NAME,\n        function: ADD_DELEGATION_MUL_COIN_FUN_NAME,\n        typeArguments: [],\n        arguments: [\n          SUI_SYSTEM_STATE_OBJECT_ID,\n          coins,\n          [String(amount)],\n          validatorAddress,\n        ],\n        gasBudget,\n        gasPayment,\n        gasPrice,\n      },\n    };\n  }\n\n  /**\n   * Create a new transaction for withdrawing coins ready to be signed and\n   * executed with `signer-and-provider`.\n   *\n   * @param delegation the delegation object created in the requestAddDelegation txn\n   * @param stakedCoinId the coins to withdraw\n   * @param gasBudget omittable only for DevInspect mode\n   */\n  public static async newRequestWithdrawlDelegationTxn(\n    delegation: ObjectId,\n    stakedCoinId: ObjectId,\n    gasBudget?: number,\n    gasPayment?: ObjectId,\n    gasPrice?: number,\n  ): Promise<UnserializedSignableTransaction> {\n    return {\n      kind: 'moveCall',\n      data: {\n        packageObjectId: SUI_FRAMEWORK_ADDRESS,\n        module: SUI_SYSTEM_MODULE_NAME,\n        function: WITHDRAW_DELEGATION_FUN_NAME,\n        typeArguments: [],\n        arguments: [SUI_SYSTEM_STATE_OBJECT_ID, delegation, stakedCoinId],\n        gasBudget,\n        gasPayment,\n        gasPrice,\n      },\n    };\n  }\n}\n"],"mappings":"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","names":["GasCostSummary","import_tweetnacl","import_bcs","import_bcs","import_js_sha3","import_bcs","PublicKey","sha3","sha3","import_bcs","bip39MnemonicToSeedSync","import_bcs","import_hmac","import_bcs","import_bcs","nacl","RpcClient","fetch","import_superstruct","import_bcs","import_js_sha3","sha3","import_bcs","bcs","import_superstruct","import_superstruct","import_superstruct","import_superstruct","import_bcs","bcs","writer","reader","import_superstruct","value","import_superstruct","import_superstruct","import_superstruct","GasCostSummary","import_superstruct","import_superstruct","WsRpcClient","import_cross_fetch","fetch","import_superstruct","module","object","tok","bcs","import_bcs","import_superstruct","import_bcs","import_bcs","AppId","IntentVersion","IntentScope","bcs","import_bcs","import_tweetnacl","secp","nacl","import_bcs","import_superstruct"]}